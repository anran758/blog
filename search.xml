<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络原理笔记</title>
      <link href="/blog/2021/08/15/note-04741/"/>
      <url>/blog/2021/08/15/note-04741/</url>
      
        <content type="html"><![CDATA[<p>计算机网络原理学习笔记。</p><span id="more"></span><!-- omit in toc --><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><blockquote><p>下面目录定位有些使用不了。若需要跳转到具体段落应使用侧边栏文章定位</p></blockquote><ul><li><a href="#%E8%AE%A1%E7%AE%97%E7%B1%BB%E9%80%9F%E8%A7%88">计算类速览</a><ul><li><a href="#%E9%80%9F%E7%8E%87%E8%AE%A1%E7%AE%97">速率计算</a></li><li><a href="#%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB">汉明距离</a></li><li><a href="#%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E7%A0%81">循环冗余码</a></li></ul></li><li><a href="#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0">计算机网络概述</a><ul><li><a href="#%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7">常见应用的端口号</a></li><li><a href="#tcpiposi-%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B">TCP/IP、OSI 参考模型</a></li><li><a href="#201710-%E7%AE%80%E8%BF%B0osi%E5%8F%82%E6%95%B0%E6%A8%A1%E5%9E%8B%E7%89%A9%E7%90%86%E5%B1%82%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD%E5%8F%8A%E8%AF%A5%E5%B1%82%E5%8D%8F%E8%AE%AE%E8%A7%84%E5%AE%9A%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%89%B9%E6%80%A7">(2017.10) 简述OSI参数模型物理层的主要功能及该层协议规定的四个特性。</a></li></ul></li><li><a href="#%E5%BA%94%E7%94%A8%E5%B1%82">应用层</a><ul><li><a href="#%E7%AE%80%E8%BF%B0%E5%85%B8%E5%9E%8B%E7%9A%84http%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B6%E4%BD%9C%E7%94%A8">简述典型的HTTP请求方法及其作用</a></li><li><a href="#202104-%E7%AE%80%E8%BF%B0-pop3-%E5%8D%8F%E8%AE%AE%E4%BA%A4%E4%BA%92%E8%BF%87%E7%A8%8B">(2021.04) 简述 POP3 协议交互过程</a></li></ul></li><li><a href="#%E4%BC%A0%E8%BE%93%E5%B1%82">传输层</a><ul><li><a href="#tcpip">TCP/IP</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E4%BC%A0%E8%BE%93%E5%B1%82%E6%89%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8A%9F%E8%83%BD">简述传输层所实现的功能</a></li><li><a href="#201910-%E7%AE%80%E8%BF%B0%E4%BC%A0%E8%BE%93%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9A%84%E4%B8%BB%E8%A6%81%E6%8E%AA%E6%96%BD">(2019.10) 简述传输层实现可靠数据传输的主要措施</a></li><li><a href="#201804-%E7%AE%80%E8%BF%B0%E4%BF%9D%E8%AF%81%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8F%AF%E9%9D%A0%E6%80%A7%E7%9A%84%E7%A1%AE%E8%AE%A4%E4%B8%8E%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6%E7%9A%84%E6%A6%82%E5%BF%B5">(2018.04) 简述保证网络传输可靠性的确认与重传机制的概念</a></li><li><a href="#201810-%E7%AE%80%E8%BF%B0%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6%E7%9A%84%E6%A6%82%E5%BF%B5%E4%BB%A5%E5%8F%8A%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95">(2018.10) 简述差错控制的概念以及差错控制的基本方法</a></li><li><a href="#201904-%E7%AE%80%E8%BF%B0tcp%E6%89%80%E6%8F%90%E4%BE%9B%E7%9A%84%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1">(2019.04) 简述TCP所提供的面向连接服务</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E4%B8%BA-udp-%E5%A5%97%E6%8E%A5%E5%AD%97%E5%88%86%E9%85%8D%E7%AB%AF%E5%8F%A3%E5%8F%B7%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95">简述为 UDP 套接字分配端口号的两种方法</a></li><li><a href="#%E7%AE%80%E8%BF%B0-udp-%E6%8F%90%E4%BE%9B%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E5%BE%81">简述 UDP 提供的服务的主要特征</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C%E5%B1%82">网络层</a><ul><li><a href="#202104-%E7%AE%80%E8%BF%B0%E8%99%9A%E7%94%B5%E8%B7%AF%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E6%9E%84%E6%88%90%E8%A6%81%E7%B4%A0">(2021.04) 简述虚电路的概念及其构成要素</a></li><li><a href="#201910-%E8%99%9A%E7%94%B5%E8%B7%AF%E4%BA%A4%E6%8D%A2%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%AE%E5%88%AB">(2019.10) 虚电路交换和数据交换的主要差别</a></li><li><a href="#%E7%94%B5%E8%B7%AF%E4%BA%A4%E6%8D%A2%E7%9A%84%E7%89%B9%E7%82%B9%E5%92%8C%E4%BC%98%E7%BC%BA%E7%82%B9">电路交换的特点和优缺点</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E6%B0%B8%E4%B9%85%E8%99%9A%E7%94%B5%E8%B7%AF%E4%B8%8E%E4%BA%A4%E6%8D%A2%E8%99%9A%E7%94%B5%E8%B7%AF%E7%9A%84%E5%8C%BA%E5%88%AB">简述永久虚电路与交换虚电路的区别</a></li><li><a href="#201810-%E7%AE%80%E8%BF%B0%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BE%93%E5%85%A5%E7%AB%AF%E5%8F%A3%E6%8E%A5%E5%8F%97%E4%B8%8E%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BF%87%E7%A8%8B">(2018.10) 简述路由器输入端口接受与处理数据的过程</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E4%B8%8E%E5%B1%80%E5%9F%9F%E7%BD%91">数据链路层与局域网</a><ul><li><a href="#%E5%B8%A7%E7%9A%84%E7%BB%84%E6%88%90">帧的组成</a></li><li><a href="#-%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE-">==== 多路访问控制协议 ====</a><ul><li><a href="#201810-%E9%9D%9E%E5%9D%9A%E6%8C%81-csma-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86">(2018.10) 非坚持 csma 的基本原理</a></li><li><a href="#1-%E5%9D%9A%E6%8C%81-csma-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86">1-坚持 csma 的基本原理</a></li></ul></li><li><a href="#-%E5%B1%80%E5%9F%9F%E7%BD%91-">==== 局域网 ====</a><ul><li><a href="#201810-%E7%AE%80%E8%BF%B0%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE-arp-%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3">(2018.10) 简述地址解析协议 ARP 的作用和基本思想</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91vlan%E7%9A%84%E6%A6%82%E5%BF%B5%E4%BB%A5%E5%8F%8A%E5%88%92%E5%88%86%E6%96%B9%E6%B3%95">简述虚拟局域网(VLAN)的概念以及划分方法</a></li></ul></li></ul></li><li><a href="#%E7%89%A9%E7%90%86%E5%B1%82">物理层</a><ul><li><a href="#202104-%E7%AE%80%E8%BF%B0-cmi-%E7%A0%81%E7%9A%84%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99%E5%B9%B6%E7%94%BB%E5%87%BA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%AF%94%E7%89%B9%E5%BA%8F%E5%88%97-1011010011-%E7%9A%84-cmi-%E7%A0%81%E4%BF%A1%E5%8F%B7%E6%B3%A2%E5%BD%A2">(2021.04) 简述 CMI 码的编码规则，并画出二进制比特序列 1011010011 的 CMI 码信号波形</a></li><li><a href="#201810-%E7%B1%B3%E5%8B%92%E7%A0%81%E7%9A%84%E7%BC%96%E7%A0%81%E8%A7%84%E5%88%99">(2018.10) 米勒码的编码规则</a></li></ul></li><li><a href="#%E6%97%A0%E7%BA%BF%E4%B8%8E%E7%A7%BB%E5%8A%A8%E7%BD%91%E7%BB%9C">无线与移动网络</a><ul><li><a href="#%E7%AE%80%E8%BF%B0-4-%E4%B8%AA-ieee-80211-%E6%A0%87%E5%87%86%E5%85%B7%E6%9C%89%E7%9A%84%E5%85%B1%E5%90%8C%E7%89%B9%E5%BE%81">简述 4 个 IEEE 802.11 标准具有的共同特征</a></li></ul></li><li><a href="#%E7%AE%80%E7%AD%94%E9%A2%98">简答题</a><ul><li><a href="#%E6%AF%8F%E4%B8%AA-as-%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87-bgp%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE-%E5%AE%9E%E7%8E%B0%E5%93%AA%E4%BA%9B%E5%8A%9F%E8%83%BD">每个 AS 可以通过 BGP(边界网关协议) 实现哪些功能</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E5%BA%94%E6%BB%A1%E8%B6%B3%E7%9A%84%E8%A6%81%E6%B1%82">简述数字签名应满足的要求</a></li></ul></li><li><a href="#%E5%9F%BA%E7%A1%80%E8%AE%A1%E7%AE%97">基础计算</a><ul><li><a href="#%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6">十进制转二进制</a></li><li><a href="#2n-%E9%80%9F%E6%9F%A5%E8%A1%A8">2^n 速查表</a></li><li><a href="#%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E9%80%9F%E8%A7%88">子网掩码速览</a></li><li><a href="#%E9%80%9A%E8%BF%87-ip-%E5%9C%B0%E5%9D%80%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E6%8E%A8%E7%AE%97%E5%87%BA%E5%85%B6%E4%BB%96%E4%BF%A1%E6%81%AF">通过 IP 地址与子网掩码推算出其他信息</a></li></ul></li></ul><hr><h2 id="计算类速览"><a href="#计算类速览" class="headerlink" title="计算类速览"></a>计算类速览</h2><h3 id="速率计算"><a href="#速率计算" class="headerlink" title="速率计算"></a>速率计算</h3><ol><li><p>传输时延：链路发送到结束所用的时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dt &#x3D; L(分组长度) &#x2F; R(链路带宽)</span><br></pre></td></tr></table></figure></li><li><p>传播时延: 从发送端到接收端传输所需的时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp &#x3D; D(链路长度) &#x2F; V(信号传播速度)</span><br></pre></td></tr></table></figure></li><li><p>时延带宽(乘)积：传播时延和链路带宽的乘积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G &#x3D; dp(传播时延) * R(链路带宽)</span><br></pre></td></tr></table></figure></li></ol><!-- ### 传输编码**不归零**就一个柱子，**归零码**就到一半柱子就向下画。**双极**就是还有个负数的表差分码，碰到 1 就改变方向双向码(曼切斯特码)，1 画左半边，0 画右半边 --><h3 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h3><p>两个等长码字之间的，对应位不同的位数，成为<strong>两个码字的汉明距离</strong>。汉明距离是两个码字进行<strong>按位异或</strong>后 1 的个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">01100101</span><br><span class="line">10011101</span><br><span class="line">-------- 进行异或(^)</span><br><span class="line">11111000</span><br><span class="line">--------</span><br><span class="line">5个1，汉明距离 &#x3D; 5</span><br></pre></td></tr></table></figure><h3 id="循环冗余码"><a href="#循环冗余码" class="headerlink" title="循环冗余码"></a>循环冗余码</h3><p>多项式 <code>G(x)=x4 + x3 + 1</code>，对位串 <code>101100111101</code> 进行 CRC 编码，结果为:</p><p><code>G(x)=x4 + x3 + 1</code> 对应的比特位为 <code>11001</code>，则在待编位串后面添加 <code>0000</code>.</p><p>位串除 <code>11001</code></p><hr><h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><h3 id="常见应用的端口号"><a href="#常见应用的端口号" class="headerlink" title="常见应用的端口号"></a>常见应用的端口号</h3><table><thead><tr><th>应用</th><th>端口号</th></tr></thead><tbody><tr><td>TCP/FTP</td><td>21</td></tr><tr><td>SMTP</td><td>25</td></tr><tr><td>HTTP</td><td>80</td></tr><tr><td>POP3 服务器</td><td>110</td></tr></tbody></table><h3 id="TCP-IP、OSI-参考模型"><a href="#TCP-IP、OSI-参考模型" class="headerlink" title="TCP/IP、OSI 参考模型"></a>TCP/IP、OSI 参考模型</h3><img data-src="/blog/2021/08/15/note-04741/osi-modal.png" class="" title="参考模型"><table><thead><tr><th>OSI模型</th><th>单位</th></tr></thead><tbody><tr><td>7. 应用层</td><td>报文</td></tr><tr><td>4. 传输层</td><td>数据报/报文段</td></tr><tr><td>3. 网络层</td><td>分组/包</td></tr><tr><td>2. 数据链路层</td><td>帧</td></tr><tr><td>1. 物理层</td><td>比特流</td></tr></tbody></table><h3 id="2017-10-简述OSI参数模型物理层的主要功能及该层协议规定的四个特性。"><a href="#2017-10-简述OSI参数模型物理层的主要功能及该层协议规定的四个特性。" class="headerlink" title="(2017.10) 简述OSI参数模型物理层的主要功能及该层协议规定的四个特性。"></a>(2017.10) 简述OSI参数模型物理层的主要功能及该层协议规定的四个特性。</h3><p>物理层的主要功能是实现比特流的透明传输，为数据链路层提供数据传输服务。</p><p>物理层协议规定的特性包括：</p><ol><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>规程特性</li></ol><hr><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>网络协议的三要素包括</p><ul><li>语法: 定义实体之间交换信息的格式与结构</li><li>语义: 定义实体之间交换的信息中需要发送哪些控制信息，这些信息的具体含义，以及针对不同含义的控制信息，接收信息端应如何响应。</li><li>时序: 定义实体之间交换信息的顺序以及如何匹配或适应彼此的速度</li></ul><h3 id="简述典型的HTTP请求方法及其作用"><a href="#简述典型的HTTP请求方法及其作用" class="headerlink" title="简述典型的HTTP请求方法及其作用"></a>简述典型的HTTP请求方法及其作用</h3><ol><li>GET: 读取由 URL 所标识的信息</li><li>POST: 给服务器添加信息</li><li>HEAD: 请求读取由 URL 所标识的信息首部，无需在相应报文中包含对象</li><li>OPTION: 请求一些选项的信息</li><li>PUT: 在指明的 URL 下存储一个文档</li></ol><h3 id="2021-04-简述-POP3-协议交互过程"><a href="#2021-04-简述-POP3-协议交互过程" class="headerlink" title="(2021.04) 简述 POP3 协议交互过程"></a>(2021.04) 简述 POP3 协议交互过程</h3><blockquote><p>POP3 是邮件读取协议，可用于接收邮件。</p></blockquote><ol><li><strong>授权阶段</strong>: 用户代理需要向邮件服务器发送用户名和口令，服务器鉴别用户身份，授权访问邮箱。</li><li><strong>事务处理阶段</strong>: 用户代理向邮件服务器发送 POP3 命令，实现邮件读取，为邮件做删除编辑、取消邮件删除标记以及获取邮件的统计信息等操作。</li><li><strong>更新阶段</strong>: 客户发出来 quit 命令，结束 POP3 回话，服务器删除哪些被标记为删除的邮件。</li></ol><hr><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>传输层核心任务：为应用进程之间提供端到端的逻辑通信服务。</p><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><blockquote><p>核心层： <strong>传输层</strong><br>网络互联层核心协议: IP 协议  </p></blockquote><h3 id="简述传输层所实现的功能"><a href="#简述传输层所实现的功能" class="headerlink" title="简述传输层所实现的功能"></a>简述传输层所实现的功能</h3><p>实现的功能：</p><ol><li>传输层<strong>寻址</strong></li><li>对应用层报文进行<strong>分段和重组</strong></li><li>对报文进行<strong>差错检测</strong></li><li>实现进程间端到端的<strong>可靠数据传输控制</strong></li><li>面向应用层实现<strong>复用与分解</strong></li><li>流量控制</li><li>拥塞控制</li></ol><h3 id="2019-10-简述传输层实现可靠数据传输的主要措施"><a href="#2019-10-简述传输层实现可靠数据传输的主要措施" class="headerlink" title="(2019.10) 简述传输层实现可靠数据传输的主要措施"></a>(2019.10) 简述传输层实现可靠数据传输的主要措施</h3><blockquote><p>不可靠传输信道在数据传输中可能发生：</p><ol><li>比特差错</li><li>乱序</li><li>数据丢失</li></ol></blockquote><ol><li>差错控制: 利用差错编码实现数据报传输过程中的比特差检测(甚至是纠正)。</li><li>确认: 「接收方」向「发送方」反馈接受状态</li><li>重传: 「发送方」重新发送「接收方」没有正确接收到的数据</li><li>序号: 确保数据按序提交</li><li>计时器: 解决数据丢失问题</li></ol><h3 id="2018-04-简述保证网络传输可靠性的确认与重传机制的概念"><a href="#2018-04-简述保证网络传输可靠性的确认与重传机制的概念" class="headerlink" title="(2018.04) 简述保证网络传输可靠性的确认与重传机制的概念"></a>(2018.04) 简述保证网络传输可靠性的确认与重传机制的概念</h3><ul><li>确认是指数据分组接受节点再收到每个分组后，要求想发送节点会送正确接受分组的确认信息。</li><li>在规定时间内，如果发送节点没有接收到「接收方」返回的确认信息，就认为该数据分组发送失败，发送节点会重传该数据分组。</li></ul><h3 id="2018-10-简述差错控制的概念以及差错控制的基本方法"><a href="#2018-10-简述差错控制的概念以及差错控制的基本方法" class="headerlink" title="(2018.10) 简述差错控制的概念以及差错控制的基本方法"></a>(2018.10) 简述差错控制的概念以及差错控制的基本方法</h3><p><strong>差错控制</strong>就是通过差错编码技术实现对<strong>信息传输的检测</strong>，并通过某种机制进行差错纠正和处理。  </p><p>差错检测的基本方法有:</p><ol><li>检错重发</li><li>检错丢弃</li><li>前向纠错</li><li>反馈校验</li></ol><h3 id="2019-04-简述TCP所提供的面向连接服务"><a href="#2019-04-简述TCP所提供的面向连接服务" class="headerlink" title="(2019.04) 简述TCP所提供的面向连接服务"></a>(2019.04) 简述TCP所提供的面向连接服务</h3><p>在生成报文开始传送之前，TCP 客户和服务器相互交换传输层的控制信息，完成握手。在客户进程与服务器进程的套接字之间建立一条逻辑的 TCP 连接。</p><h3 id="简述为-UDP-套接字分配端口号的两种方法"><a href="#简述为-UDP-套接字分配端口号的两种方法" class="headerlink" title="简述为 UDP 套接字分配端口号的两种方法"></a>简述为 UDP 套接字分配端口号的两种方法</h3><ol><li><strong>传输层自动分配</strong>: 创建一个 UDP 套接字时，传输层自动为该套接字分配一个端口号，该端口号当前未被该主机任何其他 UDP 套接字使用。</li><li><strong>手动绑定</strong>: 在创建 UDP 套接字后，通过调用 bind 函数来绑定一个特定的端口号。</li></ol><h3 id="简述-UDP-提供的服务的主要特征"><a href="#简述-UDP-提供的服务的主要特征" class="headerlink" title="简述 UDP 提供的服务的主要特征"></a>简述 UDP 提供的服务的主要特征</h3><ol><li>应用进程更容易控制发送什么数据以及什么时候发送。</li><li>无需建立连接</li><li>无连接状态</li><li>首部开销小，仅有8字节的开销</li></ol><hr><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>网络层提供的功能有：</p><ol><li>连接建立</li><li>路由</li><li>转发</li></ol><h3 id="2021-04-简述虚电路的概念及其构成要素"><a href="#2021-04-简述虚电路的概念及其构成要素" class="headerlink" title="(2021.04) 简述虚电路的概念及其构成要素"></a>(2021.04) 简述虚电路的概念及其构成要素</h3><p>虚电路是源主机到目的主机的一条路径上建立的一条网络层逻辑连接，成为虚电路。</p><blockquote><p>comment: 因为是逻辑连接，不是真实的电路连接，故称为虚电路</p></blockquote><p>一条虚电路由 3 个要素组成：</p><ol><li>从源主机到目的主机之间的一条路径</li><li>该路径上每条链路各有一个虚电路标记（VCID）</li><li>该路径上每台分组交互机的转发表记录虚电路标识的接续关系</li></ol><h3 id="2019-10-虚电路交换和数据交换的主要差别"><a href="#2019-10-虚电路交换和数据交换的主要差别" class="headerlink" title="(2019.10) 虚电路交换和数据交换的主要差别"></a>(2019.10) 虚电路交换和数据交换的主要差别</h3><ul><li>虚电路网络通常由<strong>网络完成顺序控制、差错控制和流量控制等功能</strong>，向端系统提供无差错数据传送服务，而端系统则可以很简单。</li><li>数据报网络的<strong>顺序控制、差错控制和流量控制等功能需要由端系统完成</strong>，网络实现的功能很简单，比如基本的路由与转发功能。</li></ul><h3 id="电路交换的特点和优缺点"><a href="#电路交换的特点和优缺点" class="headerlink" title="电路交换的特点和优缺点"></a>电路交换的特点和优缺点</h3><p>电路交换的特点是有连接的，在通信时需要先建立电路连接，在通讯过程中独占一个信道，在通讯结束后需要拆除电路连接。</p><p>优点: 实时性高，时延和时延抖动都较小<br>缺点: 对于突发性数据传输，信道利用率低，且传输速率单一。</p><h3 id="简述永久虚电路与交换虚电路的区别"><a href="#简述永久虚电路与交换虚电路的区别" class="headerlink" title="简述永久虚电路与交换虚电路的区别"></a>简述永久虚电路与交换虚电路的区别</h3><p>永久虚电路是一种提前建立、长期使用的虚电路，虚电路的建立时间开销基本上可以忽略。<br>交换虚电路是根据通信需要而临时建立的虚电路，通信结束后立即拆除，虚电路的建立和拆除时间有时相对影响较大。</p><h3 id="2018-10-简述路由器输入端口接受与处理数据的过程"><a href="#2018-10-简述路由器输入端口接受与处理数据的过程" class="headerlink" title="(2018.10) 简述路由器输入端口接受与处理数据的过程"></a>(2018.10) 简述路由器输入端口接受与处理数据的过程</h3><p>输入端口接受信号，还原数据链路层帧，提取 IP 数据报，根据 IP 数据报的目的 IP 地址检索路由表，决策将数据报交换到哪个输出端口</p><hr><h2 id="数据链路层与局域网"><a href="#数据链路层与局域网" class="headerlink" title="数据链路层与局域网"></a>数据链路层与局域网</h2><p>数据链路层提供的服务有：</p><ol><li>组帧</li><li>链路接入</li><li>可靠交付</li><li>差错控制</li></ol><h3 id="帧的组成"><a href="#帧的组成" class="headerlink" title="帧的组成"></a>帧的组成</h3><p><strong>HDLC</strong>: 帧组成:</p><ol><li><code>管理帧</code></li><li><code>信息帧</code></li><li><code>无序号帧</code></li></ol><p><strong>IEEE 802.11 帧</strong>:</p><ol><li><code>管理帧</code></li><li><code>控制帧</code></li><li><code>数据帧</code></li></ol><p><code>PPP (point to point protocol)</code> 数据帧结构：</p><ol><li>标志（01111110）</li><li>地址（11111111）</li><li>控制（00000011）</li><li>协议</li><li>信息</li><li>校验和</li><li>标志（01111110）</li></ol><h3 id="多路访问控制协议"><a href="#多路访问控制协议" class="headerlink" title="==== 多路访问控制协议 ===="></a>==== 多路访问控制协议 ====</h3><h4 id="2018-10-非坚持-csma-的基本原理"><a href="#2018-10-非坚持-csma-的基本原理" class="headerlink" title="(2018.10) 非坚持 csma 的基本原理"></a>(2018.10) 非坚持 csma 的基本原理</h4><ul><li>若通信站有数据发送，先监听信道，若<strong>发现信道空闲，则立即发送数据</strong>（与 <code>1-坚持 CSMA</code> 第一步一致）</li><li>若发现信道忙，则<strong>等待一个随机时间</strong>，然后再<strong>重新监听信道</strong>，尝试发送数据。</li><li>若发送数据时产生冲突，则<strong>等待一个随机时间</strong>，然后<strong>重新开始监听信道</strong>，尝试发送数据。</li></ul><p>这是个做事不太着急的协议。将上面文绉绉的描述用通俗的话来理解是：它在寝室中想要去洗澡</p><ol><li>它会先看看有没有人在用浴室，没人在用就直接去洗澡</li><li>去洗澡时发现有人也想用了，它会礼让给其他人。自个再晚一段时间再看看还有没有人用，没人用就自个用了</li><li>如果已经有人在用浴室了，那又晚点再看看</li></ol><h4 id="1-坚持-csma-的基本原理"><a href="#1-坚持-csma-的基本原理" class="headerlink" title="1-坚持 csma 的基本原理"></a>1-坚持 csma 的基本原理</h4><ul><li>若通信站有数据发送，先监听信道，若<strong>发现信道空闲，则立即发送数据</strong>（与 <code>非坚持 CSMA</code> 第一步一致）</li><li>若发现信道忙，则继续监听信道，直至发现信道空闲，然后立即发送数据。</li></ul><p>通俗话理解: 顾名思义，坚持不懈。如果浴室有人用了，我就守在门口。有人出来我就立马进去。</p><h3 id="局域网"><a href="#局域网" class="headerlink" title="==== 局域网 ===="></a>==== 局域网 ====</h3><h4 id="2018-10-简述地址解析协议-ARP-的作用和基本思想"><a href="#2018-10-简述地址解析协议-ARP-的作用和基本思想" class="headerlink" title="(2018.10) 简述地址解析协议 ARP 的作用和基本思想"></a>(2018.10) 简述地址解析协议 ARP 的作用和基本思想</h4><p>ARP 用于根据本网内<strong>目的主机</strong>或<strong>默认网关的 IP 地址</strong>获取其 MAC 地址。</p><p>基本思想是: 在每一台主机中设置专用内存区域作为 ARP 高速缓存区域，储存该主机所在局域网中其他主机和路由器(默认网关)的 IP 地址与 MAC 地址之间的映射，并且要经常更新这个映射表。</p><p>ARP 在局域网中通过广播 ARP 查询报文的方式，来询问某目的站的 IP 地址对应的 MAC 地址，即知道本网内某主机的 IP 地址就能知道它的 MAC 地址。</p><h4 id="简述虚拟局域网-VLAN-的概念以及划分方法"><a href="#简述虚拟局域网-VLAN-的概念以及划分方法" class="headerlink" title="简述虚拟局域网(VLAN)的概念以及划分方法"></a>简述虚拟局域网(VLAN)的概念以及划分方法</h4><p>虚拟局域网是一种基于交换机的逻辑分隔广播域的局域网应用形式。划分方法主要有 3 种:</p><ol><li>基于交换机端口划分</li><li>基于 MAC 地址划分</li><li>基于上层协议或地址划分</li></ol><hr><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="2021-04-简述-CMI-码的编码规则，并画出二进制比特序列-1011010011-的-CMI-码信号波形"><a href="#2021-04-简述-CMI-码的编码规则，并画出二进制比特序列-1011010011-的-CMI-码信号波形" class="headerlink" title="(2021.04) 简述 CMI 码的编码规则，并画出二进制比特序列 1011010011 的 CMI 码信号波形"></a>(2021.04) 简述 CMI 码的编码规则，并画出二进制比特序列 1011010011 的 CMI 码信号波形</h3><p>CMI 码的编码规则是将信息码的 0 编码为双极不归零码的 01，信息码的 1 交替编码为双极不归零码的 11 和 00。</p><img data-src="/blog/2021/08/15/note-04741/CMI-1.png" class=""><h3 id="2018-10-米勒码的编码规则"><a href="#2018-10-米勒码的编码规则" class="headerlink" title="(2018.10) 米勒码的编码规则"></a>(2018.10) 米勒码的编码规则</h3><blockquote><p>P229</p></blockquote><ol><li>信息码的 1 编码为「双极非归零码」的 01 或 10（占半格）</li><li>信息码连 1 时，后面的 1 要换编码</li><li>信息码的 0 编码为 00 或 11，中间码元不跳变（占一格）</li><li>单个 0 时不跳变</li><li>多个 0 时，间隔跳变</li><li>(备注): 有两极</li></ol><hr><h2 id="无线与移动网络"><a href="#无线与移动网络" class="headerlink" title="无线与移动网络"></a>无线与移动网络</h2><h3 id="简述-4-个-IEEE-802-11-标准具有的共同特征"><a href="#简述-4-个-IEEE-802-11-标准具有的共同特征" class="headerlink" title="简述 4 个 IEEE 802.11 标准具有的共同特征"></a>简述 4 个 IEEE 802.11 标准具有的共同特征</h3><ol><li>都使用相同介质访问协议 CSMA/CA。</li><li>链路层帧使用相同的帧格式</li><li>都具有降低传输速率以传输更远距离的能力</li><li>都支持“基础设施模式”和“自组织模式”两种模式</li></ol><hr><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><h3 id="每个-AS-可以通过-BGP-边界网关协议-实现哪些功能"><a href="#每个-AS-可以通过-BGP-边界网关协议-实现哪些功能" class="headerlink" title="每个 AS 可以通过 BGP(边界网关协议) 实现哪些功能"></a>每个 AS 可以通过 BGP(边界网关协议) 实现哪些功能</h3><blockquote><p>AS: Autonomous system, 自治系统</p></blockquote><ol><li>从相邻 AS 获取某子网的可达性信息。</li><li>向本 AS 内部的所有路由器传播跨 AS 的某子网可达性信息。</li><li>基于某子网可达性信息和 AS 策略，觉得到达该子网的最佳路由</li></ol><h3 id="简述数字签名应满足的要求"><a href="#简述数字签名应满足的要求" class="headerlink" title="简述数字签名应满足的要求"></a>简述数字签名应满足的要求</h3><ol><li>接收方能够确认或证实发送方的签名，但不能伪造</li><li>发送发发送签名给接受方后，就不能否认他所签发的信息</li><li>接收方对已收到的签名信息不能再否认，既有收报认证</li><li>第三者可以确认收发双方之间的消息传送，但不能伪造这一过</li></ol><hr><h2 id="基础计算"><a href="#基础计算" class="headerlink" title="基础计算"></a>基础计算</h2><h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3><p>十进制转二进制主要的方法是<strong>除2取余，逆序排列法</strong>。</p><p>可以写一个简单的 <code>js</code> 函数打印每次计算的结果。例如将整数 <code>251</code> 转为二进制的过程是:</p><details>  <summary>点击展开详细代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToBinary</span>(<span class="params">n, buffer = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="built_in">Math</span>.floor(n / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">const</span> b = n % <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  buffer.push(b);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;n&#125;</span> / 2 = <span class="subst">$&#123;a&#125;</span>...<span class="subst">$&#123;b&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (a === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = buffer.reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`将每次取到的余数逆转排序后，最终转换后的二进制是: <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> convertToBinary(a, buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">convertToBinary(<span class="number">521</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 521 / 2 = 260...1</span></span><br><span class="line"><span class="comment"> * 260 / 2 = 130...0</span></span><br><span class="line"><span class="comment"> * 130 / 2 = 65...0</span></span><br><span class="line"><span class="comment"> * 65 / 2 = 32...1</span></span><br><span class="line"><span class="comment"> * 32 / 2 = 16...0</span></span><br><span class="line"><span class="comment"> * 16 / 2 = 8...0</span></span><br><span class="line"><span class="comment"> * 8 / 2 = 4...0</span></span><br><span class="line"><span class="comment"> * 4 / 2 = 2...0</span></span><br><span class="line"><span class="comment"> * 2 / 2 = 1...0</span></span><br><span class="line"><span class="comment"> * 1 / 2 = 0...1</span></span><br><span class="line"><span class="comment"> * 将每次取到的余数逆转排序后，最终转换后的二进制是: 1000001001</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  js 的 toString 方法还可以将数值转为指定进制</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function">(<span class="params">n, base = <span class="number">2</span></span>) =&gt;</span> n.toString(base);</span><br><span class="line"></span><br><span class="line">fn(<span class="number">521</span>);   <span class="comment">// &quot;1000001001&quot;</span></span><br></pre></td></tr></table></figure></details><h3 id="2-n-速查表"><a href="#2-n-速查表" class="headerlink" title="2^n 速查表"></a>2^n 速查表</h3><details>  <summary>2 的 N 次方速查表</summary><table><thead><tr><th>次方</th><th>值</th></tr></thead><tbody><tr><td>2^1</td><td>2</td></tr><tr><td>2^2</td><td>4</td></tr><tr><td>2^3</td><td>8</td></tr><tr><td>2^4</td><td>16</td></tr><tr><td>2^5</td><td>32</td></tr><tr><td>2^6</td><td>64</td></tr><tr><td>2^7</td><td>128</td></tr><tr><td>2^8</td><td>256</td></tr><tr><td>2^9</td><td>512</td></tr><tr><td>2^10</td><td>1024</td></tr><tr><td>2^11</td><td>2048</td></tr><tr><td>2^12</td><td>4096</td></tr><tr><td>2^13</td><td>8192</td></tr><tr><td>2^14</td><td>16384</td></tr><tr><td>2^15</td><td>32768</td></tr><tr><td>2^16</td><td>65536</td></tr><tr><td>2^17</td><td>131072</td></tr><tr><td>2^18</td><td>262144</td></tr><tr><td>2^19</td><td>524288</td></tr><tr><td>2^20</td><td>1048576</td></tr></tbody></table></details><h3 id="子网掩码速览"><a href="#子网掩码速览" class="headerlink" title="子网掩码速览"></a>子网掩码速览</h3><table><thead><tr><th>类别</th><th>子网掩码十进制</th><th>子网掩码二进制</th></tr></thead><tbody><tr><td>A</td><td><code>255.0.0.0</code></td><td><code>11111111 00000000 00000000 00000000</code></td></tr><tr><td>B</td><td><code>255.255.0.0</code></td><td><code>11111111 11111111 00000000 00000000</code></td></tr><tr><td>C</td><td><code>255.255.255.0</code></td><td><code>11111111 11111111 11111111 00000000</code></td></tr></tbody></table><h3 id="通过-IP-地址与子网掩码推算出其他信息"><a href="#通过-IP-地址与子网掩码推算出其他信息" class="headerlink" title="通过 IP 地址与子网掩码推算出其他信息"></a>通过 IP 地址与子网掩码推算出其他信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 子网地址: 主机 IP 地址 &amp; 子网掩码</span><br><span class="line">2. 广播地址: 子网地址  | 子网掩码反码</span><br></pre></td></tr></table></figure><!-- ### 计算子网掩码在求子网掩码之前必须先搞清楚要**划分的子网数目**，以及每个子网内的**所需主机数目**。1. 将子网数目**转化为二进制**来表示2. 取得该二进制的位数，为 `N`3. 取得该类 IP 地址的子网掩码，将其主机地址部分的的**前 N 位设为 1**，即得出该IP地址划分子网的子网掩码。| 划分子网数 | 子网位数 | 子网掩码（二进制）                    | 子网掩码（十进制） | 每个子网主机数 || ---------- | -------- | ------------------------------------- | ------------------ | -------------- || 1～2       | 1        | `11111111 11111111 11111111 10000000` | `255.255.255.128`  | 126            || 3～4       | 2        | `11111111 11111111 11111111 11000000` | `255.255.255.192`  | 62             || 5～8       | 3        | `11111111 11111111 11111111 11100000` | `255.255.255.224`  | 30             || 9～16      | 4        | `11111111 11111111 11111111 11110000` | `255.255.255.240`  | 14             || 17～32     | 5        | `11111111 11111111 11111111 11111000` | `255.255.255.248`  | 6              || 33～64     | 6        | `11111111 11111111 11111111 11111100` | `255.255.255.252`  | 2              |### 通过要划分的子网数求子网掩码**Q:** 将一个 **C 类 IP 地址**划分为 **8 个子网**，其掩码是?  **A:** 按照以上的步骤操作：1. 子网数目为 8，`十进制 8` 转为二进制是 `1000`2. 二进制位数为 `4` 位3. 子网掩码的取值是: **对应网络前缀，全部为 1，其余位(主机部分)全部为 0**。IPv4 的长度是 32 位。其中，C 类 IP 地址的网络前缀有 24 位，其余 8 位是主机号。将 子网掩码是 `255.255.255.0` --><!-- Math.ceil(Math.sqrt(2)) -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Accessibility Parsing 无障碍页面分析</title>
      <link href="/blog/2021/04/13/w3c-validator/"/>
      <url>/blog/2021/04/13/w3c-validator/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2021/04/13/w3c-validator/banner.jpg" class=""><p>最近项目需要做 Accessibility 的处理，在这段时间的接触了很多无障碍相关的技术。除了基础的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Accessibility/ARIA">ARIA</a> 和相对单位的影响等基础知识外，本篇想介绍一下比较实用的 Accessibility Parsing tools。</p><span id="more"></span><hr><p><a href="http://validator.w3.org/nu/">Nu Html Checker</a> 是用于检查 HTML page 是否符合语义化，捕获可能会遗漏的错误，以便进行修复。它提供输入 URL 地址、上传 HTML 文件和文字输入的形式来检查代码。</p><p>以 <a href="https://developer.mozilla.org/zh-CN/">MDN 文档</a> 为例:</p><img data-src="/blog/2021/04/13/w3c-validator/mdn-nu.png" class="" title="mdn nu"><p>可以看到在 Input 框输入 URL 后，点击 check button 得到关于 HTML 语义化的分析报告。它主要分为两个等级:</p><ol><li><strong>Error</strong>: 被标记为 Error 的问题是因为它们是可访问性、可用性、互操作性、安全性或可维护性的潜在问题。或者因为它们可能导致性能下降，或可能导致脚本以难以解决的方式失败。</li><li><strong>Warning</strong>: 被标记为 warning 的代码意味着这种写法不够好，但对 Accessibility 的问题影响有限。</li></ol><p>可见 MDN 文档对于 Accessibility 的支持还是很不错的。</p><p>但如果我们的 page 是使用 <code>SPA (single-page application)</code>，也就是页面的内容是动态生成的话。那就需要等内容加载完毕后，右键保存为 HTML 文件后再上传分析，或通过开发者工具直接 copy HTML 字符串进行分析。</p><p>下面任取一个 SPA 网站，直接 copy 网站的 HTML code 做分析，步骤如下:</p><ol><li>当 SPA page 的内容加载完毕后，打开浏览器开发者工具。</li><li>Tab 选择 <code>Elements</code>, 右键 <code>&lt;html&gt;</code> 节点，选择 <code>Copy</code> -&gt; <code>Copy outHTML</code>。</li><li>将 Nu HTML checker 中的 Check by 选为 text input, 在 input 框粘贴刚才 copy 的 HTML code。</li><li>由于 copy 中不会把 <code>&lt;!DOCTYPE html&gt;</code> 带过来，因此我们还得加上这句。</li><li>点击 check button。</li></ol><img data-src="/blog/2021/04/13/w3c-validator/check-by-textinput.png" class="" title="测试 SPA page"><p>可以发现该页面可以优化的东西还有很多，但错误数量一多就有点眼花缭乱的。因此 Nu Html Checker 还提供 <code>Message Filtering</code> 以展示关键的信息:</p><img data-src="/blog/2021/04/13/w3c-validator/Message-Filtering.png" class="" title="Message Filtering"><p>当然，有时候我们主要想关注这个 page 关于 accessibility 相关的结果，不想看那么多额外的信息。此时就可以使用 <a href="https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/">WCAG Parsing Validation Filter bookmarklet</a> 生成 accessibility 的信息简报。</p><p>该篇文档讲的东西其实很简单，无非就是它们提供了一段代码，用于提取关于 accessibility 的信息:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> filterStrings=[<span class="string">&quot;tag seen&quot;</span>,<span class="string">&quot;Stray end tag&quot;</span>,<span class="string">&quot;Bad start tag&quot;</span>,<span class="string">&quot;violates nesting rules&quot;</span>,<span class="string">&quot;Duplicate ID&quot;</span>,<span class="string">&quot;Unclosed element&quot;</span>,<span class="string">&quot;not allowed as child of element&quot;</span>,<span class="string">&quot;unclosed elements&quot;</span>,<span class="string">&quot;unquoted attribute value&quot;</span>,<span class="string">&quot;Duplicate attribute&quot;</span>,<span class="string">&quot;descendant of an element with the attribute&quot;</span>],filterRE=filterStrings.join(<span class="string">&quot;|&quot;</span>),i,nT=<span class="number">0</span>,nP1=<span class="number">0</span>,result,resultText,results,resultsP1=&#123;&#125;,root=<span class="built_in">document</span>.getElementById(<span class="string">&quot;results&quot;</span>);<span class="keyword">if</span>(!root)&#123;<span class="keyword">return</span>&#125;results=root.getElementsByTagName(<span class="string">&quot;li&quot;</span>);<span class="keyword">for</span>(i=results.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;result=results[i];<span class="keyword">if</span>(result.id.substr(<span class="number">0</span>,<span class="number">3</span>)===<span class="string">&quot;vnu&quot;</span>)&#123;<span class="keyword">if</span>(result.className!==<span class="string">&quot;info&quot;</span>)&#123;nT=nT+<span class="number">1</span>&#125;resultText=<span class="string">&quot;&quot;</span>+result.textContent;resultText=resultText.substring(<span class="number">0</span>,resultText.indexOf(<span class="string">&quot;.&quot;</span>));<span class="keyword">if</span>(resultText.match(filterRE)==<span class="literal">null</span>)&#123;result.style.display=<span class="string">&quot;none&quot;</span>;result.className=result.className+<span class="string">&quot;a11y-ignore&quot;</span>&#125;<span class="keyword">else</span>&#123;resultsP1[resultText.substr(<span class="number">7</span>)]=<span class="literal">true</span>;nP1=nP1+<span class="number">1</span>&#125;&#125;&#125;resultText=<span class="string">&quot;&quot;</span>;<span class="keyword">for</span>(i <span class="keyword">in</span> resultsP1)&#123;<span class="keyword">if</span>(resultsP1.hasOwnProperty(i))&#123;resultText=i+<span class="string">&quot;; &quot;</span>+resultText&#125;&#125;<span class="keyword">var</span> str=nT+<span class="string">&quot; validation errors and warnings.\n&quot;</span>+nP1+<span class="string">&quot; errors that may impact accessibility:\n&quot;</span>+resultText;<span class="built_in">console</span>.log(<span class="string">&quot;%c[WCAG Parsing Validation Filter bookmarklet@v4]:\n&quot;</span>,<span class="string">&quot;font-weight: bold&quot;</span>,<span class="string">&quot;https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/\n\n&quot;</span>+str);alert(str)&#125;)();</span><br></pre></td></tr></table></figure><p>以上是一段自执行的 JavaScript 代码，源代码是直接将信息通过 <code>alert</code> 打印出来。但我觉得不太方便复制，因此在原基础上增加了 <code>console</code> 的输出方式，便于复制信息。</p><p><strong>使用方式</strong>：</p><ol><li>打开浏览器书签管理器 (bookmark manage)</li><li>如果使用的是 chrome 浏览器的话，在右上角点开 “Add new bookmark”</li><li>书签名可自己决定，URL 输入如上代码即可，保存书签</li><li>在 Nu Html Checker 解析后的结果页中，点击刚才新建的标签就能看到弹出来的结果了</li></ol><img data-src="/blog/2021/04/13/w3c-validator/bookmaket.png" class="" title="WCAG Parsing Validation Filter bookmarklet 使用"><p>上图 <code>console</code> 中输出的信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[WCAG Parsing Validation Filter bookmarklet@v4]: https:&#x2F;&#x2F;labs.diginclusion.com&#x2F;tools&#x2F;bookmarklets&#x2F;wcag-parsing-filter&#x2F;</span><br><span class="line"></span><br><span class="line">91 validation errors and warnings.</span><br><span class="line">6 errors that may impact accessibility:</span><br><span class="line">Element a not allowed as child of element ul in this context; Element object not allowed as child of element ul in this context; Element style not allowed as child of element body in this context; </span><br></pre></td></tr></table></figure><p>从这份信息简报我们可以了解到：这个 page 有 91 个 <code>errors</code> 和 <code>warnings</code>。其中有 6 份错误会影响 accessibility。主要的错误是因为不合理的标签嵌套所引起的错误。这份简报就已经将我们所期望了解的信息都简短的概括了出，便于我们分析。</p>]]></content>
      
      
      <categories>
          
          <category> a11y </category>
          
      </categories>
      
      
        <tags>
            
            <tag> a11y </tag>
            
            <tag> W3C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程笔记</title>
      <link href="/blog/2021/02/10/note-023333/"/>
      <url>/blog/2021/02/10/note-023333/</url>
      
        <content type="html"><![CDATA[<p>软件工程相关笔记。</p><span id="more"></span><hr><ul><li><a href="#1-%E7%BB%AA%E8%AE%BA">1. 绪论</a><ul><li><a href="#%E7%AE%80%E8%BF%B0%E8%BD%AF%E4%BB%B6%E5%8D%B1%E6%9C%BA%E4%B8%8E%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5%E4%BB%A5%E5%8F%8A%E6%8F%90%E5%87%BA%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%9A%84%E7%9B%AE%E7%9A%84">简述软件危机与软件工程的概念以及提出软件工程概念的目的</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E6%9C%AC%E8%B4%A8">简述软件开发的本质</a></li></ul></li><li><a href="#2-%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E4%B8%8E%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E8%A7%84%E7%BA%A6">2. 软件需求与软件需求规约</a><ul><li><a href="#%E5%88%9D%E5%A7%8B%E5%8F%91%E7%8E%B0%E9%9C%80%E6%B1%82">初始发现需求</a></li><li><a href="#%E9%9C%80%E6%B1%82%E8%A7%84%E7%BA%A6%E5%AE%9A%E4%B9%89">需求规约定义</a></li><li><a href="#%E9%9C%80%E6%B1%82%E8%A7%84%E7%BA%A6%E7%9A%84%E4%B8%89%E7%A7%8D%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F">需求规约的三种基本形式</a></li></ul></li><li><a href="#3-%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%B9%E6%B3%95">3. 结构化方法</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%9A%84%E5%86%85%E8%81%9A%E6%80%A7">模块的内聚性</a></li><li><a href="#%E6%A8%A1%E5%9D%97%E9%97%B4%E7%9A%84%E8%80%A6%E5%90%88%E7%B1%BB%E5%9E%8B">模块间的耦合类型</a></li><li><a href="#%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E5%93%AA%E4%B8%80%E9%98%B6%E6%AE%B5%E5%AE%83%E7%9A%84%E4%B8%BB%E8%A6%81%E4%BC%98%E7%BC%BA%E7%82%B9%E6%9C%89%E5%93%AA%E4%BA%9B">程序流程图主要用于软件开发的哪一阶段？它的主要优缺点有哪些？</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">系统流程图与数据流程图有什么区别？</a></li><li><a href="#%E6%BC%94%E5%8C%96%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E5%BE%81%E6%98%AF%E4%BB%80%E4%B9%88%E5%AE%83%E5%AD%98%E5%9C%A8%E4%BB%80%E4%B9%88%E4%B8%8D%E8%B6%B3">演化模型的主要特征是什么？它存在什么不足？</a></li></ul></li><li><a href="#4-rupuml">4. RUP、UML</a><ul><li><a href="#%E5%9B%BE%E5%BD%A2%E5%B7%A5%E5%85%B7%E7%9A%84%E7%94%A8%E9%80%94">图形工具的用途</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-uml-%E5%AE%83%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9">什么是 UML? 它有什么特点？</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E6%B3%9B%E5%8C%96%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%B6%E7%BA%A6%E6%9D%9F">简述泛化的概念及其约束</a></li><li><a href="#rup-%E7%9A%84%E7%89%B9%E7%82%B9%E4%B9%8B%E4%B8%80%E6%98%AF%E8%BF%AD%E4%BB%A3%E5%A2%9E%E9%87%8F%E5%BC%8F%E5%BC%80%E5%8F%91%E5%AE%83%E8%A7%84%E5%AE%9A%E4%BA%86-4-%E4%B8%AA%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5%E8%AF%B7%E7%AE%80%E8%BF%B0%E6%AF%8F%E6%AC%A1%E8%BF%AD%E4%BB%A3%E5%9C%A8%E5%90%84%E9%98%B6%E6%AE%B5%E7%9A%84%E7%9B%AE%E6%A0%87">RUP 的特点之一是迭代、增量式开发，它规定了 4 个开发阶段。请简述每次迭代在各阶段的目标。</a></li><li><a href="#%E7%AE%80%E8%BF%B0-rup-%E5%92%8C-uml-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">简述 RUP 和 UML 之间的关系</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E4%B8%8E%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%A4%E4%B8%AA%E9%98%B6%E6%AE%B5%E4%BB%BB%E5%8A%A1%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB">简述需求分析与软件设计两个阶段任务的主要区别</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E4%BA%8B%E5%8A%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4">简述事务设计的基本步骤</a></li></ul></li><li><a href="#6-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95">6. 软件测试</a><ul><li><a href="#%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E6%B3%95%E5%92%8C%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">白盒测试法和黑盒测试法的区别是什么？</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4">简述软件测试的基本步骤</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E8%B7%AF%E5%BE%84%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%9A%84%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5">简述路径测试中几种典型的测试策略。</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E5%9B%A0%E6%9E%9C%E5%9B%BE%E6%96%B9%E6%B3%95%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%AD%A5%E9%AA%A4">简述因果图方法生成测试用例的基本步骤</a></li></ul></li><li><a href="#7-%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%AD%98%E5%91%A8%E6%9C%9F%E8%BF%87%E7%A8%8B%E4%B8%8E%E7%AE%A1%E7%90%86">7. 软件生存周期过程与管理</a><ul><li><a href="#%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%AD%98%E5%91%A8%E6%9C%9F%E6%A8%A1%E5%9E%8B">软件生存周期模型</a></li><li><a href="#%E7%AE%80%E8%BF%B0%E6%BC%94%E5%8C%96%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E4%B8%BB%E8%A6%81%E7%89%B9%E5%BE%81">简述演化模型及其主要特征</a></li></ul></li><li><a href="#8-%E9%9B%86%E6%88%90%E5%8C%96%E8%83%BD%E5%8A%9B%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B">8. 集成化能力成熟度模型</a><ul><li><a href="#%E8%83%BD%E5%8A%9B%E7%AD%89%E7%BA%A7">能力等级</a></li><li><a href="#%E6%88%90%E7%86%9F%E5%BA%A6%E7%AD%89%E7%BA%A7">成熟度等级</a></li></ul></li><li><a href="#%E5%85%B6%E4%BB%96">其他</a></li></ul><h2 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1. 绪论"></a>1. 绪论</h2><h3 id="简述软件危机与软件工程的概念以及提出软件工程概念的目的"><a href="#简述软件危机与软件工程的概念以及提出软件工程概念的目的" class="headerlink" title="简述软件危机与软件工程的概念以及提出软件工程概念的目的"></a>简述软件危机与软件工程的概念以及提出软件工程概念的目的</h3><ol><li><strong>软件危机</strong>: 是指软件生产率、软件质量远远不能满足社会发展的需求，成为社会、经济发展的制约因素的现象</li><li><strong>软件工程</strong>: 是应用计算机科学理论和技术以及工程管理原则和方法，按预算和进度实现满足用户需求的软件产品的工程，或以此为研究对象的学科</li><li><strong>提出软件工程概念的目的</strong>: 软件工程是倡导以工程的原理、原则和方法进行开发，以期解决出现的软件危机</li></ol><h3 id="简述软件开发的本质"><a href="#简述软件开发的本质" class="headerlink" title="简述软件开发的本质"></a>简述软件开发的本质</h3><p>不同抽象层<strong>术语之间</strong>的 “映射”，以及不同抽象层<strong>处理逻辑之间</strong>的映射。</p><h2 id="2-软件需求与软件需求规约"><a href="#2-软件需求与软件需求规约" class="headerlink" title="2. 软件需求与软件需求规约"></a>2. 软件需求与软件需求规约</h2><h3 id="初始发现需求"><a href="#初始发现需求" class="headerlink" title="初始发现需求"></a>初始发现需求</h3><p>初始发现需求的常见技术包括: 自悟、交谈、观察、小组会、提炼</p><h3 id="需求规约定义"><a href="#需求规约定义" class="headerlink" title="需求规约定义"></a>需求规约定义</h3><p>需求规约是一个软件项/产品/系统所有需求陈述的正式文档。它表述了软件产品/系统的概念模型。</p><p>它一般满足以下四点性质:</p><ol><li><strong>重要性和稳定性程度</strong>: 按需求的重要性和稳定性，对需求进行分级</li><li><strong>可修改的</strong>： 在不过多影响其他需求的前提下，可以容易修改单一的需求。</li><li><strong>完整的</strong>： 没有被遗漏的需求</li><li><strong>一致的</strong>: 不存在互斥的需求</li></ol><h3 id="需求规约的三种基本形式"><a href="#需求规约的三种基本形式" class="headerlink" title="需求规约的三种基本形式"></a>需求规约的三种基本形式</h3><!-- 2021.04 No.31 简述需求规约的三种基本形式 --><ol><li>非形式化的需求规约</li><li>半形式化的需求规约</li><li>形式化的需求规约</li></ol><h2 id="3-结构化方法"><a href="#3-结构化方法" class="headerlink" title="3. 结构化方法"></a>3. 结构化方法</h2><h3 id="模块的内聚性"><a href="#模块的内聚性" class="headerlink" title="模块的内聚性"></a>模块的内聚性</h3><p>内聚是测量一个模块化系统好坏的标准之一。主要分为7种评分:</p><ul><li><strong>功能内聚</strong> 10</li><li><strong>顺序内聚</strong> 9</li><li><strong>通信内聚</strong> 7</li><li>步骤内聚 5</li><li>时间内聚 3</li><li>逻辑内聚 1</li><li>偶然内聚 0</li></ul><p>前三种是可以接收的，后四种要尽量避免。</p><h3 id="模块间的耦合类型"><a href="#模块间的耦合类型" class="headerlink" title="模块间的耦合类型"></a>模块间的耦合类型</h3><p>常见的模块间耦合类型有 5 种，由强到弱有: 内容耦合、公共耦合、控制耦合、标记耦合、数据耦合。</p><h3 id="程序流程图主要用于软件开发的哪一阶段？它的主要优缺点有哪些？"><a href="#程序流程图主要用于软件开发的哪一阶段？它的主要优缺点有哪些？" class="headerlink" title="程序流程图主要用于软件开发的哪一阶段？它的主要优缺点有哪些？"></a>程序流程图主要用于软件开发的哪一阶段？它的主要优缺点有哪些？</h3><p>主要应用于 <strong>软件的详细设计阶段</strong>。</p><ul><li><p>主要优点是: <strong>对控制流程的描绘很直观，便于初学者掌握</strong>。</p></li><li><p>主要缺点是：</p><ol><li>不是一种逐步求精的工具，它诱使程序员过早地考虑程序的控制流程，而不考虑程序的全局结构。</li><li>所表达的控制流，往往不受任何约束，可随意转移。从而影响甚至破坏好的系统结构</li><li>不易表达数据结构</li></ol><img data-src="/blog/2021/02/10/note-023333/img-1.png" class="" title="系统流程图"></li></ul><h3 id="系统流程图与数据流程图有什么区别？"><a href="#系统流程图与数据流程图有什么区别？" class="headerlink" title="系统流程图与数据流程图有什么区别？"></a>系统流程图与数据流程图有什么区别？</h3><ol><li><strong>系统流程图</strong>是描述系统<strong>物理模型</strong>的工具，<strong>数据流程图</strong>是描述<strong>系统逻辑</strong>模型的工具。</li><li><strong>系统流程图</strong>从<strong>系统功能的角度</strong>抽象地描述<strong>系统的各个部分及其相互之间信息流动的情况</strong>。</li><li><strong>数据流程图</strong>从<strong>数据传送和加工的角度</strong>抽象地描述<strong>信息在系统中流动和数据处理的情况</strong>。</li></ol><h3 id="演化模型的主要特征是什么？它存在什么不足？"><a href="#演化模型的主要特征是什么？它存在什么不足？" class="headerlink" title="演化模型的主要特征是什么？它存在什么不足？"></a>演化模型的主要特征是什么？它存在什么不足？</h3><ol><li>该模型显式地把需求获取扩展到需求阶段，即为了第二个构造增量，使用了第一个构造增量来精化需求。</li><li>演化模型在一定程度上可以减少软件开发活动的满目性。</li></ol><p><strong>不足</strong>: 在演化模型的使用中，即便很好地理解了需求或设计，也<strong>很容易弱化需求分析阶段的工作</strong>。</p><h2 id="4-RUP、UML"><a href="#4-RUP、UML" class="headerlink" title="4. RUP、UML"></a>4. RUP、UML</h2><h3 id="图形工具的用途"><a href="#图形工具的用途" class="headerlink" title="图形工具的用途"></a>图形工具的用途</h3><ol><li>类图: 可视化表达<strong>系统静态结构模型</strong>的工具。</li><li>用况图: 表达<strong>系统功能模型</strong>的图形化工具。</li><li>状态图: 显示一个状态机的图。</li><li>顺序图: 一种交互图。由一组对象以及时序组织的对象之间的关系组成。</li></ol><h3 id="什么是-UML-它有什么特点？"><a href="#什么是-UML-它有什么特点？" class="headerlink" title="什么是 UML? 它有什么特点？"></a>什么是 UML? 它有什么特点？</h3><blockquote><p>UML: Unified Modeling Language, 统一建模语言</p></blockquote><ol><li>UML 是面向对象方法，它是一种根据客体之间的关系来构造系统模型的系统化方法。</li><li>UML 是一种可视化语言, 可用于规约系统的制品、构造系统的制品，建立系统制品的文档。这意味着 UML 可作为软件需求规约、设计和实现的工具。</li><li>UML 给出了方法学中不同抽象层次术语以及模型表达工具。</li></ol><h3 id="简述泛化的概念及其约束"><a href="#简述泛化的概念及其约束" class="headerlink" title="简述泛化的概念及其约束"></a>简述泛化的概念及其约束</h3><p>泛化是一般性类目(父类)和它的较为特殊的类目(子类)之间的关系，有时称为 “is-a-kind-of” 关系，UML 给出了 4 个约束:</p><ol><li>完整</li><li>不完整</li><li>互斥</li><li>重叠</li></ol><h3 id="RUP-的特点之一是迭代、增量式开发，它规定了-4-个开发阶段。请简述每次迭代在各阶段的目标。"><a href="#RUP-的特点之一是迭代、增量式开发，它规定了-4-个开发阶段。请简述每次迭代在各阶段的目标。" class="headerlink" title="RUP 的特点之一是迭代、增量式开发，它规定了 4 个开发阶段。请简述每次迭代在各阶段的目标。"></a>RUP 的特点之一是迭代、增量式开发，它规定了 4 个开发阶段。请简述每次迭代在各阶段的目标。</h3><ol><li><strong>初始阶段</strong>的基本目标：获得与特定用况和平台无关的系统体系结构轮廓，已建立产品功能范围；编制初始业务示例，从业务角度指出该项目的价值，减少项目主要错误风险。</li><li><strong>精化阶段</strong>的基本目标：捕获并描述系统的大部分需求，建立系统体系结构基线的第一个版本，主要包括用况模型和分析模型，减少次要的错误风险；到该阶段末，就能估算成本、进度，并能详细地规划构造阶段。</li><li><strong>构造阶段</strong>的基本目标：通过演化，形成最终的系统体系结构基线，开发完整的系统，确保产品可以开始向客户交付。</li><li><strong>移交阶段</strong>的基本目标：确保有一个实在的产品发布给用户群。</li></ol><h3 id="简述-RUP-和-UML-之间的关系"><a href="#简述-RUP-和-UML-之间的关系" class="headerlink" title="简述 RUP 和 UML 之间的关系"></a>简述 RUP 和 UML 之间的关系</h3><ol><li>RUP 和 UML 构成了一种特定的软件开发方法学</li><li>UML 作为一种可视化建模语言，给出了<strong>表达事务和事务之间关系的基本术语</strong>，给出了多种模型的表达工具。</li><li>RUP 利用 UML 的术语定义了 <strong>需求获取层</strong>、<strong>系统建模层</strong>、<strong>设计层</strong>、<strong>实现层</strong>，并给出各层模型映射的基本活动以及相关的指导。</li></ol><h3 id="简述需求分析与软件设计两个阶段任务的主要区别"><a href="#简述需求分析与软件设计两个阶段任务的主要区别" class="headerlink" title="简述需求分析与软件设计两个阶段任务的主要区别"></a>简述需求分析与软件设计两个阶段任务的主要区别</h3><p><strong>需求分析阶段</strong>的主要任务是<strong>定义软件的用户需求</strong>，即<strong>定义待开发的软件能做什么</strong>。</p><p><strong>软件设计阶段</strong>的主要任务是<strong>定义软件的实现细节，以满足用户需求</strong>，即<strong>研究如何实现软件</strong>。</p><h3 id="简述事务设计的基本步骤"><a href="#简述事务设计的基本步骤" class="headerlink" title="简述事务设计的基本步骤"></a>简述事务设计的基本步骤</h3><ol><li>设计准备，复审并精化系统的模型</li><li>确定事务处理中心</li><li>设计系统模块结构图的顶层和第一层</li><li>自顶向下，逐步求精</li></ol><h2 id="6-软件测试"><a href="#6-软件测试" class="headerlink" title="6. 软件测试"></a>6. 软件测试</h2><p>软件测试技术一般分为白盒测试技术和黑盒测试技术。</p><h3 id="白盒测试法和黑盒测试法的区别是什么？"><a href="#白盒测试法和黑盒测试法的区别是什么？" class="headerlink" title="白盒测试法和黑盒测试法的区别是什么？"></a>白盒测试法和黑盒测试法的区别是什么？</h3><p>白盒测试法<strong>完全了解程序的结构和处理过程</strong>，这种方法按照程序内部的逻辑结构以及有关信息设计或选择测试你用例，检查程序中每条通路是否都能按照预定要求正确工作。</p><p>黑盒测试法<strong>着眼于软件的外部特征，不考虑软件的内部逻辑和内部特征</strong>，只依据程序的需求规格说明书检查是否满足功能要求，测试要在软件的接口处进行。</p><h3 id="简述软件测试的基本步骤"><a href="#简述软件测试的基本步骤" class="headerlink" title="简述软件测试的基本步骤"></a>简述软件测试的基本步骤</h3><ol><li><strong>单元测试</strong>: 主要检验软件设计的最小单元——模块。该测试以详细设计文档为指导，测试模块内的重要控制路径。</li><li><strong>集成测试</strong>: 集成测试是软件组装的一个系统化技术，其目标是<strong>发现与接口有关的错误</strong>。将经过单元测试的模块构成一个满足设计要求的软件结构。</li><li><strong>有效性测试</strong>: 目标是发现<strong>软件实现的功能与需求规格说明书不一致的地方</strong>。</li><li><strong>系统测试</strong>: 验证将软件运行于更大系统中时整个系统的有效性。</li></ol><h3 id="简述路径测试中几种典型的测试策略。"><a href="#简述路径测试中几种典型的测试策略。" class="headerlink" title="简述路径测试中几种典型的测试策略。"></a>简述路径测试中几种典型的测试策略。</h3><ol><li>路径覆盖: 执行所有与可能穿过程序控制流的路径。(T 条件走一遍)</li><li>语句覆盖: 至少执行过程中所有语句一次。</li><li>分支覆盖: 至少将程序中每一个分支执行一次。</li><li>条件覆盖: 每个判定的<strong>所有可能的条件取值</strong>至少执行一次。（全取假值）</li><li>条件组合覆盖: 设计足够多的测试用例，使每个判定中的所有可能的条件取值组合至少执行一次。</li></ol><h3 id="简述因果图方法生成测试用例的基本步骤"><a href="#简述因果图方法生成测试用例的基本步骤" class="headerlink" title="简述因果图方法生成测试用例的基本步骤"></a>简述因果图方法生成测试用例的基本步骤</h3><ol><li>通过对软件规格说明书的分析，找出一个模块的原因和结果，并给每个原因和结果赋予一个标识符。</li><li>分析原因和结果之间以及原因与原因之间对应的关系，并画出因果图</li><li>在因果图上表示一些特定的约束或限制条件</li><li>把因果图转换判定表</li><li>为判定表的每一列设计测试用例</li></ol><h2 id="7-软件生存周期过程与管理"><a href="#7-软件生存周期过程与管理" class="headerlink" title="7. 软件生存周期过程与管理"></a>7. 软件生存周期过程与管理</h2><h3 id="软件生存周期模型"><a href="#软件生存周期模型" class="headerlink" title="软件生存周期模型"></a>软件生存周期模型</h3><p>时间顺序:</p><ul><li><strong>瀑布模型</strong>(1970, 20世纪60年代到80年代的主要成果)</li><li>演化模型</li><li>螺旋模型(1988, 加入了前两者所忽略的风险分析)</li><li>喷泉模型: 体现了软件创建所固有的迭代和无间隙的特征。</li></ul><h3 id="简述演化模型及其主要特征"><a href="#简述演化模型及其主要特征" class="headerlink" title="简述演化模型及其主要特征"></a>简述演化模型及其主要特征</h3><p>演化模型主要针对<strong>事先不能完整定义需求</strong>的软件开发，在用户提出待开发系统的核心需求的基础上，软件开发人员首先开发一个核心系统并投入运行，<strong>以便用户能够有效地提出反馈</strong>，即提出精化系统能力的需求。</p><p>接着，软件开发人员根据用户反馈，实施开发的迭代过程均由需求，设计，编码、测试、集成等阶段组成。为整个系统添加一个可定制的、可管理的子集；如果在一次迭代中，有的需求不能满足用户的要求，可在下一次迭代中予以修正。</p><p>演化模型的主要特征是: 该模型<strong>显式地把需求获取扩展到需求阶段</strong>，即为了第二个构造增量使用，使用第一个构造增量来精化需求。</p><h2 id="8-集成化能力成熟度模型"><a href="#8-集成化能力成熟度模型" class="headerlink" title="8. 集成化能力成熟度模型"></a>8. 集成化能力成熟度模型</h2><h3 id="能力等级"><a href="#能力等级" class="headerlink" title="能力等级"></a>能力等级</h3><p>一种过程改善路径，该路径可使组织<strong>针对单一过程域</strong>不断改善该过程域。</p><ul><li>0 级: 未完成级</li><li>1 级: 已执行级</li><li>2 级: 已管理级</li><li>3 级: 已定义级</li><li>4 级: 已定量管理级</li><li>5 级: 持续优化级</li></ul><h3 id="成熟度等级"><a href="#成熟度等级" class="headerlink" title="成熟度等级"></a>成熟度等级</h3><p>一种过程改善路径，该路径可使组织<strong>针对一组过程域</strong>不断改善该过程域。</p><ul><li>1 级: 初始级</li><li>2 级: 已管理级</li><li>3 级: 已定义级</li><li>4 级: 已定量管理级</li><li>5 级: 持续优化级</li></ul><p>能力等级和成熟度等级等级只有 1 级名称不同，2~5 是相等名称。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>计算机软件一般是指计算机系统中的程序及其 <strong>文档(或数据和文档)</strong></li><li>对于单一一个需求，必须具有的基本性质: <strong>必要的</strong>、<strong>无歧义的</strong>、<strong>可追踪的</strong>、<strong>可测试的</strong>、<strong>可测量的</strong>。</li><li>需求人员通过提出问题/用户回答的方式，直接询问用户需要的初始发现需求技术是 <strong>交谈</strong>。</li><li>在结构化分析方法中，表示 “数据的静态结构“ 的术语是 <strong>数据存储</strong>。</li><li>为保证加入的模块没有引进新的错误，可能需要进行<strong>回归</strong>测试。</li><li>CMMI 的成熟度等级和能力等级还可用于<strong>评选活动</strong>和<strong>估算</strong>。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树学习笔记</title>
      <link href="/blog/2021/01/05/binary-tree/"/>
      <url>/blog/2021/01/05/binary-tree/</url>
      
        <content type="html"><![CDATA[<p>二叉树数据结构的学习与笔记。</p><span id="more"></span><h2 id="二叉树的储存结构"><a href="#二叉树的储存结构" class="headerlink" title="二叉树的储存结构"></a>二叉树的储存结构</h2><p>二叉树有两种储存方式，一种是顺序储存结构，一种是链式储存结构。</p><p>顺序储存结构就是二叉树从上至下，每层从左到右给树中节点进行编号:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>0 是根节点，1 是根的左节点，2 是根的右节点，3 是根的左节点的左节点，4 是根的左节点的右节点…… 依照这个顺序排列下去。设 <code>i</code> 为顺序表中节点的索引, <code>Qi</code> 代表顺序表上储存的节点, <code>n</code> 为顺序表的长度，则可知:</p><ol><li><code>i = 0</code>，<code>Qi</code> 节点是根节点</li><li>若 <code>2i+1 &lt; n</code>, 则索引 <code>2i+1</code> 上储存的是 <code>Qi</code> 的左节点。反之，则没有节点。</li><li>若 <code>2i+2 &lt; n</code>, 则索引 <code>2i+2</code> 上储存的是 <code>Qi</code> 的右节点。反之，则没有节点。</li><li>**<code>Qi</code> 的双亲节点的索引为 <code>(i-1)/2</code>**。比如 <code>i=4</code>, <code>(i-1)/2</code> 向下取整等于 <code>1</code>, 索引为 <code>4</code> 的双亲节点为 <code>1</code>。</li></ol><p>链式储存的结构大致如下:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    val: <span class="built_in">number</span></span><br><span class="line">    left: TreeNode | <span class="literal">null</span></span><br><span class="line">    right: TreeNode | <span class="literal">null</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">val?: <span class="built_in">number</span>, left?: TreeNode | <span class="literal">null</span>, right?: TreeNode | <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = (val===<span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">        <span class="built_in">this</span>.left = (left===<span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">        <span class="built_in">this</span>.right = (right===<span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序结构转链式结构"><a href="#顺序结构转链式结构" class="headerlink" title="顺序结构转链式结构"></a>顺序结构转链式结构</h2><p>利用二叉树的性质，可以将顺序储存方式转换为对应的链式结构:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">val, left, right</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.val = (val === <span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">    <span class="built_in">this</span>.left = (left === <span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">    <span class="built_in">this</span>.right = (right === <span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toLinkedListBinaryTree</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 临时用于储存被转换为链表的节点</span></span><br><span class="line">  <span class="keyword">const</span> nodelist = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> TreeNode(list[i]);</span><br><span class="line">    nodelist.push(node);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根节点没有双亲节点</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 由结论 4 可得双亲节点的索引</span></span><br><span class="line">      <span class="keyword">const</span> parentIdx = <span class="built_in">Math</span>.floor((i - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">const</span> parent = nodelist[parentIdx];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当前层从左向右赋值，若左节点被赋值，则剩下右节点没有被赋值</span></span><br><span class="line">      <span class="keyword">if</span> (parent.left) &#123;</span><br><span class="line">        parent.right = node;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.left = node;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nodelist.shift()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 console 进行测试</span></span><br><span class="line">cnsole.log(toLinkedListBinaryTree([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]));</span><br></pre></td></tr></table></figure><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>遍历二叉树是指沿着某条搜索路径周游二叉树，依次对树中的每个节点访问且仅访问一次。</p><p>二叉树的遍历方式可以分为<strong>递归</strong>和<strong>非递归</strong>方式。遍历算法也可以分为**深度优先搜索 (Depth-First-Search，DFS)<strong>和</strong>广度优先搜索 (Breadth-First Search)**。</p><p>根据二叉树的递归定义，遍历一颗非空二叉树的问题可分为三个子问题: 访问根节点 (D)，遍历左子树 (L)，遍历右子树 (R)。遍历的顺序可分为: DLR (前序)、LDR (中序)、LRD (后序) 和 DRL (前序)、RDL (中序)、RLD (后序)。前三种是先左后右，后三种是先右后左。一般没有提别指明的话，我们谈论二叉树的遍历，都是在讲前三种。</p><p>二叉树的前序遍历、中序遍历、后序遍历都可以通过<strong>递归方式</strong>和<strong>非递归方式</strong>实现。</p><h3 id="前序序遍历"><a href="#前序序遍历" class="headerlink" title="前序序遍历"></a>前序序遍历</h3><p>递归形式:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> postorder(root, [])</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postorder</span>(<span class="params">root?: TreeNode, result = []</span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    result.push(root.val);</span><br><span class="line">    postorder(root.left, result);</span><br><span class="line">    postorder(root.right, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>递归形式:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> inorder(root, [])</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inorder</span>(<span class="params">root?: TreeNode, result = []</span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    inorder(root.left, result);</span><br><span class="line">    result.push(root.val);</span><br><span class="line">    inorder(root.right, result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>递归形式:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postorderTraversal</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> postorder(root, [])</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postorder</span>(<span class="params">root?: TreeNode, result = []</span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    postorder(root.left, result);</span><br><span class="line">    postorder(root.right, result);</span><br><span class="line">    result.push(root.val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>层序遍历就是把二叉树分层，然后每一层从左到右遍历：</p><img data-src="/blog/2021/01/05/binary-tree/hierarchical_diagram.jpg" class=""><p>层序遍历二叉树很自然就能想到使用 BFS(广度优先搜索) 来遍历每层。</p><p>该算法采用一个队列来缓存二叉树的节点，若树不为空，先将二叉树根节点输出，先将根节点入队，再到循环体内出队。若根节点还有左孩子，则将左孩子也添加到队列中。若有右孩子，也将右孩子也添加到队列中。如此下去，直到队列为空:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按层输出二叉树的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">levelOrder</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 队列，先进先出</span></span><br><span class="line">  <span class="keyword">const</span> queue = [root];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="comment">// 取队首的元素</span></span><br><span class="line">    <span class="keyword">const</span> node = queue.shift();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;node --&gt; &#x27;</span>, node.val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若有左右节点，则添加至队列</span></span><br><span class="line">    <span class="keyword">if</span> (node.left) queue.push(node.left);</span><br><span class="line">    <span class="keyword">if</span> (node.right) queue.push(node.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>若想将每一层的值都存入数组中，则可以采用二维数组进行储存:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">levelOrder</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="title">number</span>[][] </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最终会返回的结果</span></span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 队列，先进先出</span></span><br><span class="line">  <span class="keyword">const</span> queue = [root];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="comment">// 当前层级</span></span><br><span class="line">    <span class="keyword">const</span> level = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前队列的长度</span></span><br><span class="line">    <span class="keyword">const</span> n = queue.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> node = queue.shift();</span><br><span class="line">      level.push(node.val);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 若有左右节点，则添加至队列</span></span><br><span class="line">      <span class="comment">// 由于已经储存上一轮的节点数，因此这里不会影响 n 的值</span></span><br><span class="line">      <span class="keyword">if</span> (node.left) queue.push(node.left);</span><br><span class="line">      <span class="keyword">if</span> (node.right) queue.push(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result.push(level);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="合并二叉树"><a href="#合并二叉树" class="headerlink" title="合并二叉树"></a><a href="https://leetcode-cn.com/problems/merge-two-binary-trees/">合并二叉树</a></h2><p>不考虑副作用的话，可以直接将 root1 作为结果，修改 root1 的值即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeTrees</span>(<span class="params">root1?: TreeNode, root2?: TreeNode</span>): <span class="title">TreeNode</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root1 || !root2) <span class="keyword">return</span> root1 || root2;</span><br><span class="line"></span><br><span class="line">    root1.val += root2.val;</span><br><span class="line">    root1.left = mergeTrees(root1.left, root2.left);</span><br><span class="line">    root1.right = mergeTrees(root1.right, root2.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉排序树-BST"><a href="#二叉排序树-BST" class="headerlink" title="二叉排序树 (BST)"></a>二叉排序树 (BST)</h2><p>二叉排序树(Binary Sort Tree)又称二叉查找树，它是一种特殊的二叉树，它或为空树，或具有以下性质的二叉树:</p><ol><li>它的右子树非空，则右子树上所有节点的值都大于根节点的值。</li><li>它的左子树非空，则左子树上所有节点的值都小于根节点的值。</li><li>左右子树各是一颗二叉排序树。</li></ol><p>以下为创建二叉排序树的代码:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortedArrayToBST</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="title">TreeNode</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tree = <span class="literal">null</span>, node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(nums.length) &#123;</span><br><span class="line">        node = <span class="keyword">new</span> TreeNode(nums.shift())</span><br><span class="line">        tree = insertBST(tree, node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertBST</span>(<span class="params">tree: TreeNode, node: TreeNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> parent, p = tree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        <span class="comment">// parent 指向 p 的双亲</span></span><br><span class="line">        parent = p;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 要插入的节点的值小于 p 的值，赋值为左节点</span></span><br><span class="line">        <span class="comment">// 要插入的节点的值大于 p 的值，赋值为右节点</span></span><br><span class="line">        p  = node.val &lt; p.val ? p.left : p.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">null</span>) <span class="keyword">return</span> node;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// console.log(&#x27;p&#x27;,parent.val, node.val)</span></span><br><span class="line">    <span class="keyword">if</span>(node.val &lt; parent.val) &#123;</span><br><span class="line">        parent.left = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.right = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高度平衡二叉搜索树"><a href="#高度平衡二叉搜索树" class="headerlink" title="高度平衡二叉搜索树"></a><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">高度平衡二叉搜索树</a></h3><p><strong>高度平衡</strong>二叉树是一棵满足「每个节点的左右两个子树的<strong>高度差</strong>的绝对值不超过 1」的二叉树。</p><p>Q: 给定已按升序排序的整数数组，将其构建为二叉树。</p><p>A: 因为数组已经排过序了，因此可以直接采用二分法进行构建。先去中间的元素，再向两侧递归构建:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortedArrayToBST</span>(<span class="params">nums: <span class="built_in">number</span>[]</span>): <span class="title">TreeNode</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfs(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">nums: <span class="built_in">number</span>[], min: <span class="built_in">number</span>, max: <span class="built_in">number</span></span>): <span class="title">TreeNode</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (min &gt; max) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 取中间的索引，先减后加的方式可以避免索引值溢出</span></span><br><span class="line">    <span class="keyword">const</span> mid = min + <span class="built_in">Math</span>.floor((max - min) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于是采用二分法，因此左右子树的高度差不会超过 1</span></span><br><span class="line">    <span class="keyword">const</span> root = <span class="keyword">new</span> TreeNode(</span><br><span class="line">        nums[mid],</span><br><span class="line">        dfs(nums, min, mid - <span class="number">1</span>),</span><br><span class="line">        dfs(nums, mid + <span class="number">1</span>, max)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断指定树是否是平衡树"><a href="#判断指定树是否是平衡树" class="headerlink" title="判断指定树是否是平衡树"></a>判断指定树是否是平衡树</h3><p>可以采用自底向上进行遍历，该遍历方法类似于后序遍历:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBalanced</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> height(root) !== -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">height</span>(<span class="params">root?: TreeNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> left = height(root.left);</span><br><span class="line">    <span class="keyword">if</span> (left == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> right = height(root.right);</span><br><span class="line">    <span class="keyword">if</span> (right == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 高度差超过 1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(left - right) &gt; <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前层 + 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(left, right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：O(n)O(n)，其中 nn 是二叉树中的节点个数。使用自底向上的递归，每个节点的计算高度和判断是否平衡都只需要处理一次，最坏情况下需要遍历二叉树中的所有节点，因此时间复杂度是 O(n)O(n)。</li><li>空间复杂度：O(n)O(n)，其中 nn 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 nn。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包与链式设计的使用示例</title>
      <link href="/blog/2020/12/22/closure-and-function-chaining/"/>
      <url>/blog/2020/12/22/closure-and-function-chaining/</url>
      
        <content type="html"><![CDATA[<p>最近遇到了个按需请求数据的需求，非常适合用于讲解闭包与链式设计的例子，故来分享一下思路。</p><span id="more"></span><p>大致需求如下: 目前有个 list, list 中每项 item 都是可展开的折叠项。当展开某个折叠项时，需要根据 item 的 code 另外去取 name 的映射。考虑到列表的数据量非常大，且一次性查询过多 code 时，接口的查询效率会明显降低，故采用按需请求映射的方案。</p><p>屏蔽与本例无关的属性，瘦身后的 list 数据结构大致如下:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> DataType &#123;</span><br><span class="line">  code: <span class="built_in">string</span>;</span><br><span class="line">  paymentTransaction: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListType = DataType[];</span><br></pre></td></tr></table></figure><p>我们知道大型企业中的数据会比较复杂，比较常见的一种情况是数据中有一个 id 或 code 是用于跟另一个数据项相关联的。学习过数据库的同学很容易就联想到了<strong>外键</strong>这个概念。</p><p>现在我们就要取出这些 code 发送给服务端去查询。考虑到 code 可能会有重复，因此可以将 codes 存入 <code>Set</code> 中，利用 <code>Set</code> 的特性去重。除此之外，为了使 name 映射可以被复用，每次从接口返回的 name 映射将会被缓存起来。若下次再触发事件时有对应的 key，便不再查询。</p><p>我们可以将这段逻辑抽离出来作为一个依赖收集的函数:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapping = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collectionCodes</span>(<span class="params">initCodes?: <span class="built_in">string</span>[] | <span class="built_in">Set</span>&lt;<span class="built_in">string</span>&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> codes = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;<span class="built_in">string</span>&gt;(initCodes)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">append</span>(<span class="params">code: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!mapping.has(code)) &#123;</span><br><span class="line">        codes.add(code);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">empty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> !codes.size;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">value</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> codes;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>collectionCodes</code> 函数是用于收集 codes。它内部利用了闭包的特性将 codes 缓存了起来，并且在添加新的 code 之前会判断 code 在 local 的映射中是否已经存在。<code>append</code> 返回的 <code>this</code> 是经典的链式调用设计，允许多次链式添加。当本次依赖收集结束后，调用 <code>value</code> 方法获取最终的 codes。</p><p>可以写一些简单的 mock 数据进行尝试:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleNameMapping</span>(<span class="params">data: DataType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> codes = collectionCodes()</span><br><span class="line">    .append(data.code)</span><br><span class="line">    .append(<span class="string">&#x27;code-append-1&#x27;</span>)</span><br><span class="line">    .append(<span class="string">&#x27;code-append-1&#x27;</span>)</span><br><span class="line">    .append(<span class="string">&#x27;code-append-2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  data.paymentTransaction.forEach(<span class="function"><span class="params">code</span> =&gt;</span> codes.append(code));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (codes.empty()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;can get values from existing mapping.&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果请求的数据需要转为数组，可以 Array.from 进行转换</span></span><br><span class="line">  <span class="keyword">const</span> list = <span class="built_in">Array</span>.from(codes.value());</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fetch data before, codes --&gt; &#x27;</span>, list);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mock 获取数据后拿到 name mapping 后，存入 mapping 中的行为.</span></span><br><span class="line">  <span class="comment">// 注意，Set 类型也可以用 forEach 方法，不一定得转为数组才可以操作</span></span><br><span class="line">  list.forEach(<span class="function"><span class="params">code</span> =&gt;</span> mapping.set(code, <span class="string">`random-name-<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mockItemData = &#123;</span><br><span class="line">  code: <span class="string">&#x27;code-main&#x27;</span>,</span><br><span class="line">  paymentTransaction: [</span><br><span class="line">    <span class="string">&#x27;code-payment-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code-payment-1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code-payment-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code-payment-1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code-payment-3&#x27;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleNameMapping(mockItemData);</span><br><span class="line"><span class="comment">// fetch data before, codes --&gt;  (7) [&quot;code-main&quot;, &quot;code-append-1&quot;, &quot;code-append-2&quot;, &quot;code-payment-4&quot;, &quot;code-payment-1&quot;, &quot;code-payment-2&quot;, &quot;code-payment-3&quot;]</span></span><br><span class="line"></span><br><span class="line">handleNameMapping(mockItemData);</span><br><span class="line"><span class="comment">// can get values from existing mapping.</span></span><br></pre></td></tr></table></figure><p><code>handleNameMapping</code> 在发起请求前会做 code 收集，若本次收集中没有需要 fetch 的 code，那就避免发送无用的 HTTP 请求，从而达到了优化的目的。</p><p>最终示例的 TS 代码如下。若想直接在控制台尝试效果的话，可以通过 ts 官网中的 <a href="https://www.typescriptlang.org/play#code/JYOwLgpgTgZghgYwgAgCJzHAKgTwA4oDeAUMsggPYAmEAXMgM5hSgDmA3KcnnDgLYRwWKHBANEYYBRD0mLEKwDaAXU4BfYsUpiwyPnDx42yALzIQEAO7IAsgYAUASk7EYAVxAJJ08hQA2fhBeUiAAwtQQDPagwGDhNAwA-LLMbCrIAD7IAMoQYAA8cmwAfI7IJGTaTL4JpuZWOXmFqQrF0SCx8ZHOmmRQeW5QIOVcZAYEIFT2lDQp8qxlFWTLwDDI9gCE+oZsAHQAFnBRMxCOi6PLlREMu3BUUyc9l2QaF30DQ8hg+8AMnJdqAA0FwgfDwYBwThGz2Q-TAg2GGxONwYwAAXhB-ssgRcAG5wPxuCBQpaXOEImqRLEvYEvdSadyebzDQ6TQIAOTgAjsOwU9ioGDg9HQmFwBHOVx0lIYdUoASCzK6UUcF1uhkEUwFmF2j1V4w19gA5CcALT6yYmgCMhpVlzVEymxoiZvVFuttuW9oNTpoLodJoATDaXGQtXBdjx+IIwMJROJgtJdjAKFAAKKIfb2aYRMomYrSr2TbM0M4h5CrdbI3ag8GQs7Q5ZVfwQXZ+CisI0IUTIVh5ZD4wmRZAwKAUPjICAAD1+kgUenGe2DF3JQyxrzIAHoN8hAEGagBzzQDv0YAhG0AIW6AB1NAHbGgAB0wCBkYAbeMAXHJnwAjfoAYf8A98qAU7lkABBKAiHAk1HcdAG34wAZCLvQAjYy4KpdD8Gc6j-ACgLHYtIl2AciScJ5fDEZtW3bI0YDyBB9mQMNkAAIwgZN+kBaVkBNE180Nej4KYHouC3PQKAQABrZBAHbgwA15UvQA4FUAf6NAAYlcwuRQbYjDnMTX0ADW1AFNFedeVYZBAFo5E8wIfXYuO3QALm0AeENX1yXRAG8fQBo9UAfTkv0ACldhxTdNSOQQBO00AVZtX0AWDlAAA5QAs7UAdP1HxfQBZIy-QBZk0AHXkuHYsAkzcjM0NMfMFL2Bg8jQ+iAAMREmMcTRAOSTQAEkIOxvl2QqqFQxw1Dys5iFeWCeP4gBJSA+BFOA6iWE56B9CATX0UBWK4SMBCEQr42ZehFAuEaTWm6MTQAFkmy4VrW8ArW25Zdt4GawEDQ6yGOqN9utWkjtNPazoAZkO5RgTUFxWSoDk5J5RSOz4Xi+O60E+p6L6fu5Bc+UBrqerBzggA">Playground</a> 编译为可直接运行的 js 代码:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> DataType &#123;</span><br><span class="line">  code: <span class="built_in">string</span>;</span><br><span class="line">  paymentTransaction: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapping = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collectionCodes</span>(<span class="params">initCodes?: <span class="built_in">string</span>[] | <span class="built_in">Set</span>&lt;<span class="built_in">string</span>&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> codes = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;<span class="built_in">string</span>&gt;(initCodes);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">append</span>(<span class="params">code: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!mapping.has(code)) &#123;</span><br><span class="line">        codes.add(code);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">empty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> !codes.size;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">value</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> codes;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleNameMapping</span>(<span class="params">data: DataType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> codes = collectionCodes()</span><br><span class="line">    .append(data.code)</span><br><span class="line">    .append(<span class="string">&#x27;code-append-1&#x27;</span>)</span><br><span class="line">    .append(<span class="string">&#x27;code-append-1&#x27;</span>)</span><br><span class="line">    .append(<span class="string">&#x27;code-append-2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  data.paymentTransaction.forEach(<span class="function">(<span class="params">code</span>) =&gt;</span> codes.append(code));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (codes.empty()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;can get values from existing mapping.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果请求的数据需要转为数组，可以 Array.from 进行转换</span></span><br><span class="line">  <span class="keyword">const</span> list = <span class="built_in">Array</span>.from(codes.value());</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fetch data before, codes --&gt; &#x27;</span>, list);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mock 获取数据后拿到 name mapping 后，存入 mapping 中的行为.</span></span><br><span class="line">  <span class="comment">// 注意，Set 类型也可以用 forEach 方法，不一定得转为数组才可以操作</span></span><br><span class="line">  list.forEach(<span class="function"><span class="params">code</span> =&gt;</span> mapping.set(code, <span class="string">`random-name-<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mockItemData = &#123;</span><br><span class="line">  code: <span class="string">&#x27;code-main&#x27;</span>,</span><br><span class="line">  paymentTransaction: [</span><br><span class="line">    <span class="string">&#x27;code-payment-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code-payment-1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code-payment-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code-payment-1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code-payment-3&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">handleNameMapping(mockItemData);</span><br><span class="line"><span class="comment">// fetch data before, codes --&gt;  (7) [&quot;code-main&quot;, &quot;code-append-1&quot;, &quot;code-append-2&quot;, &quot;code-payment-4&quot;, &quot;code-payment-1&quot;, &quot;code-payment-2&quot;, &quot;code-payment-3&quot;]</span></span><br><span class="line"></span><br><span class="line">handleNameMapping(mockItemData);</span><br><span class="line"><span class="comment">// can get values from existing mapping.</span></span><br></pre></td></tr></table></figure><p>本例的分析就到此结束了，虽然在本例中链式调用没有充分展示出自己的优势，但也可以作为一个设计思路用于参考。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 链式设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 知识回顾 (优化篇)</title>
      <link href="/blog/2020/11/04/react-retrospection-2/"/>
      <url>/blog/2020/11/04/react-retrospection-2/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2020/11/04/react-retrospection-2/banner.png" class=""><p>接下来对 React 性能相关的问题进行知识回顾。</p><span id="more"></span><details><summary>完整目录概览</summary><ul><li><a href="#react-%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8">React 代码复用</a><ul><li><a href="#render-props">Render props</a></li><li><a href="#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">高阶函数、高阶组件分别是什么？</a></li></ul></li><li><a href="#react-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">React 性能优化</a></li><li><a href="#%E7%88%B6%E7%BB%84%E4%BB%B6%E5%9C%A8%E6%89%A7%E8%A1%8C-render-%E6%97%B6%E4%BC%9A%E4%B8%8D%E4%BC%9A%E8%A7%A6%E5%8F%91%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84-render-%E4%BA%8B%E4%BB%B6%E5%A6%82%E6%9E%9C%E4%BC%9A%E8%AF%A5%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8D">父组件在执行 render 时会不会触发子组件的 render 事件？如果会该怎么避免？</a></li><li><a href="#%E6%B8%B2%E6%9F%93%E5%88%97%E8%A1%A8%E4%B8%BA%E5%95%A5%E8%A6%81%E7%94%A8-key">渲染列表为啥要用 key？</a></li><li><a href="#%E8%99%9A%E6%8B%9F-dom-%E6%98%AF%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD%E7%9A%84">虚拟 dom 是如何提升性能的</a></li><li><a href="#%E7%AE%80%E8%BF%B0-react-diffing-%E7%AE%97%E6%B3%95">简述 React Diffing 算法</a></li><li><a href="#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8">异步组件怎么使用？</a></li><li><a href="#jsx-%E6%98%AF%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91%E4%B8%BA-js-%E4%BB%A3%E7%A0%81%E7%9A%84">JSX 是如何编译为 js 代码的？</a></li><li><a href="#%E6%80%8E%E4%B9%88%E5%AF%B9%E7%BB%84%E4%BB%B6%E7%9A%84%E5%8F%82%E6%95%B0%E5%81%9A%E7%B1%BB%E5%9E%8B%E7%BA%A6%E6%9D%9F%E5%91%A2">怎么对组件的参数做类型约束呢?</a></li></ul></details><h2 id="React-代码复用"><a href="#React-代码复用" class="headerlink" title="React 代码复用"></a>React 代码复用</h2><ul><li><a href="https://react.html.cn/docs/render-props.html">Render Props</a></li><li>高阶组件 (HOC)</li><li>自定义 Hooks</li><li>Mixins (已被 React 废弃)</li></ul><h3 id="Render-props"><a href="#Render-props" class="headerlink" title="Render props"></a>Render props</h3><p><code>Render props</code> 是一种在 React 组件之间共享代码的简单技术。具体的行为是:</p><ol><li>子组件接收一个用于渲染指定视图的 <code>prop</code> 属性，该属性的类型是函数。</li><li>父组件在组件内部定义该函数后，将函数的引入传给子组件</li><li>子组件将组件内部 <code>state</code> 作为实参传给从外面传来的函数，并将函数的返回结果渲染在指定的视图区域。</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件使用</span></span><br><span class="line">&lt;Mouse render=&#123;<span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>x: &#123;x&#125;, y: &#123;y&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件内部大致实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;section&gt;</span><br><span class="line">        &lt;header&gt;头部信息&lt;/header&gt;</span><br><span class="line">        &lt;main&gt;&#123;<span class="built_in">this</span>.props.render(<span class="built_in">this</span>.state)&#125;&lt;/main&gt;</span><br><span class="line">        &lt;footer&gt;底部信息&lt;/footer&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准确来说 <code>Render props</code> 是一个用于告知组件需要渲染什么内容的函数属性。<code>props</code> 的命名可以由自己定义，比如用于在内容区域渲染的 prop 名可以叫 <code>render</code>，同时还可以再接收一个 <code>renderHead</code> 的 prop 用于渲染头部的信息。</p><h3 id="高阶函数、高阶组件分别是什么？"><a href="#高阶函数、高阶组件分别是什么？" class="headerlink" title="高阶函数、高阶组件分别是什么？"></a>高阶函数、高阶组件分别是什么？</h3><p><strong>高阶函数</strong>就是<strong>接收其它函数作为参数</strong>的函数就称之为高阶函数，像数组的 <code>map</code> 、<code>sort</code>、<code>filter</code> 都是高阶函数。</p><p><strong>高阶组件(Higher-order component, HOC)</strong> 是 React 用于复用组件逻辑的一种高级技巧。它具体的行为是：</p><p>函数<strong>接收一个组件作为参数</strong>，在函数体内<strong>定义一个新组件</strong>，新组件内<strong>编写可复用的逻辑</strong>并应用到参数组件中。最后再将<strong>新组件作为函数的返回值</strong> return 出去。<br><code>redux</code> 中的 <code>connect</code> 函数就是一个高阶组件。</p><h2 id="React-性能优化"><a href="#React-性能优化" class="headerlink" title="React 性能优化"></a>React 性能优化</h2><ol><li>对比 <code>props/state</code> 新旧值的变化来决定是否渲染组件，参见：<a href="#%E7%88%B6%E7%BB%84%E4%BB%B6%E5%9C%A8%E6%89%A7%E8%A1%8C-render-%E6%97%B6%E4%BC%9A%E4%B8%8D%E4%BC%9A%E8%A7%A6%E5%8F%91%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84-render-%E4%BA%8B%E4%BB%B6%E5%A6%82%E6%9E%9C%E4%BC%9A%E8%AF%A5%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8D">父组件在执行 render 时会不会触发子组件的 render 事件？如果会该怎么避免？</a></li><li>列表渲染时每项添加唯一的 <code>key</code>。参见：<a href="#%E6%B8%B2%E6%9F%93%E5%88%97%E8%A1%A8%E4%B8%BA%E5%95%A5%E8%A6%81%E7%94%A8-key">渲染列表为啥要用 key？</a></li><li>定时器、DOM 事件等在组件销毁时一同销毁，从而避免内存泄露。</li><li>代码分割，使用异步组件。</li><li>Hooks 使用 <code>useMemo</code> 缓存上一次计算的结果，避免重复计算值。</li></ol><h2 id="父组件在执行-render-时会不会触发子组件的-render-事件？如果会该怎么避免？"><a href="#父组件在执行-render-时会不会触发子组件的-render-事件？如果会该怎么避免？" class="headerlink" title="父组件在执行 render 时会不会触发子组件的 render 事件？如果会该怎么避免？"></a>父组件在执行 render 时会不会触发子组件的 render 事件？如果会该怎么避免？</h2><p>如果父组件渲染后，子组件接收的 props 也跟着发生了改变，那么默认情况下会触发子组件的渲染。</p><p>若子组件接受的 props 没有发生改变，那就得判断子组件的状况。</p><p>如果子组件是继承于 <code>Component</code> 声明的组件，并且没有使用 <code>shouldComponentUpdate</code> 做避免重复渲染的处理，那么子组件会触发 <code>render</code> 事件。</p><p>为了避免重复渲染，类组件可以使用 <code>shouldComponentUpdate</code> 来决定是否进行渲染。也可以将继承于 <code>Component</code> 组件改为继承 <code>PureComponment</code>，该组件会浅对比 <code>Props</code> 是否进行改变，从而决定是否渲染组件。</p><p>如果是函数组件，可以通过 <code>React.memo</code> 来对函数组件进行缓存。</p><h2 id="渲染列表为啥要用-key？"><a href="#渲染列表为啥要用-key？" class="headerlink" title="渲染列表为啥要用 key？"></a>渲染列表为啥要用 key？</h2><p>渲染列表时，如果不给列表子项传 <code>key</code> 的话，React 将默认使用 <code>index</code> 作为 <code>key</code>，同时会在控制台发出警告。</p><p><code>key</code> 在兄弟节点之间必须唯一，要避免使用数组下标 <code>index</code> 作为 <code>key</code>。因为使用数组下标作为 `key 时，若数组的顺序发生了改变，将会影响 Diffing 算法的效率。</p><p>若列表的节点是组件的话，还可能会影响组件的 <code>state</code> 数据。因为组件实例是基于 <code>key</code> 来决定是否更新与复用。当顺序发生了变化，则 <code>key</code> 也会相应得被修改，从而导致子组件间的数据错乱。</p><p>React 使用的 Diffing 算法是通过 <code>tag</code> 和 <code>key</code> 判断是否是同一个元素(<code>sameNode</code>)。使用唯一的 <code>key</code> 有助于 React 识别哪些元素发生改变，如节点添加或删除。这样有助于减少渲染次数，从而优化性能。</p><p>如果数组中的数据没有唯一的 <code>key</code>，可以引入 <a href="https://www.npmjs.com/package/shortid">shortid</a> 预先给数组中每项数据生成唯一的 <code>id</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shortid = <span class="built_in">require</span>(<span class="string">&#x27;shortid&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addId</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...data,</span><br><span class="line">    id: shortid.generate(),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newList = list.map(addId);</span><br></pre></td></tr></table></figure><p>若确定没有列表的顺序不会发生变化同时没有其他唯一的 <code>key</code> 来标识列表项时才能使用数组的下标。</p><h2 id="虚拟-dom-是如何提升性能的"><a href="#虚拟-dom-是如何提升性能的" class="headerlink" title="虚拟 dom 是如何提升性能的"></a>虚拟 dom 是如何提升性能的</h2><p>当组件触发更新时，虚拟 DOM 通过 Diffing 算法比对新旧节点的变化以决定是否渲染 DOM 节点，从而减少渲染提升性能。因为修改真实 DOM 所耗费的性能远比操作 JavaScript 多几倍，因此使用虚拟 DOM 在渲染性能上会高效的多。</p><h2 id="简述-React-Diffing-算法"><a href="#简述-React-Diffing-算法" class="headerlink" title="简述 React Diffing 算法"></a>简述 React Diffing 算法</h2><p>Diffing 算法(Diffing Algorithm) 会先比较两个根元素的变化:</p><ol><li>当<strong>节点类型变化</strong>时，将会卸载原有的树而建立新树。如父节点 <code>&lt;div&gt;</code> 标签被修改为 <code>&lt;section&gt;</code> 标签，则它们自身及 <code>children</code> 下的节点都会被重新渲染。</li><li>当 <strong>DOM 节点类型相同</strong>时，保留相同的 DOM 节点，仅更新发生改变的属性。</li><li>当<strong>组件类型相同时</strong>，组件更新时组件实例保持不变，React 将更新组件实例的 props, 并调用生命周期 <code>componentWillReceiveProps()</code> 和 <code>componentwillupdate()</code>，最后再调用 <code>render</code>。若 <code>render</code> 中还有子组件，将递归触发 Diff。</li><li>当<strong>列表节点发生变化，列表项没有设置 key 时</strong>, 那么 Diffing 算法会逐个对比节点的变化。如果是尾部新增节点，那 Diff 算法会 Diff 到列表末尾，仅新增元素即可，不会有其他的性能损耗。若新增的数据不在数组的尾部而是在中间，那么 Diffing 算法比较到中间时判断出节点发生变化，将会丢弃后面所有节点并重新渲染。</li><li>当<strong>列表节点发生变化，列表项有设置 key 时</strong>, React 可以通过 <code>key</code> 来匹配新旧节点间的对应关系，可以很快完成 Diff 并避免重复渲染的问题。</li></ol><h2 id="异步组件怎么使用？"><a href="#异步组件怎么使用？" class="headerlink" title="异步组件怎么使用？"></a>异步组件怎么使用？</h2><ol><li><p>通过动态 <code>import()</code> 语法对组件代码进行分割。</p></li><li><p>使用 <code>React.lazy</code> 函数，结合 <code>import()</code> 语法引入动态组件。在组件首次渲染时，会自动导入包含 <code>MyComponent</code> 的包。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyComponent = React.lazy(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./MyComponent&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>在 <code>React.Suspense</code> 组件中渲染 <code>lazy</code> 组件，同时可以使用 <code>fallback</code> 做优雅降级(添加 <code>loading</code> 效果):</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;React.Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">  &lt;MyComponent /&gt;</span><br><span class="line">&lt;/React.Suspense&gt;</span><br></pre></td></tr></table></figure></li><li><p>封装一个错误捕获组件(比如组件命名为 <code>MyErrorBoundary</code>)，组件内通过生命周期 <code>getDerivedStateFromError</code> 捕获错误信息。当异步组件加载失败时，将捕获到错误信息处理后给用户做错误提示功能。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyErrorBoundary&gt;</span><br><span class="line">   &lt;React.Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">    &lt;MyComponent /&gt;</span><br><span class="line">  &lt;/React.Suspense&gt;</span><br><span class="line">&lt;/MyErrorBoundary&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="JSX-是如何编译为-js-代码的？"><a href="#JSX-是如何编译为-js-代码的？" class="headerlink" title="JSX 是如何编译为 js 代码的？"></a>JSX 是如何编译为 js 代码的？</h2><p>在 React v17 之前，JSX 会被编译为 <code>React.createElement(component, props, ...children)</code> 函数，执行会返回 <code>vnode</code>，<code>vnode</code> 通过 <code>patch</code> 之类的方法渲染到页面。</p><p>React v17 之后更新了 JSX 转换规则。新的 JSX 转换不会将 JSX 转换为 <code>React.createElement</code>，而是自动从 React 的 <code>package</code> 中引入新的入口函数(<code>react/jsx-runtime</code>)并调用。这意味着我们不用在每个组件文件中显式引入 <code>React</code>。</p><h2 id="怎么对组件的参数做类型约束呢"><a href="#怎么对组件的参数做类型约束呢" class="headerlink" title="怎么对组件的参数做类型约束呢?"></a>怎么对组件的参数做类型约束呢?</h2><p>要对组件的参数做类型约束的话，可以引入 <code>prop-types</code> 来配置对应的 <code>propTypes</code> 属性。<br><code>Flow</code> 和 <code>TypesScript</code> 则可以对整个应用做类型检查。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 知识回顾 (使用篇)</title>
      <link href="/blog/2020/10/31/react-retrospection/"/>
      <url>/blog/2020/10/31/react-retrospection/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2020/10/31/react-retrospection/banner.png" class=""><p>使用 React 进行项目开发也有好几个项目了，趁着最近有空来对 React 的知识做一个简单的复盘。</p><span id="more"></span><details><summary>完整目录概览</summary><ul><li><a href="#react-%E6%98%AF%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BF%98%E6%98%AF%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81%E5%AE%83%E8%BF%98%E6%9C%89%E5%85%B6%E4%BB%96%E7%89%B9%E7%82%B9%E5%90%97">React 是单向数据流还是双向数据流？它还有其他特点吗？</a></li><li><a href="#setstate">setState</a><ul><li><a href="#react-%E9%80%9A%E8%BF%87%E4%BB%80%E4%B9%88%E6%96%B9%E5%BC%8F%E6%9D%A5%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE">React 通过什么方式来更新数据</a></li><li><a href="#react-%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9-state-%E5%90%97">React 不能直接修改 State 吗？</a></li><li><a href="#setstate-%E6%98%AF%E5%90%8C%E6%AD%A5%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84">setState 是同步还是异步的？</a></li><li><a href="#setstate-%E5%B0%8F%E6%B5%8B">setState 小测</a></li></ul></li><li><a href="#react-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">React 生命周期</a><ul><li><a href="#constructor-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">constructor (构造函数)</a></li><li><a href="#static-getderivedstatefromprops">static getDerivedStateFromProps</a></li><li><a href="#shouldcomponentupdate">shouldComponentUpdate</a></li><li><a href="#render">render</a></li><li><a href="#getsnapshotbeforeupdate">getSnapshotBeforeUpdate</a></li><li><a href="#componentdidmount">componentDidMount</a></li><li><a href="#componentdidupdate">componentDidUpdate</a></li><li><a href="#componentwillunmount">componentWillUnmount</a></li><li><a href="#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%98%B6%E6%AE%B5">生命周期阶段</a></li><li><a href="#%E5%85%B6%E4%BB%96%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">其他生命周期</a></li></ul></li><li><a href="#react-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1">React 组件通信</a><ul><li><a href="#reactcontext-%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8">React.Context 怎么使用</a></li></ul></li><li><a href="#%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">函数组件是什么？与类组件有什么区别？</a></li><li><a href="#hooks">Hooks</a><ul><li><a href="#hook-vs-class">Hook vs class</a></li><li><a href="#hooks-%E7%9A%84%E4%BD%BF%E7%94%A8">Hooks 的使用</a></li><li><a href="#hook-%E4%B9%8B%E9%97%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B7%AE%E5%BC%82">Hook 之间的一些差异</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-hook-%E7%9A%84%E4%BD%BF%E7%94%A8">自定义 Hook 的使用</a></li><li><a href="#hook-%E4%BD%BF%E7%94%A8%E7%BA%A6%E6%9D%9F">Hook 使用约束</a></li><li><a href="#class-%E7%BB%84%E4%BB%B6%E4%B8%8E-hook-%E4%B9%8B%E9%97%B4%E7%9A%84%E6%98%A0%E5%B0%84%E4%B8%8E%E8%BD%AC%E6%8D%A2">class 组件与 Hook 之间的映射与转换</a><ul><li><a href="#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">生命周期</a></li><li><a href="#hooks-%E6%B2%A1%E6%9C%89%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">Hooks 没有实现的生命周期钩子</a></li><li><a href="#%E8%BD%AC%E6%8D%A2%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F">转换实例变量</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0-hook-%E7%BB%84%E4%BB%B6">强制更新 Hook 组件</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E6%97%A7%E7%9A%84-props-%E5%92%8C-state">获取旧的 props 和 state</a></li></ul></li></ul></li><li><a href="#%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E4%B8%8E%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB">受控组件与非受控组件的区别</a></li><li><a href="#portals-%E6%98%AF%E4%BB%80%E4%B9%88">Portals 是什么?</a></li></ul></details><h2 id="React-是单向数据流还是双向数据流？它还有其他特点吗？"><a href="#React-是单向数据流还是双向数据流？它还有其他特点吗？" class="headerlink" title="React 是单向数据流还是双向数据流？它还有其他特点吗？"></a>React 是单向数据流还是双向数据流？它还有其他特点吗？</h2><p>React 是单向数据流，数据是从上向下流。它的其他主要特点时:</p><ul><li>数据驱动视图</li><li>声明式编写 UI</li><li>组件化开发</li></ul><h2 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h2><h3 id="React-通过什么方式来更新数据"><a href="#React-通过什么方式来更新数据" class="headerlink" title="React 通过什么方式来更新数据"></a>React 通过什么方式来更新数据</h3><p>React 是通过 <code>setState</code> 来更新数据的。调用多个 <code>setState</code> 不会立即更新数据，而会批量延迟更新后再将数据合并。</p><p>除了 <code>setState</code> 外还可以使用 <code>forceUpdate</code> 跳过当前组件的 <code>shouldComponentUpdate</code> diff，强制触发组件渲染(避免使用该方式)。</p><h3 id="React-不能直接修改-State-吗？"><a href="#React-不能直接修改-State-吗？" class="headerlink" title="React 不能直接修改 State 吗？"></a>React 不能直接修改 State 吗？</h3><ol><li>直接修改 state 不会触发组件的渲染。</li><li>若直接修改 state 引用的值，在实际使用时会导致错误的值出现</li><li>修改后的 state 可能会被后续调用的 <code>setState</code> 覆盖</li></ol><h3 id="setState-是同步还是异步的？"><a href="#setState-是同步还是异步的？" class="headerlink" title="setState 是同步还是异步的？"></a>setState 是同步还是异步的？</h3><p>出于性能的考虑，React 可能会把多个 <code>setState</code> 合并成一个调用。</p><p><code>React</code> 内有个 <code>batchUpdate(批量更新)</code> 的机制，在 React 可以控制的区域 (如组件生命周期、React 封装的事件处理器) 设置标识位 <code>isBatchingUpdate</code> 来决定是否触发更新。</p><p>比如在 React 中注册的 <code>onClick</code> 事件或是 <code>componentDidMount</code> 中直接使用 <code>setState</code> 都是异步的。若想拿到触发更新后的值，可以给 <code>setState</code> 第二个参数传递一个函数，该函数在<strong>数据更新后会触发的回调函数</strong>，函数的参数就是更新后最新的值。</p><p>不受 React 控制的代码快中使用 <code>setState</code> 是同步的，比如在  <code>setTimeout</code> 或是原生的事件监听器中使用。</p><h3 id="setState-小测"><a href="#setState-小测" class="headerlink" title="setState 小测"></a>setState 小测</h3><p>输出以下结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span> &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;1 --&gt;&quot;</span>, <span class="built_in">this</span>.state.count);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.setState(&#123; <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span> &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;2 --&gt;&quot;</span>, <span class="built_in">this</span>.state.count);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;3 --&gt;&quot;</span>, <span class="built_in">this</span>.state.count);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;4 --&gt;&quot;</span>, <span class="built_in">this</span>.state.count);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 --&gt; 0</span><br><span class="line">2 --&gt; 0</span><br><span class="line">3 --&gt; 2</span><br><span class="line">4 --&gt; 3</span><br></pre></td></tr></table></figure><p>解答: 调用 <code>setState</code> 后不会立即更新 state，开头两次调用会被异步合并调用，因此只有一次调用。一轮事件循环结束后，调用第 3、4 次 <code>setState</code>。由于在 <code>setTimeout</code> 中调用是同步更新的，因此都能正常的叠加数据。</p><h2 id="React-生命周期"><a href="#React-生命周期" class="headerlink" title="React 生命周期"></a>React 生命周期</h2><p>React 的生命周期主要是指组件<strong>在特定阶段会执行的函数</strong>。以下是 class 组件的部分<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">生命周期图谱</a>:</p><img data-src="/blog/2020/10/31/react-retrospection/react-lifecycle.png" class="" title="React 生命周期速查图"><p>从上图可以看出：React 的生命周期按照类型划分，可分为 <strong>挂载时(Mounting)、更新时(Updating)、卸载时(Unmounting)</strong> 。图中的生命周期函数效果如下:</p><h3 id="constructor-构造函数"><a href="#constructor-构造函数" class="headerlink" title="constructor (构造函数)"></a>constructor (构造函数)</h3><ul><li><strong>触发条件</strong>: 组件初始化时  </li><li><strong>是否可以使用 <code>setState</code></strong>: X  </li><li><strong>使用场景</strong>: 初始化 <code>state</code> 或者对方法绑定 <code>this</code>。在构造函数中便于自动化测试。</li></ul><h3 id="static-getDerivedStateFromProps"><a href="#static-getDerivedStateFromProps" class="headerlink" title="static getDerivedStateFromProps"></a>static getDerivedStateFromProps</h3><blockquote><p>Tips: 不常用方法</p></blockquote><ul><li><strong>触发条件</strong>: 调用 <code>render</code> 函数之前  </li><li><strong>是否可以使用 <code>setState</code></strong>: X  </li><li><strong>函数行为</strong>: 函数可以返回一个对象用于更新组件内部的 <code>state</code> 数据，若返回 <code>null</code> 则什么都不更新。</li><li><strong>使用场景</strong>: 用于 state 依赖 props 的情况，也就是状态派生。值得注意的是派生 state 会导致代码冗余，并使组件难以维护。</li></ul><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><blockquote><p>Tips: 不常用方法</p></blockquote><ul><li><strong>触发条件</strong>: 当 <code>props</code>/<code>state</code> 发生变化  </li><li><strong>是否可以使用 <code>setState</code></strong>: X  </li><li><strong>函数行为</strong>: 函数的返回值决定组件是否触发 <code>render</code>，返回值为 <code>true</code> 则触发渲染，反之则阻止渲染。(组件内不写该函数的话，则调用默认函数。默认函数只会返回 <code>true</code>，即只要 <code>props</code>/<code>state</code> 发生变化，就更新组件)  </li><li><strong>使用场景</strong>: 组件的性能优化，仅仅是浅比较 props 和 state 的变化的话，可以使用内置的 <a href="https://zh-hans.reactjs.org/docs/react-api.html#reactpurecomponent">PureComponent</a> 来代替 <code>Component</code> 组件。</li></ul><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><ul><li><strong>触发条件</strong>: 渲染组件时  </li><li><strong>是否可以使用 <code>setState</code></strong>: X  </li><li><strong>函数行为</strong>: 函数的返回值决定视图的渲染效果</li><li><strong>使用场景</strong>: class 组件中唯一<strong>必须要实现</strong>的生命周期函数。</li></ul><h3 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h3><blockquote><p>Tips: 不常用方法</p></blockquote><ul><li><strong>触发条件</strong>: 在最近一次渲染输出（提交到 DOM 节点）之前调用  </li><li><strong>是否可以使用 <code>setState</code></strong>: X  </li><li><strong>函数行为</strong>: 函数的返回值将传入给 <code>componentDidUpdate</code> 第三个参数中。若只实现了该函数，但没有使用 <code>componentDidUpdate</code> 的话，React 将会在控制台抛出警告  </li><li><strong>使用场景</strong>: 可以在组件发生更改之前从 DOM 中捕获一些信息（例如，列表的滚动位置）</li></ul><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><ul><li><strong>触发条件</strong>: 组件挂载后（插入 DOM 树中）立即调用，该函数只会被触发一次  </li><li><strong>是否可以使用 <code>setState</code></strong>: Y (可以<strong>直接调用</strong>，但会触发额外渲染)  </li><li><strong>使用场景</strong>: 从网络请求中获取数据、订阅事件等</li></ul><h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><ul><li><strong>触发条件</strong>: 组件更新完毕后(首次渲染不会触发)  </li><li><strong>是否可以使用 <code>setState</code></strong>: Y (更新语句须<strong>放在条件语句</strong>中，不然可能会造成死循环)  </li><li><strong>使用场景</strong>: 对比新旧值的变化，进而判断是否需要发送网络请求。比如监听路由的变化</li></ul><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><ul><li><strong>触发条件</strong>: 组件卸载及销毁之前直接调用  </li><li><strong>是否可以使用 <code>setState</code></strong>: X  </li><li><strong>使用场景</strong>: 清除 timer，取消网络请求或清除在 <code>componentDidMount</code> 中创建的订阅等</li></ul><h3 id="生命周期阶段"><a href="#生命周期阶段" class="headerlink" title="生命周期阶段"></a>生命周期阶段</h3><p>针对 React 生命周期中函数的调用顺序，笔者写了一个简易的 Demo 用于演示: <a href="https://codesandbox.io/s/react-lifecycle-forked-2dvdg?file=/src/Parent.jsx">React 生命周期示例</a></p><p><strong>React 组件挂载阶段</strong>先后会触发 <code>constuctor</code>、<code>static getDerivedStateFromProps</code>、<code>render</code>、<code>componentDidMount</code> 函数。若 <code>render</code> 函数内还有子组件存在的话，则会进一步递归:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Parent]: constuctor</span><br><span class="line">[Parent]: static getDerivedStateFromProps</span><br><span class="line">[Parent]: render</span><br><span class="line">[Children]: constuctor</span><br><span class="line">[Children]: static getDerivedStateFromProps</span><br><span class="line">[Children]: render</span><br><span class="line">[Children]: componentDidMount</span><br><span class="line">[Children]: 挂载阶段结束!</span><br><span class="line">[Parent]: componentDidMount</span><br><span class="line">[Parent]: 挂载阶段结束!</span><br></pre></td></tr></table></figure><p><strong>React 组件更新阶段</strong>主要是组件的 props 或 state 发生变化时触发。若组件内还有子组件，则子组件会判断是否也需要触发更新。默认情况下 <code>component</code> 组件是只要父组件发生了变化，子组件也会跟着变化。以下是更新父组件 <code>state</code> 数据时所触发的生命周期函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Parent]: static getDerivedStateFromProps</span><br><span class="line">[Parent]: shouldComponentUpdate</span><br><span class="line">[Parent]: render</span><br><span class="line">[Children]: static getDerivedStateFromProps</span><br><span class="line">[Children]: shouldComponentUpdate</span><br><span class="line">[Children]: render</span><br><span class="line">[Children]: getSnapshotBeforeUpdate</span><br><span class="line">[Parent]: getSnapshotBeforeUpdate</span><br><span class="line">[Children]: componentDidUpdate</span><br><span class="line">[Children]: 更新阶段结束!</span><br><span class="line">[Parent]: componentDidUpdate</span><br><span class="line">[Parent]: 更新阶段结束!</span><br></pre></td></tr></table></figure><p>值得注意的是: 在本例 Demo 中没有给子组件传参，但子组件也触发了渲染。但从应用的角度上考虑，既然你子组件没有需要更新的东西，那就没有必要触发渲染吧？</p><p>因此 <code>Component</code> 组件上可以使用 <code>shouldComponentUpdate</code> 或者将 <code>Component</code> 组件替换为 <code>PureComponment</code> 组件来做优化。在生命周期图中也可以看到: <code>shouldComponentUpdate</code> 返回 <code>false</code> 时，将不再继续触发下面的函数。</p><p>有时你可能在某些情况下想主动触发渲染而又不被 <code>shouldComponentUpdate</code> 阻止渲染该怎么办呢？可以使用 <code>force­Update()</code> 跳过 <code>shouldComponentUpdate</code> 的 diff，进而渲染视图。(需要使用强制渲染的场景较少，一般不推荐这种方式进行开发)</p><p><strong>React 组件销毁阶段</strong>也没啥好说的了。父组件先触发销毁前的函数，再逐层向下触发:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Parent]: componentWillUnmount</span><br><span class="line">[Parent]: 卸载阶段结束!</span><br><span class="line">[Children]: componentWillUnmount</span><br><span class="line">[Children]: 卸载阶段结束!</span><br></pre></td></tr></table></figure><h3 id="其他生命周期"><a href="#其他生命周期" class="headerlink" title="其他生命周期"></a>其他生命周期</h3><p>除了上图比较常见的生命周期外，还有一些过时的 API 就没有额外介绍了。因为它们可能在未来的版本会被移除：</p><ul><li><a href="https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillmount">UNSAFE_componentWillMount()</a>: 在组件即将被挂载到页面的时刻自动执行。应该使用 componentDidUpdate 来代替该函数。</li><li><a href="https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillupdate">UNSAFE_componentWillUpdate()</a></li><li><a href="https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops">UNSAFE_componentWillReceiveProps()</a>：当父组件某个 props 更新前，可以调用 <code>setState</code> 覆盖内部的某个 state。</li></ul><p>上图没有给出错误处理的情况，以下信息作为补充: 当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：</p><ul><li><a href="https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromerror">static getDerivedStateFromError()</a></li><li><a href="https://zh-hans.reactjs.org/docs/react-component.html#componentdidcatch">componentDidCatch()</a></li></ul><h2 id="React-组件通信"><a href="#React-组件通信" class="headerlink" title="React 组件通信"></a>React 组件通信</h2><ol><li>父组件通过 props 给子组件传递数据。子组件通过触发父组件提供的回调函数来给父组件传递消息或数据</li><li><code>React.Context</code> 可以跨层级组件共享数据</li><li>自定义事件</li><li>引入 <code>Redux</code>/<code>Mobx</code> 之类的状态管理器</li></ol><h3 id="React-Context-怎么使用"><a href="#React-Context-怎么使用" class="headerlink" title="React.Context 怎么使用"></a>React.Context 怎么使用</h3><p><code>Context</code> 可以共享对于组件树而言是全局的数据，比如全局主题、首选语言等。使用方式如下：</p><ol><li><p><code>React.createContext</code> 函数用于生成 <code>Context</code> 对象。可以在创建时给 <code>Context</code> 设置默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(<span class="string">&#x27;light&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>Context</code> 对象中有一个 <code>Provider(提供者)</code> 组件，<code>Provider</code> 组件接受一个 <code>value</code> 属性用以将数据传递给消费组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ThemeContext.Provider value=<span class="string">&quot;dark&quot;</span>&gt;</span><br><span class="line">  &lt;page /&gt;</span><br><span class="line">&lt;/ThemeContext.Provider&gt;</span><br></pre></td></tr></table></figure></li><li><p>获取 <code>Context</code> 提供的值可以通过 <code>contextType</code> 或者 <code>Consumer(消费者)</code> 组件中获取。<code>contextType</code> 只能用于类组件，并且只能挂载一个 <code>Context</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="built_in">this</span>.context;</span><br><span class="line">    <span class="comment">/* 在组件挂载完成后，使用 MyContext 的值执行一些有副作用的操作 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="built_in">this</span>.context;</span><br><span class="line">    <span class="comment">/* 基于 MyContext 的值进行渲染 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">MyClass.contextType = MyContext;</span><br></pre></td></tr></table></figure><p>若想给组件挂载多个 <code>Context</code>, 或者在函数组件内使用 <code>Context</code> 可以使用 <code>Consumer</code> 组件:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ThemeContext.Consumer&gt;</span><br><span class="line">  &#123;<span class="function"><span class="params">theme</span> =&gt;</span> (</span><br><span class="line">    &lt;UserContext.Consumer&gt;</span><br><span class="line">      &#123;<span class="function"><span class="params">user</span> =&gt;</span> (</span><br><span class="line">        &lt;ProfilePage user=&#123;user&#125; theme=&#123;theme&#125; /&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/UserContext.Consumer&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/ThemeContext.Consumer&gt;</span><br></pre></td></tr></table></figure></li></ol><p><code>Context</code> 通常适用于传递较为简单的数据信息，若数据太过复杂，还是需要引入状态管理(<code>Redux</code>/<code>Mbox</code>)。</p><h2 id="函数组件是什么？与类组件有什么区别？"><a href="#函数组件是什么？与类组件有什么区别？" class="headerlink" title="函数组件是什么？与类组件有什么区别？"></a>函数组件是什么？与类组件有什么区别？</h2><p>函数组件本质上是一个纯函数，它接受 props 属性，最后返回 JSX。</p><p>与类组件的差别在于: 它没有实例、不能通过 <code>extends</code> 继承于其他方法、也没有生命周期和 <code>state</code>。以前函数组件常作为无状态组件，React 16.8+ 可以引入 <code>Hooks</code> 为函数组件支持状态和副作用操作。</p><h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><h3 id="Hook-vs-class"><a href="#Hook-vs-class" class="headerlink" title="Hook vs class"></a>Hook vs class</h3><p><strong>类组件的不足</strong>:</p><ul><li>状态逻辑复用难，缺少复用机制。渲染属性和高阶组件导致层级冗余。</li><li>组件趋向复杂难以维护。生命周期函数混杂不相干逻辑，相干逻辑分散在不同生命周期中。</li><li>this 指向令人困扰。内联函数过度创建新句柄，类成员函数不能保证 this。</li></ul><p><strong>Hooks 的优点</strong>:</p><ul><li>自定义 Hook 方便复用状态逻辑</li><li>副作用的关注点分离</li><li>函数组件没有 this 问题</li></ul><p><strong>Hooks 现有的不足</strong>:</p><ul><li>不能完全取代 class 组件的生命周期，部分不常用的生命周期暂时没有实现。</li><li>Hooks 的运作方式带来了一定的学习成本，需要转换现有的编程思维，增加了心智负担。</li></ul><h3 id="Hooks-的使用"><a href="#Hooks-的使用" class="headerlink" title="Hooks 的使用"></a>Hooks 的使用</h3><blockquote><p>描述 Hooks 有哪些常用的方法和大致用途</p></blockquote><ol><li><p><code>useState</code>: 使函数组件支持设置 <code>state</code> 数据，可用于代替类组件的 <code>constructor</code> 函数。</p></li><li><p><code>useEffect</code>: 使函数组件支持操作副作用 (effect) 的能力，Hook 第二个参数是 effect 的依赖项。当依赖项是空时，effect 函数仅会在组件挂载后执行一遍。若有一个或多个依赖项时，只要任意一个依赖项发生变化，就会触发 effect 函数的执行。effect 函数里可以做一些如获取页面数据、订阅事件等操作。</p><p>除此之外，<code>useEffect</code> 还可以返回一个函数用于做清除操作，这个清除操作时可选的。常用于清理订阅事件、DOM 事件等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定 DOM 事件</span></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// useEffect 回调函数的返回值是函数的话，当组件卸载时会执行该函数</span></span><br><span class="line">   <span class="comment">// 若没有需要清除的东西，则可以忽略这一步骤</span></span><br><span class="line">   <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;click&#x27;</span>, handleClick);</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;, [handleClick]);</span><br></pre></td></tr></table></figure></li><li><p><code>useLayoutEffect</code>: <code>useEffect</code> 的 effect 执行的时机是在浏览器完成布局和绘制<strong>之后</strong>会延迟调用。若想要 DOM 变更的同时同步执行 effect 的话可以使用 <code>useLayoutEffect</code>。它们之间只是执行的时机不同，其他都一样。</p></li><li><p><code>useContext</code>: 接收一个 <code>Context</code> 对象，并返回 <code>Context</code> 的当前值。相当于类组件的 <code>static contextType = MyContext</code>。</p></li><li><p><code>useReducer</code> 是 <code>useState</code> 的代替方案，它的工作方式有点类似于 <code>Redux</code>，通过函数来操作 state。适合 <code>state</code> 逻辑较为复杂且包含多个子值，或是新的 <code>state</code> 依赖于旧的 <code>state</code> 的场景。</p></li><li><p><code>useMemo</code> 主要用于性能优化，它可以缓存变量的值，避免每次组件更新后都需要重复计算值。</p></li><li><p><code>useCallbck</code> 用于缓存函数，避免函数被重复创建，它是 <code>useMemo</code> 的语法糖。<code>useCallback(fn, deps)</code> 的效果相当于是 <code>useMemo(() =&gt; fn, deps)</code>。</p></li></ol><h3 id="Hook-之间的一些差异"><a href="#Hook-之间的一些差异" class="headerlink" title="Hook 之间的一些差异"></a>Hook 之间的一些差异</h3><ol><li><p><strong>React.memo 与 React.useMemo</strong>：</p><p><code>memo</code> 针对一个组件的渲染是否重复执行，<code>useMemo</code> 定义一段函数逻辑是否重复执行。</p></li><li><p><strong>React.useMemo 与 React.useCallback</strong>：</p><p><code>useMemo(() =&gt; fn)</code> 返回的是一个函数，将等同于 <code>useCallback(fn)</code>。</p></li><li><p><strong>React.useStatus 与 React.useRef</strong>：</p><p><code>React.useStatus</code> 相当于类的 <code>state</code>；<code>React.useRef</code> 相当于类的内部属性。前者参与渲染，后者的修改不会触发渲染。</p></li></ol><h3 id="自定义-Hook-的使用"><a href="#自定义-Hook-的使用" class="headerlink" title="自定义 Hook 的使用"></a>自定义 Hook 的使用</h3><p>自定义 Hook 的命名规则是以 <code>use</code> 开头的函数，比如 <code>useLocalStorage</code> 就符合自定义 Hook 的命名规范。<br>使用自定义 Hook 的场景有很多，如表单处理、动画、订阅声明、定时器等等可复用的逻辑都能通过自定义 Hook 来抽象实现。</p><p>在自定义 Hook 中，可以使用 Hooks 函数将可复用的逻辑和功能提取出来，并将内部的 <code>state</code> 或操作的方法从自定义 Hook 函数中返回出来。函数组件使用时就可以像调用普通函数一祥调用自定义 Hook 函数, 并将自定义 Hook 返回的 <code>state</code> 和操作方法通过解构保存到变量中。</p><p>下面是 <a href="https://usehooks.com/useLocalStorage/">useLocalStorage</a> 的实现，它将 state 同步到本地存储，以使其在页面刷新后保持不变。 用法与 useState 相似，不同之处在于我们传入了本地存储键，以便我们可以在页面加载时默认为该值，而不是指定的初始值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Similar to useState but first arg is key to the value in local storage.</span></span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useLocalStorage(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">        placeholder=<span class="string">&quot;Enter your name&quot;</span></span><br><span class="line">        value=&#123;name&#125;</span><br><span class="line">        onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> setName(e.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hook</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useLocalStorage</span>(<span class="params">key, initialValue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// State to store our value</span></span><br><span class="line">  <span class="comment">// Pass initial state function to useState so logic is only executed once</span></span><br><span class="line">  <span class="keyword">const</span> [storedValue, setStoredValue] = useState(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Get from local storage by key</span></span><br><span class="line">      <span class="keyword">const</span> item = <span class="built_in">window</span>.localStorage.getItem(key);</span><br><span class="line">      <span class="comment">// Parse stored json or if none return initialValue</span></span><br><span class="line">      <span class="keyword">return</span> item ? <span class="built_in">JSON</span>.parse(item) : initialValue;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// If error also return initialValue</span></span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">      <span class="keyword">return</span> initialValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return a wrapped version of useState&#x27;s setter function that ...</span></span><br><span class="line">  <span class="comment">// ... persists the new value to localStorage.</span></span><br><span class="line">  <span class="keyword">const</span> setValue = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Allow value to be a function so we have same API as useState</span></span><br><span class="line">      <span class="keyword">const</span> valueToStore =</span><br><span class="line">        value <span class="keyword">instanceof</span> <span class="built_in">Function</span> ? value(storedValue) : value;</span><br><span class="line">      <span class="comment">// Save state</span></span><br><span class="line">      setStoredValue(valueToStore);</span><br><span class="line">      <span class="comment">// Save to local storage</span></span><br><span class="line">      <span class="built_in">window</span>.localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(valueToStore));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// A more advanced implementation would handle the error case</span></span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [storedValue, setValue];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意: 自定义 Hook 函数在定义时，也可以使用另一个自定义 Hook 函数。</strong></p><h3 id="Hook-使用约束"><a href="#Hook-使用约束" class="headerlink" title="Hook 使用约束"></a>Hook 使用约束</h3><ol><li>只能在<strong>函数组件最顶层</strong>调用 Hook，不能在循环、条件判断或子函数中调用。</li><li>只能在<strong>函数组件</strong>或者是<strong>自定义 Hook 函数</strong>中调用，普通的 js 函数不能使用。</li></ol><h3 id="class-组件与-Hook-之间的映射与转换"><a href="#class-组件与-Hook-之间的映射与转换" class="headerlink" title="class 组件与 Hook 之间的映射与转换"></a>class 组件与 Hook 之间的映射与转换</h3><p>函数组件相比 class 组件会缺少很多功能，但大多可以通过 Hook 的方式来实现。</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li><p><strong>constructor</strong>：class 组件的构造函数一般是用于初始化 <code>state</code> 数据或是给事件绑定 <code>this</code> 指向的。函数组件内没有 this 指向的问题，因此可以忽略。而 <code>state</code> 可以通过 <code>useState</code>/<code>useReducer</code> 来实现。</p></li><li><p><strong>getDerivedStateFromProps</strong>：<code>getDerivedStateFromProps</code> 一般用于在组件 props 发生变化时派生 <code>state</code>。Hooks 实现同等效果如下:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ScrollView</span>(<span class="params">&#123;row&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isScrollingDown, setIsScrollingDown] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [prevRow, setPrevRow] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (row !== prevRow) &#123;</span><br><span class="line">    <span class="comment">// Row 自上次渲染以来发生过改变。更新 isScrollingDown。</span></span><br><span class="line">    setIsScrollingDown(prevRow !== <span class="literal">null</span> &amp;&amp; row &gt; prevRow);</span><br><span class="line">    setPrevRow(row);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Scrolling down: <span class="subst">$&#123;isScrollingDown&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>shouldComponentUpdate</strong>: 使用 <code>React.memo</code> 应用到函数组件中后，当 props 发生变化时，会对 props 的新旧值进行前对比，相当于是 <code>PureComponent</code> 的功能。如果你还想自己定义比较函数的话，可以给 <code>React.memo</code> 的第二个参数传一个函数，若函数返回 <code>true</code> 则跳过更新。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = React.memo(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>render</strong>: 函数组件本身就是一个 <code>render</code> 函数。</p></li><li><p><strong>componentDidMount / componentDidUpdate / componentWillUnmount</strong>:</p><p><code>useEffect</code> 第二个参数的依赖项为空时，相当于 <code>componentDidMount</code>，组件挂载后只会执行一次。每个 <code>useEffect</code> 返回的函数相当于是 <code>componentWillUnmount</code> 同等效果的操作。若有依赖，则 effect 函数相当于是 <code>componentDidUpdate</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有依赖项，仅执行一次</span></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> subscription = props.source.subscribe();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相当于 componentWillUnmount</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    subscription.unsubscribe();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若有依赖项，相当于 componentDidUpdate</span></span><br><span class="line"><span class="comment">// 当 page 发生变化时会触发 effect 函数</span></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fetchList(&#123; page &#125;);</span><br><span class="line">&#125;, [page]);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Hooks-没有实现的生命周期钩子"><a href="#Hooks-没有实现的生命周期钩子" class="headerlink" title="Hooks 没有实现的生命周期钩子"></a>Hooks 没有实现的生命周期钩子</h4><ul><li>getSnapshotBeforeUpdate</li><li>getDerivedStateFromError</li><li>componentDidCatch</li></ul><h4 id="转换实例变量"><a href="#转换实例变量" class="headerlink" title="转换实例变量"></a>转换实例变量</h4><p>使用 <code>useRef</code> 设置可变数据。</p><h4 id="强制更新-Hook-组件"><a href="#强制更新-Hook-组件" class="headerlink" title="强制更新 Hook 组件"></a>强制更新 Hook 组件</h4><p>设置一个<strong>没有实际作用</strong>的 <code>state</code>，然后强制更新 <code>state</code> 的值触发渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Todo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 使用 useState，用随机数据更新也行</span></span><br><span class="line">  <span class="keyword">const</span> [ignored, forceUpdate] = useReducer(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    forceUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">click</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>强制更新组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取旧的-props-和-state"><a href="#获取旧的-props-和-state" class="headerlink" title="获取旧的 props 和 state"></a>获取旧的 props 和 state</h4><p>可以通过 <code>useRef</code> 来保存数据，因为渲染时不会覆盖掉可变数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> prevCountRef = useRef();</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    prevCountRef.current = count;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> prevCount = prevCountRef.current;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Now: &#123;count&#125;, before: &#123;prevCount&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="受控组件与非受控组件的区别"><a href="#受控组件与非受控组件的区别" class="headerlink" title="受控组件与非受控组件的区别"></a>受控组件与非受控组件的区别</h2><p>受控组件主要是指表单的值受到 <code>state</code> 的控制，它需要自行监听 <code>onChange</code> 事件来更新 <code>state</code>。</p><p>由于受控组件每次都要编写事件处理器才能更新 <code>state</code> 数据、可能会有点麻烦，React 提供另一种代替方案是<strong>非受控组件</strong>。</p><p>非受控组件将<strong>真实数据储存在 DOM 节点</strong>中，它可以为表单项设置默认值，不需要手动更新数据。当需要用到表单数据时再通过 <code>ref</code> 从 DOM 节点中取出数据即可。</p><p><strong>注意: 多数情况下React 推荐编写受控组件。</strong></p><p>扩展资料: <a href="https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/">受控和非受控制使用场景的选择</a></p><h2 id="Portals-是什么"><a href="#Portals-是什么" class="headerlink" title="Portals 是什么?"></a>Portals 是什么?</h2><p><code>Portals</code> 就像个传送门，它可以将子节点渲染到存在于父组件以外的 DOM 节点的方案。</p><p>比如 <code>Dialog</code> 是一个全局组件，按照传统渲染组件的方式，<code>Dialog</code> 可能会受到其容器 css 的影响。因此可以使用 <code>Portals</code> 让组件在视觉上渲染到 <code>&lt;body&gt;</code> 中，使其样式不受 <code>overflow: hidden</code> 或 <code>z-index</code> 的影响。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 常见问题解决方案</title>
      <link href="/blog/2020/09/27/hexo-issue/"/>
      <url>/blog/2020/09/27/hexo-issue/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2020/09/27/hexo-issue/banner.png" class=""><p>记录 Hexo 升级或使用时遇到的问题和一些解决方案。</p><span id="more"></span><h2 id="TypeError-config-d-getTime-is-not-a-function"><a href="#TypeError-config-d-getTime-is-not-a-function" class="headerlink" title="TypeError: config._d.getTime is not a function"></a>TypeError: config._d.getTime is not a function</h2><p>经过排查，本次发生错误是由 <code>hexo-related-popular-posts</code> 引发，在该库源码中使用 <code>moment</code> 初始化 <code>list.date</code> 导致了错误。 <code>list.date</code> 通过打印值可以看到是一个 <code>moment</code> 对象，但这个 <code>moment</code> 对象并不规范或者说可能在某处修改了这个 <code>moment</code> 对象的值。</p><p><code>moment</code> 内部初始化有一段逻辑是:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>._d = <span class="keyword">new</span> <span class="built_in">Date</span>(config._d != <span class="literal">null</span> ? config._d.getTime() : <span class="literal">NaN</span>);</span><br></pre></td></tr></table></figure><p>这个 <code>config</code> 就是 <code>moment(list.date)</code> 传入的 <code>list.date</code> 的值。<code>config._d</code> 是一个时间类型的<em>字符串</em>，并不是 <code>Date</code> 类型，因此没有 <code>getTime</code> 的方法。</p><p>临时解决方法有两种，一是将 <code>theme/next/_config.yml</code> 中的 <code>related_posts.params.isDate</code> 设为 <code>false</code>，也就是推荐列表中不展示时间。</p><p>二是修改源码，做一层错误处理。从 <code>node_modules</code> 中打开文件(\node_modules\hexo-related-popular-posts\lib\list-json.js), 在编辑器中查找以下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (inOptions.isDate &amp;&amp; list.date != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    ret.date =  moment(list.date).format(config.date_format || <span class="string">&#x27;YYYY-MM-DD&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (inOptions.isDate &amp;&amp; list.date != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ret.date =  moment(list.date).format(config.date_format || <span class="string">&#x27;YYYY-MM-DD&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">        ret.date =  moment(list.date._d).format(config.date_format || <span class="string">&#x27;YYYY-MM-DD&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述只是临时的解决方案，由于不好确定是哪一方的原因，也不想继续耗费太多精力在上面。</p><p>错误日志如下，以供参考:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Unhandled rejection Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\post.njk)</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\post.njk)</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\post.njk) [Line 19, Column 14]</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\post.njk)</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\_partials\head\head-unique.njk) [Line 10, Column 23]</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\post.njk) [Line 3, Column 3]</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\post.njk)</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\_partials\header\index.njk) [Line 6, Column 15]</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\post.njk)</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\_partials\header\sub-menu.njk) [Line 2, Column 29]</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\post.njk)</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\_partials\header\sub-menu.njk)</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\post.njk) [Line 5, Column 3]</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\post.njk) [Line 9, Column 12]</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\_macro\post.njk) [Line 214, Column 16]</span><br><span class="line">  Template render error: (C:\Users\user\Desktop\project\blog\themes\next\layout\_partials\post\post-related.njk)</span><br><span class="line">  TypeError: config._d.getTime is not a function</span><br><span class="line">    at Object._prettifyError (C:\Users\user\Desktop\project\blog\node_modules\nunjucks\src\lib.js:36:11)</span><br><span class="line">    at C:\Users\user\Desktop\project\blog\node_modules\nunjucks\src\environment.js:561:19</span><br><span class="line">    at Template.root [as rootRenderFunc] (eval at _compile (C:\Users\user\Desktop\project\blog\node_modules\nunjucks\src\environment.js:631:18), &lt;anonymous&gt;:45:3)</span><br><span class="line">    at Template.render (C:\Users\user\Desktop\project\blog\node_modules\nunjucks\src\environment.js:550:10)</span><br><span class="line">    at C:\Users\user\Desktop\project\blog\themes\next\scripts\renderer.js:35:29</span><br><span class="line">    at _View._compiled.locals [as _compiled] (C:\Users\user\Desktop\project\blog\node_modules\hexo\lib\theme\view.js:136:50)</span><br><span class="line">    at _View.render (C:\Users\user\Desktop\project\blog\node_modules\hexo\lib\theme\view.js:39:17)</span><br><span class="line">    at C:\Users\user\Desktop\project\blog\node_modules\hexo\lib\hexo\index.js:64:21</span><br><span class="line">    at tryCatcher (C:\Users\user\Desktop\project\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at C:\Users\user\Desktop\project\blog\node_modules\bluebird\js\release\method.js:15:34</span><br><span class="line">    at RouteStream._read (C:\Users\user\Desktop\project\blog\node_modules\hexo\lib\hexo\router.js:47:5)</span><br><span class="line">    at RouteStream.Readable.read (_stream_readable.js:470:10)</span><br><span class="line">    at resume_ (_stream_readable.js:949:12)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:63:19)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack + Travis CI 自动部署项目应用</title>
      <link href="/blog/2020/06/08/github-travis-build/"/>
      <url>/blog/2020/06/08/github-travis-build/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2020/06/08/github-travis-build/banner.png" class=""><p>我们知道 <strong><a href="https://pages.github.com/">Github Pages</a></strong> 是 Github 免费提供给用户展示页面的一项服务。当我们完成项目开发后，想将页面部署到 Github Pages 时，该要怎么操作呢？</p><p>可以在 GitHub 的储存库设置中设置用于展示页面的分支，该分支只保留构建后的静态资源，也就是源码与编译后的静态资源分离。按照传统的做法是：手动运行编译命令，编译后再复制到指定分支中。这样操作很繁琐，但使用 <code>Travis CI</code> 持续集成服务之后就可以不用操心这些事了。</p><span id="more"></span><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>既然我们要使用 <a href="https://travis-ci.com/">Travis CI</a>，首先得搞清楚人家具体是干嘛的吧？</p><p><code>Travis CI</code> 是一个 **持续集成(Continuous integration, CI)**。它与 git 相耦合，每当有 commit 提交时，它将自动触发构建与测试。若运行结果符合预期，才将新代码集成到 <strong>主流(mainline)</strong> 中，这样使应用更加健壮。</p><p>值得注意的是，<code>Travis CI</code>  提倡每次 commit 都是独立较小的改动，而不是突然提交一大堆代码。因为这有助于后续构建失败时可以回退到正常的版本。</p><p>运行构建时，<code>Travis CI</code> 将 GitHub 存储库克隆到全新的虚拟环境中，并执行一系列任务来构建和测试代码。如果这些任务中的一项或多项失败，则将构建视为已损坏。如果所有任务均未失败，则认为构建已通过，<code>Travis CI</code> 会将代码部署到 Web 服务器或应用程序主机中(在本文中是指 <code>Github Pages</code> 服务)。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在使用之前，需要准备一个 <strong>Github</strong> 的账号对 <code>Travis CI</code> 进行授权。</p><ol><li>接着通过 Github 的账号登录 <a href="https://travis-ci.com/signin">Travis CI</a>，点击 <code>SIGN IN WITH GITHUB</code>。</li><li>点击后会被重定向到 Github 进行授权。  <img data-src="/blog/2020/06/08/github-travis-build/travis-1.jpeg" class=""></li><li>授权后，若是第一次登录的话会被重定向至<a href="https://travis-ci.com/getting_started">引导页</a>:  <img data-src="/blog/2020/06/08/github-travis-build/travis-2.jpeg" class=""></li><li>点击引导页第一步的按钮，使用 <strong>GitHub Apps</strong> 激活储存库。可以选择给全部储存库都激活，也可以激活指定储存库。本文以 <code>&lt;username&gt;.github.io</code> 为例:<blockquote><p>注意: 这个 <code>username</code> 是你自己的 Github 用户名。笔者的 <code>username</code> 为 <code>anran758</code> 那储存库的名字就为 **<a href="https://github.com/anran758/anran758.github.io">anran758.github.io</a>**。  </p></blockquote><img data-src="/blog/2020/06/08/github-travis-build/travis-3.jpeg" class="">  </li><li>激活后会被重定向到<a href="https://travis-ci.com/account/repositories">设置页</a>，点击待部署的储存库右侧的 <code>setting</code> 按钮，跳转至 <code>Travis CI</code> 储存库设置页。我们需要在此页设置部署 <code>Github Pages</code> 时所需的环境变量:<img data-src="/blog/2020/06/08/github-travis-build/travis-4.jpeg" class=""></li></ol><p>环境变量的值需要从 Github 拿<strong>拥有部署权限的 token</strong>:</p><ol><li>打开 <a href="https://github.com/">Github</a>，点击头像，再点击 <a href="https://github.com/settings/profile">Settings</a> 进入设置页：  <img data-src="/blog/2020/06/08/github-travis-build/github-1.png" class=""></li><li>进入设置页面后在左侧边栏点击<a href="https://github.com/settings/apps">开发者设置</a>:  <img data-src="/blog/2020/06/08/github-travis-build/github-2.jpeg" class=""></li><li>跳转后在左侧边栏点击 <a href="https://github.com/settings/tokens">Personal access tokens</a>, 然后在头部点击 <a href="https://github.com/settings/tokens/new">Generate new token</a>:  <img data-src="/blog/2020/06/08/github-travis-build/github-3.jpeg" class=""></li><li>填写 token 备注、权限，最后点击生成 token:  <img data-src="/blog/2020/06/08/github-travis-build/github-4.png" class=""></li><li>生成 token 后点击复制按钮，复制到粘贴板:  <img data-src="/blog/2020/06/08/github-travis-build/github-5.png" class="">  <strong>注意要妥善保管好 token，重新刷新页面后这个 token 将不会再展示出来。如果忘记了 token 的话，也只能在 token 编辑页中重新生成。这会导致所有用到该 token 的应用都要更新值。</strong> 比方说有三个应用使用了该 token，重新生成后只在一个应用更新的值，那其他两个应用不更新就无法使用了。  <img data-src="/blog/2020/06/08/github-travis-build/github-6.jpeg" class="">  </li><li>复制 token 后切回 <code>Travis CI</code> 储存库的设置页，添加环境变量:<img data-src="/blog/2020/06/08/github-travis-build/github-7.jpeg" class="">  </li></ol><p>这样我们的准备工作就完成的差不多了。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在项目目录中新建文件 <code>.travis.yml</code>，内容如下:</p><figure class="highlight yml"><figcaption><span>/.travis.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">lts/*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">install</span> <span class="comment"># npm ci</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">test</span> <span class="comment"># npm run test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build</span> <span class="comment"># npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">dist</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">develop</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">$GITHUB_TOKEN</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">keep_history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">committer_from_gh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>由于 webpack 项目依赖 Node.js，因此语言(<code>language</code>) 设置为 <code>node_js</code>，同时还指定使用最新的 LTS Node.js 版本(<code>lts/*</code>)。</p><p><code>install</code> 是安装部署所需的依赖项，<code>script</code> 则是用于运行测试或构建脚本。他们都是 <code>Travis</code> 的工作生命周期(Job Lifecycle)必触发的钩子(阶段)。</p><p><code>install</code> 钩子若有脚本/命令运行失败的话，整个构建会停止。而 <code>script</code> 钩子表现则不同，当有脚本/命令运行失败后虽然构建会失败，但还会继续执行后面的脚本。如 <code>yarn test</code> 运行失败后会继续跑 <code>yarn build</code> 命令。</p><p>以下是 <code>Travis CI</code> 主要的阶段流程图:</p><pre class="mermaid" style="text-align: center;">graph TDA[before_install] --> B[install]A & B -.-> Z((停止构建))B --> C[before_script]C --> D[scrip]D --> E(after_success)D --> F(after_failure)E & F --> G[before_deploy]G --> H[deploy]H --> I[after_deploy]I --> J[after_script]</pre><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>通过 <code>deploy</code> 可以指定部署方式，下面将逐个介绍部署所用的选项：</p><p><a href="https://docs.travis-ci.com/user/deployment/#supported-providers">provider</a> 是部署类型。现在我们想将页面部署到 Github Pages，那就需要将 <code>provider</code> 设为 <code>pages</code>。</p><p><code>local_dir</code> 指定要推送到 Github Pages 的目录，默认为当前目录。webpack 默认的输出目录是 <code>/dist</code>，因此需要将值设为 <code>dist</code>。除此之外，<code>Travis CI</code> 默认情况下会删除构建期间创建的所有文件，因此需要设置 <code>skip_cleanup: true</code> 保留构建出来的 <code>dist</code> 目录.</p><p>若 <code>on.branch</code> 有 commit 提交的话，<code>Travis CI</code> 将从 <code>on.branch</code> 分支运行编译脚本，编译后会把 <code>local_dir</code> 目录强制推送到 <code>target_branch</code> 中。(<code>target_branch</code> 默认值为 <code>gh-pages</code>)</p><p>现在我们要部署的储存库是 <code>&lt;username&gt;.github.io</code>。这种类型的储存库有些特殊——它只能在 <code>master</code> 分支展示构建后的代码，而不能修改为其他分支。在 GitHub 储存库的 <code>Settings</code> 中的 <code>Source</code> 选项可以看到详细信息:</p><img data-src="/blog/2020/06/08/github-travis-build/deploy-1.jpeg" class=""><p>然而其他储存库则没有这种限制:</p><img data-src="/blog/2020/06/08/github-travis-build/deploy-2.jpeg" class=""><p>因此要部署到 <code>&lt;username&gt;.github.io</code> 储存库的话，<code>target_branch</code> 只能设为 <code>master</code>，触发编译的 <code>on.branch</code> 分支则可以自己定义。</p><p>其他储存库可以按照标准流程来开发：</p><ul><li><code>develop</code> 作为开发分支</li><li><code>master</code> 作为主分支</li><li><code>gh-pages</code> 作为页面展示分支</li></ul><p>等功能开发并测试完毕后，将 <code>develop</code> 的代码合并到 <code>master</code> 分支并推送至远程。<code>Traivis CI</code> 检测到 <code>matser</code> 有 <code>commit</code> 提交后会自动运行脚本构建，构建完毕后将输出目录推送至 <code>gh-pages</code> 分支。</p><p>当然 Github Pages 也不是随便来一个人就可以部署的，你想要部署到储存库中首先得有该储存库的操作权限吧？<code>token</code> 就是证明你身份的东西。在上文中我们预先设置好了一个名为 <code>GITHUB_TOKEN</code> 的环境变量，此处我们可以通过 <code>$GITHUB_TOKEN</code> 直接取出该环境变量的值即可。</p><p>其他还有一些细节问题可以调整：比如推送构建后的代码到 <code>target_branch</code> 时使用的是强制推送(<code>git push --force</code>)，如果你觉得这种强制覆盖历史记录的方式有点暴力的话，可以设置 <code>keep_history: true</code> 来保留提交记录。</p><p>自动部署后 <code>commit</code> 提交者默认是 <code>Travis CI</code> 的信息。也可以设置 <code>committer_from_gh</code> 允许 <code>Travs CI</code> 使用令牌所有者的个人信息来提交 <code>commit</code>。</p><p>配置完毕后现在只需将 <code>.travis.yml</code> 提交到远程，<code>Travis CI</code> 就开始工作了：</p><img data-src="/blog/2020/06/08/github-travis-build/deploy-3.jpeg" class=""><p>甚至还可以在 Github <code>commit</code> 信息中看到编译的情况:</p><img data-src="/blog/2020/06/08/github-travis-build/deploy-4.jpeg" class=""><p>如果构建出问题的话，<code>Travis CI</code> 还会发邮件提示你:</p><img data-src="/blog/2020/06/08/github-travis-build/deploy-5.png" class=""><p>部署成功后就可以直接通过浏览器访问啦~ 储存库部署的是 <code>&lt;username&gt;.github.io</code> 的话，访问链接为 <code>https://&lt;username&gt;.github.io/</code>。其他储存库可以访问 <code>https://&lt;username&gt;.github.io/&lt;repoName&gt;</code>。</p><p>比如笔者的主页与博客是两个项目分离的，部署后的链接地址为 <a href="https://anran758.github.io/">https://anran758.github.io</a> 和 <a href="https://anran758.github.io/blog">https://anran758.github.io/blog</a>。</p><h2 id="Travis-CI-CLI"><a href="#Travis-CI-CLI" class="headerlink" title="Travis CI CLI"></a>Travis CI CLI</h2><p>还可以通过 <a href="https://github.com/travis-ci/travis.rb#logs">Travis CI CLI</a> 来进行操作:</p><p>按照文档的 <a href="https://github.com/travis-ci/travis.rb#installation">Installation</a> 部分安装 <code>Travis CI CLI</code>。</p><p>安装完毕后通过命令行进入储存库目录，输入 <code>travis -v</code> 来检查是否安装成功。</p><p><code>Travis CI</code> 有两个不同域名版本的 API，一个是 <code>.com</code> 新版本，<code>.org</code> 是旧版本的。先确定自己使用的是哪个平台，再设定它:</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认是 .org</span></span><br><span class="line">travis endpoint</span><br><span class="line"><span class="meta">#</span><span class="bash"> API endpoint: https://api.travis-ci.org/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 笔者使用的是 .com 的平台，因此需要修改默认的模式。设置 `--com` 和 `--pro` 的效果是相等的。</span></span><br><span class="line">travis endpoint --com --set-default</span><br><span class="line"><span class="meta">#</span><span class="bash"> API endpoint: https://api.travis-ci.com/ (stored as default)</span></span><br></pre></td></tr></table></figure><p>确定版本后输入 <code>travis login</code> 或 <code>travis login --pro</code> 进行登录。Mac os 系统可能会遇到 <code>Travis Ci CLI</code> 依赖的 <code>ruby</code> 版本和系统自带 <code>ruby</code> 有冲突：</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">travis login --com</span><br><span class="line"><span class="meta">#</span><span class="bash"> We need your GitHub login to identify you.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This information will not be sent to Travis CI, only to api.github.com.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The password will not be displayed.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try running with --github-token or --auto <span class="keyword">if</span> you don<span class="string">&#x27;t want to enter your password anyway.</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Username: anran758</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Password <span class="keyword">for</span> anran758: ***********</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Unknown error</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> a full error report, run travis report --pro</span></span><br></pre></td></tr></table></figure><p>若不想处理这些麻烦的依赖问题，可以在 Travis CI 的<a href="https://travis-ci.com/account/preferences">个人设置页</a> 复制 <code>access_token</code> 到 <code>~/.travis/config.yml</code> 的配置中:</p><img data-src="/blog/2020/06/08/github-travis-build/travis-log-settings.jpeg" class="">  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> code ~/.travis/config.yml <span class="comment"># 通过 vscode 进行修改</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 vim 进行修改</span></span><br><span class="line">vim ~/.travis/config.yml</span><br></pre></td></tr></table></figure><p>修改 <code>endpoints</code> 下的 <code>access_token</code> 并保存后，在命令输入 <code>travis accounts --pro</code> 检查是否成功:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">travis accounts --pro</span><br><span class="line"><span class="meta">#</span><span class="bash"> travis accounts --pro</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> anran758 (Anran758): not subscribed, 18 repositories</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">set</span> up a subscription, please visit travis-ci.com.</span></span><br></pre></td></tr></table></figure><p>这样就登录完毕啦~ 接着在输入 <code>travis logs</code> 就可以查看日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看最新构建的日志</span></span><br><span class="line">travis logs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定构建日志</span></span><br><span class="line">travis logs 2</span><br></pre></td></tr></table></figure><p>还可以清空指定构建的日志:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> travis logs 2 --d <span class="comment"># -d 简短选项</span></span></span><br><span class="line">travis logs 2 --delete</span><br></pre></td></tr></table></figure><p>参考资料:</p><ul><li><a href="https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">Creating a personal access token for the command line</a></li><li><a href="https://docs.travis-ci.com/user/deployment/pages/">GitHub Pages Deployment</a></li><li><a href="https://docs.travis-ci.com/user/job-lifecycle/">Job Lifecycle</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 环境搭建 </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零构建 webpack 脚手架(基础篇)</title>
      <link href="/blog/2020/05/04/webpack-example/"/>
      <url>/blog/2020/05/04/webpack-example/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2020/05/04/webpack-example/banner.png" class=""><p>webpack 是一个现代 JavaScript 应用程序的静态模块打包工具，它对于前端工程师来说可谓是如雷贯耳，基本上现在的大型应用都是通过 webpack 进行构建的。</p><p>webpack 具有高度可配置性，它拥有非常丰富的配置。在过去一段时间内曾有人将熟练配置 webpack 的人称呼为 “webapck 工程师”。当然，这称呼只是个玩笑话，但也能从侧面了解到 webpack 配置的灵活与复杂。</p><p>为了能够熟练掌握 webpack 的使用，接下来通过几个例子循序渐进的学习如何使用 webpack。</p><p>以下 <code>Demo</code> 都可以在 Github 的 <a href="https://github.com/anran758/webpack-example">webpack-example</a> 中找到对应的示例，欢迎 star~</p><span id="more"></span><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>从 <code>webpack@v4.0.0</code> 开始，就可以不用再引入配置文件来打包项目。若没有提供配置的话，webpack 将按照默认规则进行打包。默认情况下 <code>src/index</code> 是项目的源代码入口，打包后的代码会输出到 <code>dist/main.js</code> 上。</p><p>首先来初始化一个项目，项目名为 <a href="https://github.com/anran758/webpack-example/tree/master/getting-started">getting-started</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建项目文件夹</span></span><br><span class="line">mkdir getting-started</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入项目目录</span></span><br><span class="line">cd getting-started</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm 项目</span></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>初始化项目后，项目目录会新增一个 <code>package.json</code>，该文件记录了项目依赖的相关信息。若想要使用 webpack 的话需要安装它的依赖: <code>webpack</code> (本体)和 <code>webpack-cli</code> (可以在命令行操作 webpack 的工具):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -D 和 --save-dev 选项都可以用于安装开发依赖</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm i --save-dev webpack webpack-cli</span></span><br><span class="line">npm i -D webpack webpack-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者使用 yarn 安装开发依赖</span></span><br><span class="line">yarn add -D webpack webpack-cli</span><br></pre></td></tr></table></figure><p>接着创建 webpack 所需的默认入口文件 <code>src/index.js</code> 以及测试模块所用的 <code>src/log.js</code> 文件。此时的项目结构大致如下:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  .</span><br><span class="line">  ├── package.json</span><br><span class="line"><span class="addition">+ ├── src</span></span><br><span class="line"><span class="addition">+ │   ├── index.js</span></span><br><span class="line"><span class="addition">+ │   └── log.js</span></span><br><span class="line">  └── node_modules</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/log.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> log = <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  src/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; log &#125; <span class="keyword">from</span> <span class="string">&#x27;./log&#x27;</span></span><br><span class="line"></span><br><span class="line">log(<span class="string">&#x27;anran758&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>src/log.js</code> 导出了一个工具函数，它负责向控制台发送消息。<code>src/index.js</code> 是默认的入口文件，它引入 <code>log</code> 函数并调用了它。</p><p>上面的代码很简单，像这种模块化的代码按照传统 <code>&lt;script src&gt;</code> 引入的话，浏览器是不能正确执行的。可以在根目录上创建一个 <code>index.html</code> 引入 js 脚本来测试一下:</p><figure class="highlight html"><figcaption><span>/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入脚本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./src/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建文件后，将上例代码复制到 <code>index.html</code> 中。保存并打开该文件，看看浏览器能否正确处理模块逻辑。不出意外的话，文件在浏览器打开后，浏览器开发者工具会抛出错误信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught SyntaxError: Cannot use import statement outside a module</span><br></pre></td></tr></table></figure><p>言下之意就是说浏览器不能正确的解析 <code>ES module</code> 语句，此时 webpack 就可以派上用场啦~ 在 <code>package.json</code> 中的 <code>scripts</code> 字段中添加如下命令:</p><figure class="highlight diff"><figcaption><span>/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line"><span class="addition">+    &quot;build&quot;: &quot;webpack&quot;</span></span><br><span class="line"><span class="deletion">-    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>在命令行输入 <code>npm run build</code> 调用 <code>webpack</code> 对当前项目进行编译，编译后的结果会输出到 <code>dist/main.js</code> 文件中(即便本地没有 dist 目录，它都会自动创建该目录)。输出文件后，修改 <code>index.html</code> 对 js 的引用:</p><figure class="highlight diff"><figcaption><span>/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &lt;body&gt;</span><br><span class="line"><span class="addition">+   &lt;script src=&quot;./dist/main.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="deletion">-   &lt;script src=&quot;./src/index.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure><p>重新刷新页面后就能看到 <code>log</code> 正确的输出了 <code>Hello anran758!</code>。点击 log 右侧的链接，可以跳转至 <code>Source</code> 面板，将代码格式化后可以清晰地看到编译后 js 的变化:</p><img data-src="/blog/2020/05/04/webpack-example/example-1.png" class=""><h2 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h2><p>当然，上例代码只不过是小试牛刀。对于正式的项目会有更复杂的需求，因此需要自定义配置。<code>webpack</code> 主要有两种方式接收配置：</p><p><strong>第一种:</strong> 通过 <code>Node.js</code> API引入 webpack 包，在调用 webpack 函数时传入配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackConfig = &#123;</span><br><span class="line">  <span class="comment">// webpack 配置对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webpack(webpackConfig, <span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err || stats.hasErrors()) &#123;</span><br><span class="line">    <span class="comment">// 在这里处理错误</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理完成</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>第二种:</strong> 通过 <code>webpack-cli</code> 在终端使使用 webpack 时指定配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack [--config webpack.config.js]</span><br></pre></td></tr></table></figure><p>两种方法内配置都是相似的，只是调用的形式不同。本篇先使用 <code>webpack-cli</code> 来做示例。</p><p>webpack 接受一个特定的配置文件，配置文件要求导出一个对象、函数、<code>Promise</code> 或多个配置对象组成的数组。</p><p>现在将上一章的 Demo 复制一份出来，并重命名为 **<a href="https://github.com/anran758/webpack-example/tree/master/getting-started-config">getting-started-config</a>**，在该目录下新建 <code>webpack.config.js</code> 文件，文件内容如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//  起点或是应用程序的起点入口</span></span><br><span class="line">  entry: <span class="string">&quot;./src/index&quot;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 编译后的输出路径</span></span><br><span class="line">    <span class="comment">// 注意此处必须是绝对路径，不然 webpack 将会抛错（使用 Node.js 的 path 模块）</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出 bundle 的名称</span></span><br><span class="line">    filename: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的配置主要是定义了程序入口、编译后的文件输出目录。然后在 <code>src/index.js</code> 中修改一些内容用来打包后测试文件是否被正确被编译:</p><figure class="highlight diff"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  import &#123; log &#125; from &#x27;./log&#x27;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ log(&#x27;本节在测试配置噢&#x27;);</span></span><br><span class="line"><span class="deletion">- log(&#x27;anran758&#x27;);</span></span><br></pre></td></tr></table></figure><p>随后在终端输入 <code>num run build</code> 进行编译，可以看到 <code>dist</code> 目录下多了个 <code>bundle.js</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run build</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> webpack --config ./webpack.config.js</span></span><br><span class="line"></span><br><span class="line">Hash: 3cd5f3bbfaf23f01de37</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 117ms</span><br><span class="line">Built at: 05/06/2020 1:01:37 PM</span><br><span class="line">    Asset        Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  1010 bytes       0  [emitted]  main</span><br><span class="line">Entrypoint main = bundle.js</span><br><span class="line">[0] ./src/index.js + 1 modules 123 bytes &#123;0&#125; [built]</span><br><span class="line">    | ./src/index.js 62 bytes [built]</span><br><span class="line">    | ./src/log.js 61 bytes [built]</span><br><span class="line"></span><br><span class="line">WARNING in configuration</span><br><span class="line">The &#x27;mode&#x27; option has not been set, webpack will fallback to &#x27;production&#x27; for this value. Set &#x27;mode&#x27; option to &#x27;development&#x27; or &#x27;production&#x27; to enable defaults for each environment.</span><br><span class="line">You can also set it to &#x27;none&#x27; to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br></pre></td></tr></table></figure><p>由于我们输出的文件名被修改了，此时还得修改 <code>html</code> 的引入路径。但每改一次输出目录，<code>HTML</code> 中的引入路径也得跟着改，这样替换的话就比较容易出纰漏。那能不能让 webpack 自动帮我们插入资源呢？答案是可以的。</p><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><p>webpack 提供**插件(plugin)**的功能，它可以用于各种方式自定义 webpack 构建过程。</p><p><strong><a href="https://webpack.js.org/plugins/html-webpack-plugin/">html-webpack-plugin</a></strong> 可以在运行 webpack 时自动生成一个 <code>HTML</code> 文件，并将打包后的 <code>js</code> 代码自动插入到文档中。下面来安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --D html-webpack-plugin</span><br></pre></td></tr></table></figure><p>安装后在 <code>webpack.config.js</code> 中使用该插件:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  const path = require(&#x27;path&#x27;);</span><br><span class="line"><span class="addition">+ const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span></span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    // 起点或是应用程序的起点入口</span><br><span class="line">    entry: &quot;./src/index&quot;,</span><br><span class="line"></span><br><span class="line">    // 输出配置</span><br><span class="line">    output: &#123;</span><br><span class="line">      // 编译后的输出路径</span><br><span class="line">      // 注意此处必须是绝对路径，不然 webpack 将会抛错（使用 Node.js 的 path 模块）</span><br><span class="line">      path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line"></span><br><span class="line">      // 输出 bundle 的名称</span><br><span class="line">      filename: &quot;bundle.js&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+   plugins: [</span></span><br><span class="line"><span class="addition">+     new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+       title: &#x27;Test Configuration&#x27;</span></span><br><span class="line"><span class="addition">+     &#125;)</span></span><br><span class="line"><span class="addition">+   ],</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>重新编译后 <code>HTML</code> 也被输出到 <code>dist</code> 目录下。查看 <code>dist/index.html</code> 的源码可以发现：不仅源码被压缩了，同时 <code>&lt;script&gt;</code> 标签也正确的引入了 <code>bundle.js</code>。</p><p>此时目录结构如下:</p><blockquote><p>后续目录展示会将 <code>node_modules</code>、<code>package-lock.json</code>、<code>yarn.lock</code> 这种对项目架构讲解影响不大的目录省略掉..</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   ├── bundle.js</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── main.js</span><br><span class="line">├── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── log.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><p>处理完资源自动插入的问题后，还有一个问题需要我们处理：虽然 webpack 现在能自动生成 <code>HTML</code> 并插入脚本，但我们还得在 <code>HTML</code> 中写其他代码逻辑呀，总不能去改 <code>/dist/index.html</code> 文件吧？</p><p>这个问题也很好解决。<code>html-webpack-plugin</code> 在初始化实例时，传入的配置中可以加上 <code>template</code> 属性来指定模板。配置后直接在指定模板上进行编码就可以解决这个问题了:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  const path = require(&#x27;path&#x27;);</span><br><span class="line">  const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    // 起点或是应用程序的起点入口</span><br><span class="line">    entry: &quot;./src/index&quot;,</span><br><span class="line">  </span><br><span class="line">    // 输出配置</span><br><span class="line">    output: &#123;</span><br><span class="line">      // 编译后的输出路径</span><br><span class="line">      // 注意此处必须是绝对路径，不然 webpack 将会抛错（使用 Node.js 的 path 模块）</span><br><span class="line">      path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">  </span><br><span class="line">      // 输出 bundle 的名称</span><br><span class="line">      filename: &quot;bundle.js&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      // html-webpack-plugin</span><br><span class="line">      // https://github.com/jantimon/html-webpack-plugin#configuration</span><br><span class="line">      new HtmlWebpackPlugin(&#123;</span><br><span class="line">        title: &#x27;Test Configuration&#x27;,</span><br><span class="line"><span class="addition">+       template: path.resolve(__dirname, &quot;./index.html&quot;),</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用模板后 <code>html-webpack-plugin</code> 也会自动将脚本插入到模板中。因此可以将模板中的 <code>&lt;script&gt;</code> 给去掉了。为了测试输出的文件是否使用了模板，在 <code>&lt;body&gt;</code> 内随便插入一句话，重新打包后预览输出的文件是否包含这句话:</p><figure class="highlight diff"><figcaption><span>/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line"><span class="addition">+    &lt;title&gt;Test Config&lt;/title&gt;</span></span><br><span class="line"><span class="deletion">-    &lt;title&gt;Test&lt;/title&gt;</span></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"><span class="addition">+   &lt;p&gt;Test Config&lt;/p&gt;</span></span><br><span class="line"><span class="deletion">-   &lt;script src=&quot;./dist/main.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改文件后，重新打包就能看到模板也被压缩输出至 <code>/dist/index.html</code> 了，<code>script</code> 标签也正常的插入了。</p><h2 id="清理目录"><a href="#清理目录" class="headerlink" title="清理目录"></a>清理目录</h2><p>现在来看编译后的目录，我们发现 <code>dist/mian.js</code> 这文件是使用配置之前编译出来的文件，现在我们的项目已经不再需要它了。这种历史遗留的旧文件就应该在每次编译之前就被扔进垃圾桶，只输出最新的结果。</p><p><strong><a href="https://www.npmjs.com/package/clean-webpack-plugin">clean-webpack-plugin</a></strong> 或 <strong><a href="https://www.npmjs.com/package/rimraf">rimraf</a></strong> 可以完成清理功能。前者是比较流行的 webpack 清除插件，后者是通用的 unix 删除命令(安装该依赖包后 windows 平台也能用)。如果仅是清理 <code>/dist</code> 目录下文件的话，个人是比较倾向使用 <code>rimraf</code>的，因为它更小更灵活。而 <code>clean-webpack-plugin</code> 是针对 webpack 输出做的一系列操作。</p><p>在终端安装依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D rimraf</span><br></pre></td></tr></table></figure><p><code>rimraf</code> 的命令行的语法是: <code>rimraf &lt;path&gt; [&lt;path&gt; ...]</code>，我们在 <code>package.json</code> 的 <code>scirpts</code> 中修改 <code>build</code> 的命令:</p><figure class="highlight diff"><figcaption><span>/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line"><span class="addition">+  &quot;build&quot;: &quot;rimraf ./dist &amp;&amp; webpack --config ./webpack.config.js&quot;</span></span><br><span class="line"><span class="deletion">-  &quot;build&quot;: &quot;webpack --config ./webpack.config.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rimraf ./dist &amp;&amp; webpack --config ./webpack.config.js</span></span><br><span class="line"></span><br><span class="line">Hash: 763fe4b004e1c33c6876</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 342ms</span><br><span class="line">Built at: 05/06/2020 2:35:49 PM</span><br><span class="line">     Asset        Size  Chunks             Chunk Names</span><br><span class="line"> bundle.js  1010 bytes       0  [emitted]  main</span><br><span class="line">index.html   209 bytes          [emitted]  </span><br><span class="line">Entrypoint main = bundle.js</span><br><span class="line">[0] ./src/index.js + 1 modules 123 bytes &#123;0&#125; [built]</span><br><span class="line">    | ./src/index.js 62 bytes [built]</span><br><span class="line">    | ./src/log.js 61 bytes [built]</span><br><span class="line"></span><br><span class="line">WARNING in configuration</span><br><span class="line">The &#x27;mode&#x27; option has not been set, webpack will fallback to &#x27;production&#x27; for this value. Set &#x27;mode&#x27; option to &#x27;development&#x27; or &#x27;production&#x27; to enable defaults for each environment.</span><br><span class="line">You can also set it to &#x27;none&#x27; to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0</span><br><span class="line">       1 module</span><br></pre></td></tr></table></figure><p>这样 webpack 输出的 <code>/dist</code> 目录始终是最新的东西。</p><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>在正常的页面中，引入 <code>css</code> 样式表会让页面变得更美观。引入图片可以让页面内容更丰富。</p><p>然而 webpack 本体只能处理原生的 JavaScript 模块，你让它处理 <code>css</code> 或图片资源，它是无法直接处理的。为了处理这种问题，webpack 提供了 <strong><a href="https://webpack.js.org/concepts/loaders/">loader</a></strong> 的机制，用于对模块外的源码进行转换。</p><p><code>loader</code> 一般是单独的包，我们可以在社区找到对应 <code>loader</code> 来处理特定的资源。在使用前通过 <code>npm</code> 安装到项目的开发依赖中即可。<code>loader</code> 可以通过<a href="https://webpack.js.org/concepts/loaders/#configuration">配置</a>、<a href="https://webpack.js.org/concepts/loaders/#inline">内联</a>或 <a href="https://webpack.js.org/concepts/loaders/#cli">Cli</a> 这三种方式来使用。下文主要以 <code>配置</code> 的方式来使用。</p><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>往常引入 <code>css</code> 样式表无非就是在 <code>html</code> 中通过 <code>&lt;link&gt;</code> 标签引入。现在想通过 webpack 来管理依赖得需要安装对应的 <code>loader</code> 来处理这些事。</p><p><strong><a href="https://github.com/webpack-contrib/css-loader">css-loader</a></strong> 可以让 webpack 可以引入 <code>css</code> 资源。光有让 webpack 识别 css 的能还不够。为了能将 <code>css</code> 资源进行导出，还要安装 <strong><a href="https://github.com/webpack-contrib/mini-css-extract-plugin">mini-css-extract-plugin</a></strong> 插件：</p><p>现在将上一节的 Demo 复制并重名为 <a href="https://github.com/anran758/webpack-example/tree/master/getting-started-loader-css">getting-started-loader-css</a>。进入新的项目目录后安装依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D css-loader mini-css-extract-plugin</span><br></pre></td></tr></table></figure><p>在更改配置之前，为了使项目结构更清晰，咱们按照文件类型重新调整<strong>源码目录结构</strong>。将 <code>src</code> 下的 <code>js</code> 文件都放进 <code>js</code> 文件夹中。同时创建 <code>/src/css/style.css</code> 样式表。调整后的目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── style.css</span><br><span class="line">│   └── js</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       └── log.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><p>现在将 <a href="https://codepen.io/anran758/pen/QWbdgPx">Flexbox 布局用例</a> 中结尾的 Demo 迁移到项目中，测试一下效果:</p><details>  <summary>HTML 源码</summary>   <figure class="highlight html"><figcaption><span>/src/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panels&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item name&quot;</span>&gt;</span>Alice<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item index&quot;</span>&gt;</span>I<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item desc&quot;</span>&gt;</span>Pixiv Content ID: 65843704<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item name&quot;</span>&gt;</span>Birthday<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item index&quot;</span>&gt;</span>II<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item desc&quot;</span>&gt;</span>Pixiv Content ID: 70487844<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item name&quot;</span>&gt;</span>Dream<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item index&quot;</span>&gt;</span>III<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item desc&quot;</span>&gt;</span>Pixiv Content ID: 65040104<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item name&quot;</span>&gt;</span>Daliy<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item index&quot;</span>&gt;</span>IV<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item desc&quot;</span>&gt;</span>Pixiv Content ID: 64702860<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel5&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item name&quot;</span>&gt;</span>Schoolyard<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item index&quot;</span>&gt;</span>V<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item desc&quot;</span>&gt;</span>Pixiv Content ID: 67270728<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></details><details>   <summary>CSS 源码</summary>   <figure class="highlight css"><figcaption><span>/src/css/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;helvetica neue&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">200</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panels</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ececec</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">transition</span>: font-size <span class="number">0.7s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.61</span>, -<span class="number">0.19</span>, <span class="number">0.7</span>, -<span class="number">0.11</span>),</span><br><span class="line">    flex <span class="number">0.7s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.61</span>, -<span class="number">0.19</span>, <span class="number">0.7</span>, -<span class="number">0.11</span>), background <span class="number">0.2s</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f4f8ea</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fffcdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#beddcf</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel4</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: ​<span class="number">#c3cbd8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel5</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#dfe0e4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.6em</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Amatic SC&#x27;</span>, cursive;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.72</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">14px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.45</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.name</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span> <span class="selector-class">.index</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">4em</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.desc</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.open-active</span> <span class="selector-class">.name</span>,</span><br><span class="line"><span class="selector-class">.open-active</span> <span class="selector-class">.desc</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel</span><span class="selector-class">.open</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>   <summary>JavaScript 源码</summary>   <figure class="highlight js"><figcaption><span>/src/js/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; log &#125; <span class="keyword">from</span> <span class="string">&#x27;./log&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../css/style.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">installEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> panels = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.panel&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toggleOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    panels.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item === <span class="built_in">this</span>) <span class="keyword">return</span>;</span><br><span class="line">      item.classList.remove(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.classList.toggle(<span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toggleActicon</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.propertyName.includes(<span class="string">&#x27;flex-grow&#x27;</span>)) &#123;</span><br><span class="line">      <span class="built_in">this</span>.classList.toggle(<span class="string">&#x27;open-active&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给每个元素注册事件</span></span><br><span class="line">  panels.forEach(<span class="function"><span class="params">panel</span> =&gt;</span> &#123;</span><br><span class="line">    panel.addEventListener(<span class="string">&#x27;click&#x27;</span>, toggleOpen)</span><br><span class="line">    panel.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>, toggleActicon)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">installEvent();</span><br><span class="line">log(<span class="string">&#x27;本节在测试配置噢&#x27;</span>);</span><br></pre></td></tr></table></figure></details><p>修改 webpack 配置，引入 <code>css-loader</code> 和 <code>mini-css-extract-plugin</code>。既然已经对源码目录进行分类了，那顺便也给输出目录的文件也进行分类整理吧:</p><figure class="highlight diff"><figcaption><span>/webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">  const path = require(&#x27;path&#x27;);</span><br><span class="line"><span class="addition">+ const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span></span><br><span class="line"><span class="addition">+ const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);</span></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 起点或是应用程序的起点入口</span><br><span class="line">  entry: &quot;./src/js/index&quot;,</span><br><span class="line"></span><br><span class="line">  // 输出配置</span><br><span class="line">  output: &#123;</span><br><span class="line">    // 编译后的输出路径</span><br><span class="line">    // 注意此处必须是绝对路径，不然 webpack 将会抛错（使用 Node.js 的 path 模块）</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line"></span><br><span class="line">    // 输出 bundle 的名称</span><br><span class="line"><span class="deletion">-    filename: &quot;bundle.js&quot;,</span></span><br><span class="line"><span class="addition">+    filename: &quot;js/bundle.js&quot;,</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line"><span class="addition">+  module: &#123;</span></span><br><span class="line"><span class="addition">+    rules: [</span></span><br><span class="line"><span class="addition">+      &#123;</span></span><br><span class="line"><span class="addition">+        test: /\.css$/i,</span></span><br><span class="line"><span class="addition">+        use: [MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;],</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br><span class="line"><span class="addition">+    ],</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line">  plugins: [</span><br><span class="line">    // html-webpack-plugin</span><br><span class="line">    // https://github.com/jantimon/html-webpack-plugin#configuration</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: &#x27;Test Configuration&#x27;,</span><br><span class="line"><span class="deletion">-      template: path.resolve(__dirname, &quot;./index.html&quot;),</span></span><br><span class="line"><span class="addition">+      template: path.resolve(__dirname, &quot;./src/index.html&quot;),</span></span><br><span class="line"><span class="addition">+    &#125;),</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    // 提取 css 到单独的文件</span></span><br><span class="line"><span class="addition">+    // https://github.com/webpack-contrib/mini-css-extract-plugin</span></span><br><span class="line"><span class="addition">+    new MiniCssExtractPlugin(&#123;</span></span><br><span class="line"><span class="addition">+      // 选项类似于 webpackOptions.output 中的相同选项，该选项是可选的</span></span><br><span class="line"><span class="addition">+      filename: &#x27;css/index.css&#x27;,</span></span><br><span class="line"><span class="addition">+    &#125;)</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们根据上面的配置来解读 <code>loader</code> 的使用:</p><p>在上面的配置中，**<a href="https://webpack.js.org/configuration/module/">module</a>** 规定了如何处理项目中的不同类型的模块。**<a href="https://webpack.js.org/configuration/module/#modulerules">rules</a>** 是创建模块时，匹配请求的 <code>rule</code> (规则)数组。<code>rule</code> 是一个对象，其中最常见的属性就是 <a href="https://webpack.js.org/configuration/module/#ruletest">test</a> 、 <a href="https://webpack.js.org/configuration/module/#ruleuse">use</a> 和 <a href="https://webpack.js.org/configuration/module/#ruleloader">loader</a>。</p><p><code>rule.test</code> 是匹配条件，通常会给它提供一个<strong>正则表达式</strong>或是<strong>由正则表达式组成的数组</strong>。如果配置了 <code>test</code> 属性，那这个 <code>rule</code> 将匹配指定条件。比如匹配条件写为 <code>test: /\.css$/i</code>，这意味着给后缀为 <code>.css</code> 的文件使用 <code>loader</code>。</p><p><code>rule.use</code> 顾名思义就是使用，给符合匹配条件的文件使用 <code>loader</code>。它可以接收一个字符串，这个字符串会通过 webpack 的 <a href="https://webpack.js.org/configuration/resolve/#resolveloader">resolveLoader</a> 选项进行解析。该选项可以不配置，它内置有解析规则。比如下例中默认会从 <code>node_modules</code> 中查找依赖:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use: <span class="string">&#x27;css-loader&#x27;</span></span><br></pre></td></tr></table></figure><p><code>rule.use</code> 还可以是应用于模块的 <a href="https://webpack.js.org/configuration/module/#useentry">UseEntry</a> 对象。<code>UseEntry</code> 对象内主要有 <code>loader</code> 和 <code>options</code> 两个属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use 传入 UseEntry 类型的对象</span></span><br><span class="line">use: &#123;</span><br><span class="line">  <span class="comment">// 必选项，要告诉 webpack 使用什么 loader</span></span><br><span class="line">  loader: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">  <span class="comment">// 可选项，传递给 loader 选项</span></span><br><span class="line">  options: &#123;</span><br><span class="line">    modules: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果 <code>UseEntry</code> 对象内只设置 <code>loader</code> 属性，那它与单传的字符串的效果是一样的。而 <code>options</code> 是传递给 <code>loader</code> 的配置项，不同 <code>loader</code> 会提供有不同的 <code>options</code>。值得注意的是，如果 <code>use</code> 是以对象形式传入，**<code>loader</code> 属性是必填的，而 <code>options</code> 是可选的**。</p><p><code>rule.use</code> 还可以是一个函数，函数形参是正在加载的模块对象参数，最终该函数要返回 <code>UseEntry</code> 对象或数组:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">use: <span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(info);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">   loader: <span class="string">&#x27;svgo-loader&#x27;</span>,</span><br><span class="line">   options: &#123;</span><br><span class="line">     plugins: [&#123;</span><br><span class="line">       cleanupIDs: &#123; <span class="attr">prefix</span>: basename(info.resource) &#125;</span><br><span class="line">     &#125;]</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出函数的形参 <code>info</code> 可以看到该对象拥有如下属性:</p><ul><li><code>compiler</code>: 当前的 webpack 编译器（可以未定义）</li><li><code>issuer</code>: 导入正在加载的模块的模块的路径</li><li><code>realResource</code>: 始终是要加载的模块的路径</li><li><code>resource</code>: 要加载的模块的路径，通常等于 <code>realResource</code>。除非在请求字符串中通过 <a href="https://webpack.js.org/concepts/loaders/#inline">!=!</a> 覆盖资源名。</li></ul><p>由此可见，使用函数方式可用于按模块更改 loader 选项。</p><p><code>rule.use</code> 最常见的使用形式还是提供一个数组，数组中每项可以是字符串、<code>UseEntry</code> 对象、<code>UseEntry</code> 函数。这也是一个套娃的过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use: [&#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader &#125;, <span class="string">&#x27;css-loader&#x27;</span>],</span><br></pre></td></tr></table></figure><p>这里需要注意的是，**<code>rule</code> 中使用多个 <code>loader</code> 要注意其顺序<strong>。使用数组 <code>loader</code> 将会</strong>从右至左进行应用**。</p><p>比如上例中最先通过 <code>css-loader</code> 来处理 <code>.css</code> 文件的引入问题，再通过 <code>MiniCssExtractPlugin.loader</code> (Tips: 该值是 <code>loader</code> 的绝对路径)来提取出文件。如果反过来应用就会出问题了，<code>webpack</code> 都不知道如何引用 <code>css</code> 文件，自然提取不出东西啦。</p><p><code>rule.loader</code> 是 <code>rule.use</code> 的缩写，等价于 <code>rule.use: [&#123; loader &#125;]</code>。webpack 像这样简写的配置属性还有很多，这样做有利也有弊。对于熟手来说，提供这种简便选项可以减少配置的嵌套关系，但对新手来说，这配置有种错综复杂的感觉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 匹配文件规则</span></span><br><span class="line">  test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">  <span class="comment">// rule.use 简写形式</span></span><br><span class="line">  loader: <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来回归正题。重新编译 webpack，编译后的目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── index.css</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── js</span><br><span class="line">│       └── bundle.js</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── style.css</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── js</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       └── log.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>图片资源也是项目中的常见资源，引入图片资源同样需要安装 <code>loader</code>。处理图片资源的 <code>loader</code> 主要有两种，分别是 <code>url-loader</code> 和 <code>file-loader</code>。</p><h4 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h4><p><strong><a href="https://github.com/webpack-contrib/file-loader">file-loader</a></strong> 是将 <code>import/require()</code> 引入的文件解析为 url，并把文件输出到输出目录中。</p><p>复制一份新 <code>Demo</code> 并重命名为 **<a href="https://github.com/anran758/webpack-example/tree/master/getting-started-loader-images">getting-started-loader-images</a>**。在安装 <code>loader</code> 之前先做一个小优化:</p><p>如果我们会频繁修改源码文件，修改完后又要重新编译，这个步骤实际是有点繁琐的。webpack 有个 <code>watch</code> 选项可以监听文件变化，若文件有修改 webpack 将自动编译(若修改的是配置文件的话，还是需要重新运行命令)。</p><p>在 <code>package.json</code> 的 <code>script</code> 中给 webpack 添加 <code>-w</code> 选项:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build:watch&quot;: &quot;rimraf ./dist &amp;&amp; webpack --config ./webpack.config.js -w&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>接下来就可以安装依赖了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D file-loader</span><br></pre></td></tr></table></figure><p>新建一个 <code>/src/images</code> 文件夹，往里面添加一些图片：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  .</span><br><span class="line">  ├── package.json</span><br><span class="line">  ├── src</span><br><span class="line">  │   ├── css</span><br><span class="line">  │   │   └── style.css</span><br><span class="line"><span class="addition">+ │   ├── images</span></span><br><span class="line"><span class="addition">+ │   │   ├── 01.jpg</span></span><br><span class="line"><span class="addition">+ │   │   ├── 02.png</span></span><br><span class="line"><span class="addition">+ │   │   ├── 03.jpg</span></span><br><span class="line"><span class="addition">+ │   │   ├── 04.png</span></span><br><span class="line"><span class="addition">+ │   │   ├── 05.png</span></span><br><span class="line"><span class="addition">+ │   │   ├── 06.jpg</span></span><br><span class="line"><span class="addition">+ │   │   ├── webpack.jpg</span></span><br><span class="line"><span class="addition">+ │   │   └── webpack.svg</span></span><br><span class="line">  │   ├── index.html</span><br><span class="line">  │   └── js</span><br><span class="line">  │       ├── index.js</span><br><span class="line">  │       └── log.js</span><br><span class="line">  └── webpack.config.js</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 中配置 <code>loader</code>：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.html$/i,</span><br><span class="line">      loader: &#x27;html-loader&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      // 匹配文件规则</span><br><span class="line">      test: /\.css$/i,</span><br><span class="line">      // use 从右至左进行应用</span><br><span class="line">      use: [MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;],</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+   &#123;</span></span><br><span class="line"><span class="addition">+     test: /\.(png|jpe?g|gif|webp|svg)(\?.*)?$/,</span></span><br><span class="line"><span class="addition">+     use: &#123;</span></span><br><span class="line"><span class="addition">+       loader: &#x27;file-loader&#x27;,</span></span><br><span class="line"><span class="addition">+       options: &#123;</span></span><br><span class="line"><span class="addition">+         name: &#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>默认情况下图片会被输出到 <code>dist</code> 目录中，文件名也会被更改为一长串的哈希值。为了保持目录整洁，将要被输出的图片资源都归类到 <code>img</code> 目录中。</p><p>可以通过设定 <code>name</code> 或 <code>publicPath</code> 来指定目录:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接设置 name</span></span><br><span class="line">use: &#123;</span><br><span class="line">  loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用 publicPath，效果与上例等价</span></span><br><span class="line">use: &#123;</span><br><span class="line">  loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    publicPath: <span class="string">&#x27;img&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;[name].[hash:8].[ext]&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>name</code> 属性的值可以用 <code>/</code> 分层。除去最末尾一层的是文件名，前面每层 <code>/</code> 分隔都是嵌套的文件夹。比如值为 <code>static/img/[name].[hash:8].[ext]</code> 最后输出的结果是：根目录创建一个 <code>static</code> 目录，<code>static</code> 内又会创建一个 <code>img</code> 目录，<code>img</code> 内输出被引用的图片资源。</p><p>由于匹配的图片资源有很多，咱们不能写死输出的文件名，不然会引发重名问题，操作系统不准这样干。这时 **<a href="https://github.com/webpack-contrib/file-loader#placeholders">占位符(placeholder)</a>**就能排上用场了。<code>name</code> 中方括号包裹起来的是占位符，不同占位符会被替换成不同的信息。</p><p>比如上例中使用了三个占位符: <code>name</code> 是文件的名称、<code>hash</code> 是指定用于对文件内容进行 hash (哈希)处理的 hash 方法，后面冒号加数值代表截取 hash 的长度为 8、<code>ext</code> 是文件的扩展名。在文件名加入 <code>hash</code> 的用意是针对浏览器缓存而特意加入的。现在可以不用在意这种优化问题，未来会专门另起一篇文章讲优化的问题。</p><p>现在修改完 webapck 配置，接着再来完善上一节的 Demo。在 <code>/src/css/styles.css</code> 中使用 <code>backgournd-image</code> 引入图片:</p><details>   <summary>css 引入图片资源</summary>  <figure class="highlight css"><figcaption><span>/src/css/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 省略其他代码... */</span></span><br><span class="line"><span class="selector-class">.panel1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f4f8ea</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../images/01.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fffcdd</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../images/02.png&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#beddcf</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../images/03.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel4</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: ​<span class="number">#c3cbd8</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../images/04.png&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel5</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#dfe0e4</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../images/05.png&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>重新编译后的结果如下:</p><details>   <summary>编译结果</summary>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> rimraf ./dist &amp;&amp; webpack --config ./webpack.config.js -w</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> webpack is watching the files…</span><br><span class="line"></span><br><span class="line"> Hash: 398663f1f4d417d17c94</span><br><span class="line"> Version: webpack 4.43.0</span><br><span class="line"> Time: 1086ms</span><br><span class="line"> Built at: 05/29/2020 2:19:03 PM</span><br><span class="line">               Asset       Size  Chunks                    Chunk Names</span><br><span class="line">       css/index.css   1.72 KiB       0  [emitted]         main</span><br><span class="line"> img/01.a8e7ddb2.jpg    170 KiB          [emitted]         </span><br><span class="line"> img/02.46713ed3.png    744 KiB          [emitted]  [big]  </span><br><span class="line"> img/03.70b4bb75.jpg    529 KiB          [emitted]  [big]  </span><br><span class="line"> img/04.b7d3aa38.png    368 KiB          [emitted]  [big]  </span><br><span class="line"> img/05.875a8bc2.png    499 KiB          [emitted]  [big]  </span><br><span class="line">          index.html  990 bytes          [emitted]         </span><br><span class="line">        js/bundle.js   1.33 KiB       0  [emitted]         main</span><br><span class="line"> Entrypoint main = css/index.css js/bundle.js</span><br><span class="line"> [0] ./src/css/style.css 39 bytes &#123;0&#125; [built]</span><br><span class="line"> [1] ./src/js/index.js + 1 modules 938 bytes &#123;0&#125; [built]</span><br><span class="line">     | ./src/js/index.js 873 bytes [built]</span><br><span class="line">     | ./src/js/log.js 60 bytes [built]</span><br><span class="line">     + 1 hidden module</span><br><span class="line"></span><br><span class="line"> WARNING in configuration</span><br><span class="line"> The &#x27;mode&#x27; option has not been set, webpack will fallback to &#x27;production&#x27; for this value. Set &#x27;mode&#x27; option to &#x27;development&#x27; or &#x27;production&#x27; to enable defaults for each environment.</span><br><span class="line"> You can also set it to &#x27;none&#x27; to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br><span class="line"></span><br><span class="line"> WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).</span><br><span class="line"> This can impact web performance.</span><br><span class="line"> Assets: </span><br><span class="line">   img/04.b7d3aa38.png (368 KiB)</span><br><span class="line">   img/05.875a8bc2.png (499 KiB)</span><br><span class="line">   img/02.46713ed3.png (744 KiB)</span><br><span class="line">   img/03.70b4bb75.jpg (529 KiB)</span><br><span class="line"></span><br><span class="line"> WARNING in webpack performance recommendations: </span><br><span class="line"> You can limit the size of your bundles by using import() or require.ensure to lazy load some parts of your application.</span><br><span class="line"> For more info visit https://webpack.js.org/guides/code-splitting/</span><br><span class="line"> Child HtmlWebpackCompiler:</span><br><span class="line">      1 asset</span><br><span class="line">     Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0</span><br><span class="line">     [0] ./node_modules/html-webpack-plugin/lib/loader.js!./src/index.html 1.01 KiB &#123;0&#125; [built]</span><br><span class="line"> Child mini-css-extract-plugin node_modules/css-loader/dist/cjs.js!src/css/style.css:</span><br><span class="line">     Entrypoint mini-css-extract-plugin = *</span><br><span class="line">     [0] ./node_modules/css-loader/dist/cjs.js!./src/css/style.css 3.09 KiB &#123;0&#125; [built]</span><br><span class="line">     [3] ./src/images/01.jpg 63 bytes &#123;0&#125; [built]</span><br><span class="line">     [4] ./src/images/02.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">     [5] ./src/images/03.jpg 63 bytes &#123;0&#125; [built]</span><br><span class="line">     [6] ./src/images/04.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">     [7] ./src/images/05.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">         + 2 hidden modules</span><br></pre></td></tr></table></figure></details><p>当我们重新打开 <code>/dist/index.html</code> 时会发现图片并没有加载出来？查看 <code>css</code> 源码后发现原来是路径有问题，编译后的路径是 <code>img/01.a8e7ddb2.jpg</code> 这种相对路径。</p><p>由于 <code>css</code> 本身有一个文件夹，通过相对路径引入，那就会从 css 目录下进行查找。实际找到的是 <code>dist/css/img/01.a8e7ddb2.jpg</code> 这条路径。</p><p>遇到这种情况怎么办呢？我们可以给 <code>MiniCssExtractPlugin.loader</code> 添加 <code>publicPath</code> 选项用以修正路径，重新编译后就可以看到图片正确被加载了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 匹配文件规则</span></span><br><span class="line">  test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">  <span class="comment">// use 从右至左进行应用</span></span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: MiniCssExtractPlugin.loader,</span><br><span class="line">      options: &#123;</span><br><span class="line">        publicPath: <span class="string">&#x27;../&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在 js 中也可以引用文件，打开 <code>/src/js/index.js</code>, 在原先的基础上添加如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> img1 <span class="keyword">from</span> <span class="string">&#x27;../images/06.jpg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> img2 <span class="keyword">from</span> <span class="string">&#x27;../images/webpack.jpg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> img3 <span class="keyword">from</span> <span class="string">&#x27;../images/webpack.svg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略其他代码...</span></span><br><span class="line"></span><br><span class="line">log(<span class="string">&#x27;测试图片引入~&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;img1 --&gt; &#x27;</span>, img1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;img2 --&gt; &#x27;</span>, img2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;img3 --&gt; &#x27;</span>, img3);</span><br></pre></td></tr></table></figure><p>重新编译后可以在 <code>Console</code> 面板可以看到 js 输出了文件资源的路径:</p><img data-src="/blog/2020/05/04/webpack-example/file-loader-1.png" class=""><h4 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h4><p><a href="https://www.webpackjs.com/loaders/url-loader/">url-loader</a> 功能也类似于 <code>file-loader</code>，不同的是当文件大小(单位 byte)小于 <code>limit</code> 时，可以返回一个 <code>DataURL</code>。</p><p>为什么要用 <code>DataURL</code> 呢？我们知道页面上每加载一个图片资源，都会发起一个 <code>HTTP</code> 请求。而建立 <code>HTTP</code> 请求的过程是需要花时间的。因此可以将文件转为 <code>DataURL</code> 嵌入 <code>html/css/js</code> 文件中，这样可以有效减少 <code>HTTP</code> 建立连接时所带来额外的时间开销了。同时 <code>html/css/js</code> 文件也可以被浏览器缓存，<code>DataURL</code> 被引入后也能一同被缓存。</p><p>图片转 <code>DataURL</code> 也有缺点，那就是<strong>编码后文本储存所占的空间比图片会更大</strong>。这其实就是传输体积与 HTTP 连接数的权衡。所以最佳做法是将小图片转为 <code>DataURL</code>，转换后并不会有过多体积溢出，而大尺寸图片照常引入即可。</p><p>安装 <code>url-loader</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader -D</span><br></pre></td></tr></table></figure><p>修改 <code>webpack.config.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 匹配文件规则</span></span><br><span class="line">    test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">    <span class="comment">// use 从右至左进行应用</span></span><br><span class="line">    use: [</span><br><span class="line">      &#123;</span><br><span class="line">        loader: MiniCssExtractPlugin.loader,</span><br><span class="line">        options: &#123; <span class="attr">publicPath</span>: <span class="string">&#x27;../&#x27;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpe?g|gif|webp)(\?.*)?$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">      loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">10000</span>,</span><br><span class="line">        name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(svg)(\?.*)?$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">      loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>在上例中将 <code>png</code>、<code>jpg</code>、<code>jpeg</code>、<code>gif</code>、<code>webp</code> 文件交给 <code>url-loader</code> 处理，而 <code>svg</code> 仍由 <code>file-loader</code> 处理。这样做的理由是: <code>DataURL</code> 内联 svg 会破坏 <code>sprite 系统</code> (将多个 svg 合为一张使用的技术) 中使用的<a href="https://css-tricks.com/svg-fragment-identifiers-work/">Fragment Identifiers</a>，因此不将 svg 转为 <code>DataURL</code>。</p><p>给 <code>url-loader</code> 设定匹配规则后，配置 <code>name</code> 和 <code>limit</code> 选项。<code>url-loader</code> 的 <code>name</code> 选项与 <code>file-loader</code> 的 <code>name</code> 作用是相同的，就不再累述。</p><p><code>limit</code> 是指定以<strong>字节(byte)</strong> 为单位的文件最大尺寸。当文件尺寸<strong>小于等于</strong> <code>limit</code> 所设的值，那文件将会被转为 <code>DataURL</code>。相反，若文件尺寸<strong>大于</strong> <code>limit</code> 时，则使用备用 <code>loader</code>。默认备用 <code>loader</code> 是 <code>file-loader</code>。可以设定 <code>fallback</code> 选项来修改备用 <code>loader</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    limit: <span class="number">10000</span>,</span><br><span class="line">    name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">    fallback: <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>limit</code> 的选值不易过大，可以设为 <code>10240</code> (10KB)或 <code>10000</code>，也可以根据项目实际情况进行调整。</p><p>现在来测试 <code>limit</code> 的效果。unix 系统可以在终端使用 <code>ls -l</code> 命令来查看文件信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  getting-started-loader-images git:(master) ✗ cd ./src/images</span><br><span class="line">➜  images git:(master) ✗ ls -l          </span><br><span class="line">total 6144</span><br><span class="line">-rwxr-xr-x  1 anran  staff  173596 May 28 17:41 01.jpg</span><br><span class="line">-rwxr-xr-x  1 anran  staff  761560 May 28 17:41 02.png</span><br><span class="line">-rwxr-xr-x  1 anran  staff  542065 May 28 17:41 03.jpg</span><br><span class="line">-rwxr-xr-x  1 anran  staff  376562 May 28 17:41 04.png</span><br><span class="line">-rwxr-xr-x  1 anran  staff  510812 May 28 17:41 05.png</span><br><span class="line">-rw-r--r--  1 anran  staff  760117 May 28 17:41 06.jpg</span><br><span class="line">-rw-r--r--@ 1 anran  staff    6943 May 30 13:54 webpack.jpg</span><br><span class="line">-rw-------  1 anran  staff     647 May 28 21:33 webpack.svg</span><br></pre></td></tr></table></figure><p>从输出的信息可以看到 <code>webpack.svg</code> (647B) 和 <code>webpack.jpg</code> (6943B) 的文件尺寸都低于设定的 <code>limit: 10000</code>。由于 <code>svg</code> 文件不通过 <code>url-loader</code> 处理，那按照预想它将会被输出到 <code>/dist/img</code> 中。<code>webpack.jpg</code> 可以被 <code>url-loader</code>，那编译后应该被嵌入到 <code>js</code> 代码中。</p><p>重新编译测试一下:</p><details>   <summary>编译结果</summary><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">➜  getting-started-loader-images git:(master) ✗ npm run build</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getting-started-loader@1.0.0 build /Users/anran/project_my/webpack-example/getting-started-loader-images</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rimraf ./dist &amp;&amp; webpack --config ./webpack.config.js</span></span><br><span class="line"></span><br><span class="line">Hash: 8d2e8c8220e86d46e388</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 692ms</span><br><span class="line">Built at: 05/30/2020 2:08:46 PM</span><br><span class="line">                   Asset       Size  Chunks                    Chunk Names</span><br><span class="line">           css/index.css   1.63 KiB       0  [emitted]         main</span><br><span class="line">     img/01.a8e7ddb2.jpg    170 KiB          [emitted]         </span><br><span class="line">     img/02.46713ed3.png    744 KiB          [emitted]  [big]  </span><br><span class="line">     img/03.70b4bb75.jpg    529 KiB          [emitted]  [big]  </span><br><span class="line">     img/04.b7d3aa38.png    368 KiB          [emitted]  [big]  </span><br><span class="line">     img/05.875a8bc2.png    499 KiB          [emitted]  [big]  </span><br><span class="line">     img/06.5b8e9d1e.jpg    742 KiB          [emitted]  [big]  </span><br><span class="line">img/webpack.258a5471.svg  647 bytes          [emitted]         </span><br><span class="line">              index.html  990 bytes          [emitted]         </span><br><span class="line">            js/bundle.js   10.5 KiB       0  [emitted]         main</span><br><span class="line">Entrypoint main = css/index.css js/bundle.js</span><br><span class="line">[0] ./src/css/style.css 39 bytes &#123;0&#125; [built]</span><br><span class="line">[1] ./src/js/index.js + 4 modules 10.1 KiB &#123;0&#125; [built]</span><br><span class="line">    | ./src/js/index.js 881 bytes [built]</span><br><span class="line">    | ./src/js/log.js 60 bytes [built]</span><br><span class="line">    | ./src/images/06.jpg 63 bytes [built]</span><br><span class="line">    | ./src/images/webpack.jpg 9.08 KiB [built]</span><br><span class="line">    | ./src/images/webpack.svg 68 bytes [built]</span><br><span class="line">    + 1 hidden module</span><br><span class="line"></span><br><span class="line">WARNING in configuration</span><br><span class="line">The &#x27;mode&#x27; option has not been set, webpack will fallback to &#x27;production&#x27; for this value. Set &#x27;mode&#x27; option to &#x27;development&#x27; or &#x27;production&#x27; to enable defaults for each environment.</span><br><span class="line">You can also set it to &#x27;none&#x27; to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/</span><br><span class="line"></span><br><span class="line">WARNING in asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).</span><br><span class="line">This can impact web performance.</span><br><span class="line">Assets: </span><br><span class="line">  img/04.b7d3aa38.png (368 KiB)</span><br><span class="line">  img/03.70b4bb75.jpg (529 KiB)</span><br><span class="line">  img/05.875a8bc2.png (499 KiB)</span><br><span class="line">  img/02.46713ed3.png (744 KiB)</span><br><span class="line">  img/06.5b8e9d1e.jpg (742 KiB)</span><br><span class="line"></span><br><span class="line">WARNING in webpack performance recommendations: </span><br><span class="line">You can limit the size of your bundles by using import() or require.ensure to lazy load some parts of your application.</span><br><span class="line">For more info visit https://webpack.js.org/guides/code-splitting/</span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0</span><br><span class="line">    [0] ./node_modules/html-webpack-plugin/lib/loader.js!./src/index.html 1.37 KiB &#123;0&#125; [built]</span><br><span class="line">Child mini-css-extract-plugin node_modules/css-loader/dist/cjs.js!src/css/style.css:</span><br><span class="line">    Entrypoint mini-css-extract-plugin = *</span><br><span class="line">    [0] ./node_modules/css-loader/dist/cjs.js!./src/css/style.css 2.98 KiB &#123;0&#125; [built]</span><br><span class="line">    [3] ./src/images/01.jpg 63 bytes &#123;0&#125; [built]</span><br><span class="line">    [4] ./src/images/02.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">    [5] ./src/images/03.jpg 63 bytes &#123;0&#125; [built]</span><br><span class="line">    [6] ./src/images/04.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">    [7] ./src/images/05.png 63 bytes &#123;0&#125; [built]</span><br><span class="line">        + 2 hidden modules</span><br></pre></td></tr></table></figure></details><details>   <summary>编译后的目录</summary><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   .</span><br><span class="line">├── dist</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── index.css</span><br><span class="line">│   ├── img</span><br><span class="line">│   │   ├── 01.a8e7ddb2.jpg</span><br><span class="line">│   │   ├── 02.46713ed3.png</span><br><span class="line">│   │   ├── 03.70b4bb75.jpg</span><br><span class="line">│   │   ├── 04.b7d3aa38.png</span><br><span class="line">│   │   ├── 05.875a8bc2.png</span><br><span class="line">│   │   ├── 06.5b8e9d1e.jpg</span><br><span class="line">│   │   └── webpack.258a5471.svg</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── js</span><br><span class="line">│       └── bundle.js</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── style.css</span><br><span class="line">│   ├── images</span><br><span class="line">│   │   ├── 01.jpg</span><br><span class="line">│   │   ├── 02.png</span><br><span class="line">│   │   ├── 03.jpg</span><br><span class="line">│   │   ├── 04.png</span><br><span class="line">│   │   ├── 05.png</span><br><span class="line">│   │   ├── 06.jpg</span><br><span class="line">│   │   ├── webpack.jpg</span><br><span class="line">│   │   └── webpack.svg</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── js</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       └── log.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure></details><p>重新打开 <code>/dist/index.html</code> 后可以在浏览器控制台看到如下输出的信息:</p><img data-src="/blog/2020/05/04/webpack-example/url-loader-js.jpeg" class=""><h2 id="HTML-资源引入"><a href="#HTML-资源引入" class="headerlink" title="HTML 资源引入"></a>HTML 资源引入</h2><p>在 <code>HTML</code> 中有一种常见的情况是：在模板中通过相对路径引入图片、脚本等资源时，发现引入的资源都没有被打包进去。</p><p>为什么会发生这种情况呢？原来是 webpack 默认不会处理 <code>html</code> 中的资源引入。为了能使 <code>HTML</code> 能通过相对路径引入资源，主要有 3 种解决的方案：</p><h3 id="lodash-template"><a href="#lodash-template" class="headerlink" title="lodash template"></a>lodash template</h3><p>现在项目中 <code>/src/index.html</code> 是作为 <code>html-webpack-plugin</code> 的模板，在模板中可以使用 <a href="https://lodash.com/docs/4.17.15#template">lodash template</a> 语法(以下简称模板语法)来插入内容。语法格式为: <code>&lt;%= value %&gt;</code></p><p>比如在 <code>src/index.html</code> 的模板中插入图片:</p><figure class="highlight html"><figcaption><span>/src/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panels&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其他代码略... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= require(&#x27;./images/06.jpg&#x27;).default %&gt;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><figcaption><span>/src/css/style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 为了使页面美观，再添加一些样式 */</span></span><br><span class="line"><span class="selector-class">.panel6</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#061927</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel6</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel6</span> <span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.4s</span> <span class="number">0.6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel6</span><span class="selector-class">.open</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.panel6</span><span class="selector-class">.open</span> <span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上例将通过 <code>require()</code> 函数引入图片。webpack 引入图片时默认是通过 <code>ESModule</code> 来引入的，因此解析的结果大致为 <code>&#123;default: module&#125;</code> 这种形式。因此后面还需要再加一个 <code>default</code>。这样就能正确的引入资源啦。</p><h3 id="静态目录"><a href="#静态目录" class="headerlink" title="静态目录"></a>静态目录</h3><p><strong>第二种</strong>就是新增一个静态目录 <code>static</code>(或者叫 <code>public</code>)。</p><p><code>HTML</code> 默认不是引用不了源码目录上的资源吗？那我就直接将资源输出到 <code>dist</code> 目录上。模板引用资源时直接引入输出后的文件不就行啦？</p><p><strong><a href="https://github.com/webpack-contrib/copy-webpack-plugin">copy-webpack-plugin</a></strong> 可以完成这种迁移的功能。它将从 <code>form</code> 处复制文件/文件夹，复制到 <code>to</code> (默认是 webpack 的输出目录)中。现在来安装它:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D copy-webpack-plugin</span><br></pre></td></tr></table></figure><p>新增 <code>static</code> 目录，并添加一些测试文件:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  .</span><br><span class="line">  ├── package.json</span><br><span class="line">  ├── src</span><br><span class="line">  │   ├── css</span><br><span class="line">  │   │   └── style.css</span><br><span class="line">  │   ├── images</span><br><span class="line">  │   │   ├── 01.jpg</span><br><span class="line">  │   │   ├── 02.png</span><br><span class="line">  │   │   ├── 03.jpg</span><br><span class="line">  │   │   ├── 04.png</span><br><span class="line">  │   │   ├── 05.png</span><br><span class="line">  │   │   ├── 06.jpg</span><br><span class="line">  │   │   ├── webpack.jpg</span><br><span class="line">  │   │   └── webpack.svg</span><br><span class="line">  │   ├── index.html</span><br><span class="line">  │   ├── js</span><br><span class="line">  │   │   ├── index.js</span><br><span class="line">  │   │   └── log.js</span><br><span class="line"><span class="addition">+ │   └── static</span></span><br><span class="line"><span class="addition">+ │       └── images</span></span><br><span class="line"><span class="addition">+ │           ├── 06.jpg</span></span><br><span class="line"><span class="addition">+ │           ├── webpack.jpg</span></span><br><span class="line"><span class="addition">+ │           └── webpack.svg</span></span><br><span class="line">  └── webpack.config.js</span><br></pre></td></tr></table></figure><p>现在将 <code>src/static/images</code> 的所有文件(不管代码里有没有引入这些文件)都复制到 <code>dist/img</code> 中。</p><figure class="highlight js"><figcaption><span>/webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin(&#123;</span><br><span class="line">      patterns: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">&#x27;src/static/images&#x27;</span>),</span><br><span class="line">          to: path.resolve(__dirname, <span class="string">&#x27;dist/img&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不仅想要复制图片还想要复制其他诸如 css 样式表、js 脚本甚至是 excel 文件到输出目录的话。那可以考虑将 <code>static</code> 目录与 dist 目录进行合并，将 <code>static</code> 和 <code>dist</code> 下的目录名保持一致。</p><p>比如将 <code>static</code> 的下 <code>images</code> 文件夹更名为图片输出目录 <code>img</code>，这样打包后会输出到同一个目录中:</p><figure class="highlight js"><figcaption><span>/webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin(&#123;</span><br><span class="line">      patterns: [</span><br><span class="line">        <span class="comment">// 如果只传 string 的话，那这个 string 相当于 from</span></span><br><span class="line">        <span class="comment">// path.resolve(__dirname, &#x27;src&#x27;, &#x27;static&#x27;),</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// to 默认是 `compiler.options.output`, 也就是 dist 目录</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//   from: path.resolve(__dirname, &#x27;src/static&#x27;),</span></span><br><span class="line">        <span class="comment">//   to: &#x27;&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前配置中与上面两例等价</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">&#x27;src/static&#x27;</span>),</span><br><span class="line">          to: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若指定文件/文件夹不想复制到 <code>dist</code> 中，还可以使用 <code>globOptions.ignore</code> 来忽略：</p><figure class="highlight js"><figcaption><span>/webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin(&#123;</span><br><span class="line">      patterns: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">&#x27;src/static&#x27;</span>),</span><br><span class="line">          to: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">          globOptions: &#123;</span><br><span class="line">            ignore: [<span class="string">&#x27;/**/webpack.jpg&#x27;</span>, <span class="string">&#x27;/**/img/webpack.svg&#x27;</span>],</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新修改模板中的图片的引入的路径，使其指向输出目录的 <code>img</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./img/06.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item index&quot;</span>&gt;</span>VI<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编译后就能看到图片正确被引用了。</p><h3 id="html-loader"><a href="#html-loader" class="headerlink" title="html-loader"></a>html-loader</h3><p><strong>最后一种</strong>是安装 <code>html-loader</code>，让 webapck 可以处理 <code>html</code> 资源的引入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D html-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.html$/i</span>,</span><br><span class="line">    loader: <span class="string">&#x27;html-loader&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 省略其他 rule...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置 <code>html-loader</code> 后，<code>HTML</code> 访问相对路径的资源就由 <code>html-loader</code> 来进行引入。将模板中的路径改为<strong>源码相对路径</strong>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./images/06.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item index&quot;</span>&gt;</span>VI<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实际编译时，<code>&lt;img class=&quot;img&quot; src=&quot;./images/06.jpg&quot; alt=&quot;&quot;&gt;</code> 中 <code>src</code> 的值会被转为 <code>require(&#39;./images/06.jpg&#39;)</code>，通过 webpack 引入后再将编译后的结果传入图片的 <code>src</code> 属性中。</p><p>此时重新编译后就可以正确引入了。但<strong>配置 <code>html-loader</code> 的方法会与方法二访问静态目录资源有点冲突</strong>。配置 <code>html-loader</code> 后就不能通过 <code>./</code>、<code>../</code> 这种相对路径来访问资输出目录的资源了。</p><p>如果我们配置了 <code>html-loader</code> 的同时又还想访问静态资源怎么办呢？这时可以通过根路径 <code>/</code> 逐层来访问，这样 <code>html-loader</code> 就不会处理这种路径:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/img/06.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;item index&quot;</span>&gt;</span>VI<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在问题又来了，若我们通过根路径来访问资源的话，那就不能单纯地打开文件来在浏览器查看效果了。因为直接打开文件到浏览器上，是通过 <code>file://</code> 协议打开的。浏览器实际上访问的路径是文件的绝对地址。</p><p>比如笔者打开文件后，浏览器地址栏展示的 url 是: <code>file:///Users/anran/project_my/webpack-example/getting-started-static-assets/dist/index.html</code>。现在通过根路径访问资源，需要浏览器补全为完整的 URL，经过浏览器补全后绝对路径是 <code>file:///img/06.jpg</code>。这样路径都是错误的自然就访问不到想要的资源啦。</p><p>如果有写过 <code>SPA(单页面应用)</code> 项目的朋友应该很熟悉。将 <code>SPA</code> 项目打包后直接访问 <code>index.html</code> 页面是空白的，这种情况多半就是从根路径引入资源失败而引起的。</p><p>这个问题解决的办法也很简单，就是将编译后的项目部署到服务器上，直接通过服务器进行访问，问题就迎刃而解了。为什么这样就可以解决了呢？</p><p>比如笔者的网站域名是 <code>anran758.github.io</code>，现在将页面部署到服务器后，直接在浏览器访问 <code>https://anran758.github.io/</code>，实际上访问的是 <code>/dist/index.html</code> 文件。<code>html</code> 通过相对路径访问<code>/img/06.jpg</code>，那补全后图片的路径就是 <code>https://anran758.github.io/img/06.jpg</code>。这样自然就能访问资源啦。</p><p>我们不妨通过 <code>Node.js</code> 起一个本地服务器测试一下。在 <code>/dist</code> 同级目录上新建一个 <code>server.js</code> 脚本，添加如下代码:</p><figure class="highlight js"><figcaption><span>/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">8001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置静态资源入口</span></span><br><span class="line">app.use(express.static(config.output.path));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(PORT, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Listening at http://localhost:&#x27;</span> + PORT + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上例脚本代码是通过 <a href="https://expressjs.com/">express</a> 快速搭建一个本地服务器，将服务器静态资源入口设为 <code>webpack.config.js</code> 的输出目录(也就是 <code>/dist</code>)，随后启动服务器。</p><p><code>express</code> 是基于 <code>Node.js</code> 的 web 框架，要使用它之前需要安装依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D express</span><br></pre></td></tr></table></figure><p><code>package.json</code> 中添加个快捷入口，并在终端运行该脚本:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 其他脚本..</span></span><br><span class="line">    <span class="attr">&quot;test:prod&quot;</span>: <span class="string">&quot;node server.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  getting-started-static-assets git:(master) ✗ npm run test:prod </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getting-started-loader@1.0.0 <span class="built_in">test</span>:prod /Users/anran/project_my/webpack-example/getting-started-static-assets</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node server.js</span></span><br><span class="line"></span><br><span class="line">Server is running at http://localhost:8001 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>打开 <a href="http://localhost:8001/">http://localhost:8001</a> 后就能看到图片资源正确被引用了。</p><img data-src="/blog/2020/05/04/webpack-example/file-loader-2.jpeg" class=""><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好啦，现在 webpack 基础篇也到了尾声。我们对上述知识做一个简单的小结:</p><p>webpack 是一个静态模块打包工具，它本体虽然只支持处理 javascript 的模块，但可以通过 loader 让 webpack 完成原本它不能处理的功能。</p><p>webpack 的提供插件的功能，插件可以针对某种需求做特定处理，比如自动给 <code>html</code> 插入资源。</p><p>除了静态目录的文件外，我们发现 webpack 输出的文件都是有依赖关系的。为什么会这么说呢？仔细看看 webpack 处理的逻辑就能想清楚了:</p><p>webpack 从程序的入口 <code>/src/js/index.js</code> 开始处理，入口文件引入了 <code>style.css</code>，而 <code>style.css</code> 内又引用了图片资源。然后 <code>HTML</code> 再通过 webpack 插件引入模板，再将这些资源插入模板中。这就是文件的依赖关系，这些依赖关系最终会生成一个**依赖图(Dependency Graph)**。</p><p>想必看到这里的各位对 webpack 都有了个比较清晰的概念了吧？当然这只是一个开始，后面还有一些高级的概念在本文中由于篇幅的限制无法一并理清。若对笔者 webpack 的笔记感兴趣的话可以继续关注此系列的更新，下一篇将围绕开发环境进行梳理。</p><p><strong>参考资料:</strong></p><ul><li><a href="https://webpack.js.org/">Webpack document</a></li><li><a href="https://github.com/facebook/create-react-app/pull/1180">Use file-loader for svgs #1180</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> webpack </tag>
            
            <tag> 脚手架 </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flexbox 布局实际用例</title>
      <link href="/blog/2020/02/22/flexbox-use-cases/"/>
      <url>/blog/2020/02/22/flexbox-use-cases/</url>
      
        <content type="html"><![CDATA[<p>上篇文章介绍了 flexbox 的属性与示例，本文再通过几个 flex 布局的案例来体会 flex 布局的特性带来的便利和问题~</p><img data-src="/blog/2020/02/22/flexbox-use-cases/banner.png" class=""><span id="more"></span><h2 id="格式化上下文"><a href="#格式化上下文" class="headerlink" title="格式化上下文"></a>格式化上下文</h2><p>当我们给父容器设置 flex 属性后，flex 容器会在容器内创建一个新的 **flex 格式化上下文(formatting context)**。在这上下文中 <code>float</code>、 <code>clear</code> 将失去作用，<code>vertical-align</code> 对于 flex 元素也不再会起作用。</p><p>在实际开发中，当我们使用行内元素(<code>inline</code>、<code>inline-block</code>) 时，有时候可能会看到元素之间会有一个奇怪的间隙，并且设置的字体越大间隙就越大。原来这个间隙是我们在编写源代码时标签换行导致，不换行就不会出现这种情况。</p><p>多数情况下，我们在编写代码时会习惯用编辑器对代码进行格式化，格式化后会使这些标签换行从而导致间隙。这在要求像素级还原的项目中就有点尴尬了。</p><p>以前常见的做法是在父元素设置 <code>font-size: 0</code> 消除间隙，再设置子元素的字体大小。这样做确实有点麻烦，因此在 flex 上下文中，这些间隙默认就会被清除。</p><iframe height="328" style="width: 100%;" scrolling="no" title="flex vs inline gap" src="https://codepen.io/anran758/embed/GRJNQNb?height=328&theme-id=32168&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/GRJNQNb'>flex vs inline gap</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>通常我们使用 <code>flex</code> 布局更多的是用于整体的布局设计，如:</p><iframe height="382" style="width: 100%;" scrolling="no" title="[flex] 圣杯布局" src="https://codepen.io/anran758/embed/NWqbYvX?height=382&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/NWqbYvX'>[flex] 圣杯布局</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p>在互联网早期，由于用户网路的限制，经常会出现 <code>html</code> 的内容显示出来但页面样式还没加载出来的情况，这会导致用户没能最先看到想看的东西。因此 <a href="https://alistapart.com/author/matthewlevine/">Matthew Levine</a> 在 2006 年提出了圣杯布局的概念，在 <code>HTML</code> 源代码中将用户想看的内容挪到次要内容的前面。</p><p>上例 demo 就是使用 flex 布局实现的圣杯布局，虽然在 <code>HTML</code> 源码里 <code>Main</code> 处于其他两块内容之上，但通过 <code>order</code> 属性可以调整元素间的顺序。</p><p>除此之外，还可以通过媒体查询(<code>@media</code>)做响应式页面，当屏幕宽度小于 <code>640px</code> 后仅需修改几项 flex 属性就可以改变布局排列的方式，十分灵活。</p><p>如果你使用过 <code>react/vue</code> 主流 UI 库的话，你就会发现他们使用布局容器也是 <code>flex</code> 布局实现的，比如 <a href="https://element.eleme.cn/#/zh-CN/component/container">Element UI</a>、<a href="https://next.ant.design/components/layout-cn/">Ant Design</a> 等。</p><h2 id="栅格布局"><a href="#栅格布局" class="headerlink" title="栅格布局"></a>栅格布局</h2><p>栅格布局也可以通过 flex 来实现：在以下的 demo 中，<code>HTML</code> 源码内的各元素都是平级，通过调整 flex 属性实现了跨行或跨列的效果。</p><iframe height="501" style="width: 100%;" scrolling="no" title="[flex] 栅格布局" src="https://codepen.io/anran758/embed/ZEGpdXP?height=501&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/ZEGpdXP'>[flex] 栅格布局</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h2 id="justify-content-尾列不整齐"><a href="#justify-content-尾列不整齐" class="headerlink" title="justify-content 尾列不整齐"></a>justify-content 尾列不整齐</h2><blockquote><p><a href="https://www.zhangxinxu.com/wordpress/2019/08/css-flex-last-align/">让CSS flex布局最后一行列表左对齐的N种方法</a> –By 张鑫旭</p></blockquote><p>多数情况下使用 <code>justify-content</code> 是要求子元素们散开，但尾列元素不够的时候，散开就显得很奇怪了，为此我们可以做如下处理:</p><iframe height="640" style="width: 100%;" scrolling="no" title="[flex] 解决 justify-content 尾部不整齐的问题" src="https://codepen.io/anran758/embed/VwLmJJm?height=640&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/VwLmJJm'>[flex] 解决 justify-content 尾部不整齐的问题</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>在 MDN <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties">Animatable CSS properties</a> 上列出了可以使用 <code>Animations</code> 或 <code>Transitions</code> 进行动画处理的属性，其中就有 <code>flex</code> 属性。因此还可以结合动画进行布局设计:</p><iframe height="510" style="width: 100%;" scrolling="no" title="[flex] flex 与动画" src="https://codepen.io/anran758/embed/QWbdgPx?height=510&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/QWbdgPx'>[flex] flex 与动画</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>通过以上几个案例是不是对 flex 布局的灵活有了更深的感受呢？以上 demo 大多借鉴已有的思路，如果你有什么好的想法，也可以自己动手尝试一番或分享出来~</p><p><strong>参考资料:</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes">MDN | 使用 CSS 弹性盒子</a></li><li><a href="https://www.zhihu.com/question/28542816">一丝 | 以下 CSS 栅格布局除了用 table 以外，有什么其他的方法吗？</a></li><li><a href="https://www.zhangxinxu.com/wordpress/2019/08/css-flex-last-align/">张鑫旭 | 让 CSS flex布局最后一行列表左对齐的N种方法</a></li></ul><p><strong>Pixiv 背景图例：</strong></p><ol><li><a href="https://www.pixiv.net/artworks/65843704">ちょけ | アリスミクと白うさぎ</a></li><li><a href="https://www.pixiv.net/artworks/70487844">Azit | Miku</a></li><li><a href="https://www.pixiv.net/artworks/65040104">ぽむ | もっと高くまで！</a></li><li><a href="https://www.pixiv.net/artworks/64702860">雨陌 | 8.31</a></li><li><a href="https://www.pixiv.net/artworks/67270728">akino | つもりつもるキモチ。</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> layout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> layout </tag>
            
            <tag> flexbox </tag>
            
            <tag> transition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flexbox 布局入门</title>
      <link href="/blog/2020/02/05/css-getting-started-with-flexbox/"/>
      <url>/blog/2020/02/05/css-getting-started-with-flexbox/</url>
      
        <content type="html"><![CDATA[<p>互联网早期实现布局是需要通过多种不同属性组合才能实现我们想要的布局。</p><p>比如常见的垂直居中，刚接触 css 的朋友看到 <code>vertical-align: middle;</code> 这个属性可能就会认为它就是用于垂直居中的，但实际上并没有那么简单。如果想要通过该属性来实现垂直居中，还需要其他小伙伴配合。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#e44b27</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 该伪类是实现垂直居中关键 */</span></span><br><span class="line"><span class="selector-class">.container</span>:after &#123;</span><br><span class="line">  content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">white-space</span>: normal;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>我想居中！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样看来，为了实现垂直居中布局，我们还得打一套组合拳才能出来才行，是不是看起来有点麻烦的样子？</p><p>W3C 在 2009 年提出的 <code>Fiexbox(flex)</code> 布局<a href="https://www.w3.org/TR/2009/WD-css3-flexbox-20090723/">草案</a>，就是针对用户界面设计优化的 CSS 盒模型。如果使用 flex 布局来实现上面的垂直居中布局的话，可以简化为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#e44b27</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 使用 flex 布局 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我想居中！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后的代码就显得更精简了，也不需要其他小伙伴来搭把手。布局的事情就让 flex 家族自己来解决即可。</p><span id="more"></span><hr><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>应用 flex 布局的容器我们通常称为 **弹性盒子/容器(flex container)**。弹性容器可以由 <code>display: flex</code> 或 <code>display: inline-flex</code> 生成。弹性盒子的子项常称为 **弹性元素/项目(flex items)**，它以 flex 布局模型进行布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex | inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要学习 flex 布局的工作方式，最先需要学习的是它自身的术语。下面直接引用 flex 草案中术语的介绍图:</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-direction-terms.svg" class="" title="术语介绍图(en)"><p>别被原版英文术语给吓倒了，咱们翻译一下其实就很好理解了：</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-direction-terms-tra-cn.svg" class="" title="翻译后的术语介绍"><p>在术语示意图中可以看到两根轴，分别是**主轴(main axis)<strong>和</strong>垂直交叉轴(cross axis)<strong>。同时标注了</strong>主轴起点(main start)<strong>与</strong>终点(main end)<strong>，</strong>交叉轴的起点(cross start)<strong>与</strong>终点(cross end)**。</p><p>默认情况下 flex 布局是按主轴的方向进行布局的。flex 元素所占据的 <strong>主轴空间(main size)</strong> 就是 flex 元素的宽度(width)、所占据的 <strong>交叉轴空间(cross size)</strong> 就是 flex 元素的高度(height)。</p><hr><h2 id="flex-容器属性"><a href="#flex-容器属性" class="headerlink" title="flex 容器属性"></a>flex 容器属性</h2><p>flex 容器里可以通过以下几种属性来控制容器的行为:</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-content</li><li>align-items</li></ul><p>为了更好的观察各属性的行为，笔者在 codepen 上给不同属性都写了 demo 做参考。</p><p>目前有个新规范(<a href="https://drafts.csswg.org/css-align-3/#propdef-justify-content">CSS Box Alignment Module Level 3</a>)正处于工作草案的状态中，对一些属性添加新值，如 <code>[first|last]? baseline</code>、<code>self-start</code>、<code>self-end</code>、<code>start</code>、<code>end</code>、<code>left</code>、<code>right</code>、<code>unsafe | safe</code>。</p><p>这些新值多数浏览器都没实现，为了便于演示，此处仅讲解初始版本的值。<code>Firefox</code> 浏览器对新值实现的比较超前，也建议通过使用 <code>Firefox</code> 浏览器来查看 demo。</p><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p><code>flex-direction</code> 指示内部元素如何在 flex 容器中布局。可以简单的理解为 flex 容器的布局方向。其默认值为 <code>row</code>，可选语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 常用属性 */</span></span><br><span class="line"><span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br></pre></td></tr></table></figure><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-direction-row.png" class="" title="flex-direction-row 示例"> --><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-direction-row-reverse.png" class="" title="flex-direction-row-reverse 示例"> --><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-direction-column.png" class="" title="flex-direction-column 示例图"> --><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-direction-column-reverse.png" class="" title="flex-direction-column-reverse 示例图"> --><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-direction-dir.png" class="" title="flex-direction dir 效果示例图"> --><ul><li><code>row</code>: <strong>主轴起点和主轴终点与内容方向相同</strong>。简而言之就是内容从左到右进行布局。</li><li><code>row-reverse</code>: 与 <code>row</code> 行为相同，但主轴起点和主轴终点对调了位置。</li><li><code>column</code>: 主轴由水平方向转为垂直方向，布局从上往下排。</li><li><code>column-reverse</code>: 主轴由水平方向转为垂直方向，布局从上往下排。</li></ul><p><strong>值得注意的是，全局属性 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir">dir</a> 的作用是指示元素的文本的方向性，该属性会受到 <code>row</code> 和 <code>row-reverse</code> 的影响。</strong></p><!-- **本例 codepen demo: [[vue demo] flex-direction](https://codepen.io/anran758/pen/XWJLqjM)** --><iframe height="486" style="width: 100%;" scrolling="no" title="[vue demo] flex-direction" src="https://codepen.io/anran758/embed/XWJLqjM?height=486&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/XWJLqjM'>[vue demo] flex-direction</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p><code>flex-wrap</code> 指定 flex 元素单行显示还是多行显示 。如果可以换行，你甚至还可以通过该属性控制行的堆叠方向。它的取值如下所示:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: <span class="built_in">nowrap</span>(默认值) | wrap | wrap-reverse;</span><br></pre></td></tr></table></figure><p>可以通过本例 demo 右上角的按钮来修改元素的数量，观察三个值之间的变化:</p><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-wrap.png" class="" title="flex-wrap 示例图"> --><iframe height="357" style="width: 100%;" scrolling="no" title="[vue demo] flex-wrap" src="https://codepen.io/anran758/embed/OJPexQp?height=357&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/OJPexQp'>[vue demo] flex-wrap</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><ul><li><code>nowrap</code>: flex 容器宁愿压榨元素的空间也不肯换行。甚至压缩到一定地步后还会溢出容器。</li><li><code>wrap</code>: 若子项超过容器所容纳的宽度，则允许断行展示。</li><li><code>wrap-reverse</code>: 和 <code>wrap</code> 的行为一样，只是<strong>交叉轴起点与终点互换</strong>。</li></ul><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-wrap-diff-reverse.png" class="" title="对比 reverse"> --><!-- **本例 codepen demo: [[vue demo] flex-wrap](https://codepen.io/anran758/pen/OJPexQp?editors=1100)** --><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p><code>flex-flow</code> 属性是 <a href="#flex-direction">flex-direction</a> 和 <a href="#flex-wrap">flex-wrap</a> 的简写。这个没啥好说的，也就不额外写 demo 了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 语法 */</span></span><br><span class="line"><span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 单独设置 flex-direction 的属性 */</span></span><br><span class="line"><span class="attribute">flex-flow</span>: row;</span><br><span class="line"><span class="attribute">flex-flow</span>: column;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 单独设置 flex-wrap 的属性 */</span></span><br><span class="line"><span class="attribute">flex-flow</span>: nowrap;</span><br><span class="line"><span class="attribute">flex-flow</span>: wrap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同时设置两种属性，建议按照语法顺序进行书写 */</span></span><br><span class="line"><span class="attribute">flex-flow</span>: row nowrap;</span><br><span class="line"><span class="attribute">flex-flow</span>: column wrap;</span><br></pre></td></tr></table></figure><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p><code>justify-content</code> 属性定义了容器主轴中各 flex 元素之间的对齐方式。这是 flex 布局中常用的属性之一。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: normal |</span><br><span class="line">                 space-between | space-around | space-evenly |</span><br><span class="line">                 center | flex-start | flex-end</span><br></pre></td></tr></table></figure><p>在初始版本中，<code>justify-content</code> 的默认值为 <code>flex-start</code>。但在最新版本中的 chrome 浏览器被修改为了 <code>normal</code>。</p><p>为了对比属性之间的差异，本例 demo 将元素的两侧 <code>margin</code> 清空:</p><iframe height="400" style="width: 100%;" scrolling="no" title="[vue demo] justify-content" src="https://codepen.io/anran758/embed/mdyZZWM?height=400&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/mdyZZWM'>[vue demo] justify-content</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/justify-content-position.png" class="" title="按内容位置分类"> --><ul><li><code>normal</code>: 排列效果等同 <code>flex-start</code>。</li><li><code>flex-start</code>: 默认情况是左对齐，从行首开始排列。每行第一个 flex 元素与行首对齐，同时所有后续的 flex 元素与前一个对齐。</li><li><code>flex-end</code>: 默认情况下是右对齐，从行尾开始排列。每行最后一个 flex 元素与行尾对齐，其他元素将与后一个对齐。</li><li><code>center</code>: 该值使元素居中对齐。</li></ul><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/justify-content-distribution.png" class="" title="按内容位置分类"> --><ul><li><code>space-between</code>: 首尾两端对齐，内部元素之间的间距相等。</li><li><code>space-around</code>: 在每行上均匀分配弹性元素。相邻元素间距离相同，<strong>首尾两个元素的距离是相邻元素之间距离的一半</strong>。</li><li><code>space-evenly</code>: 主轴内各元素两侧均匀分配剩余空间。(注意此处与 <code>space-around</code> 的差异)</li></ul><!-- **本例 codepen demo: [[vue demo] justify-content](https://codepen.io/anran758/pen/mdyZZWM?editors=1100)** --><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><code>align-items</code> 属性除了可以在 flex 布局中有效，还可以在 <code>grid(网格)</code> 布局中应用。在 flex 布局中它的作用是<strong>决定交叉轴的对齐方式</strong>。这也是 flex</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 主流浏览器已经实现的值 */</span></span><br><span class="line"><span class="attribute">align-items</span>: normal | flex-start | flex-end | center | baseline | stretch</span><br><span class="line"></span><br><span class="line">/* 新草案添加的值 */</span><br><span class="line">align-items:  | start | end | [ first | last ]baseline | left | right</span><br></pre></td></tr></table></figure><iframe height="420" style="width: 100%;" scrolling="no" title="[vue demo] align-items" src="https://codepen.io/anran758/embed/qBEeNjb?height=420&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/qBEeNjb'>[vue demo] align-items</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/align-items-normal.png" class=""> --><ul><li><code>normal</code>: 在 flex 布局中 <code>normal</code> 的表现效果如同 <code>stretch</code> 一样。</li><li><code>stretch</code>: 弹性元素被在交叉轴轴方向被拉伸到与容器相同的高度或宽度。若容器没有设置高度，则取当前行中最高元素的高度，如本例中<strong>元素 4</strong> 是第一行中最高的元素，那第一行中的高度都被拉伸到与最高元素相同的高度。第二行中<strong>最高的元素是元素 2</strong>，因此第二行高度都取至元素 2。</li></ul><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/align-items-position.png" class=""> --><ul><li><code>flex-start</code>: 元素向交叉轴起点对齐。</li><li><code>flex-end</code>: 元素向交叉轴终点对齐。</li><li><code>center</code>: 元素在交叉轴居中。</li></ul><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/align-items-baseline.png" class=""><ul><li><code>baseline</code>: 所有元素向基线对齐。侧轴起点到元素基线距离最大的元素将会于侧轴起点对齐以确定基线。<strong>在例子中放大元素 6 的 <code>font-size</code>, 与 <code>center</code> 进行对比就能看到差异了。</strong></li></ul><!-- **本例 codepen demo: [[vue demo] align-items](https://codepen.io/anran758/pen/qBEeNjb)** --><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p><code>justify-content</code> 是作用于主轴上，而 <code>align-content</code> 则是用于定义交叉轴的对齐方式。值得注意的是，若 <strong>flex 容器内只有一根轴线，该属性将不起作用</strong>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 主流浏览器已经实现的值 */</span></span><br><span class="line"><span class="attribute">align-content</span>: normal | space-between | space-around | space-evenly | stretch |  center | flex-start | flex-end</span><br><span class="line"></span><br><span class="line">/* 主流浏览器多数未实现的值 */</span><br><span class="line">align-content: [first|last]? baseline, start, end, left, right</span><br></pre></td></tr></table></figure><p>父容器设置了 flex 布局后，若子元素没有设定 <code>height</code> 属性的话，默认会将容器内的子元素进行拉伸。</p><p>为了便于观察两者的差异，笔者在 demo 中新增一列进行对比。左列的 flex 元素使用 <code>height</code> 属性，右列使用 <code>min-height</code> 属性。同时将 flex 容器高度设置为 <code>400px</code>:</p><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/align-content-normal.png" class=""> --><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/align-content-flex-position.png" class=""> --><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/align-content-space.png" class=""> --><iframe height="657" style="width: 100%;" scrolling="no" title="[vue demo] align-content" src="https://codepen.io/anran758/embed/OJPKWyj?height=657&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/OJPKWyj'>[vue demo] align-content</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><ul><li><code>normal</code>: 像未设置值，元素处于默认位置。</li><li><code>stretch</code>: 拉伸所有行来填满剩余空间。剩余空间平均的分配给每一行(若某元素设置了高度，那么该值对这个元素将不会起作用)。</li><li><code>flex-start</code>: 交叉轴起点对齐。</li><li><code>flex-end</code>: 交叉轴终点对齐。</li><li><code>center</code>: 交叉轴居中对齐。</li><li><code>space-between</code>: 交叉轴两端对齐，行之间间距相等</li><li><code>space-around</code>: 交叉轴均匀对齐，行两端间距相等</li><li><code>space-evenly</code>: 交叉轴内各元素两侧均匀分配剩余空间。</li></ul><!-- **本例 codepen demo: [[vue demo] align-content](https://codepen.io/anran758/pen/OJPKWyj)** --><hr><h2 id="Flex-Item"><a href="#Flex-Item" class="headerlink" title="Flex Item"></a>Flex Item</h2><p>Flex Container(弹性容器)的一级子元素就是 Flex item(弹性元素)。以下主要应用于 Flex item 的属性。</p><ul><li>flex-basis</li><li>flex-grow</li><li>flex-shrink</li><li>flex</li><li>align-self</li><li>order</li></ul><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><code>flex-grow</code> 属性用于定义元素所占有的比例，它接受一个正整数，默认值为 <code>0</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-grow</span>: &lt;number&gt;</span><br><span class="line"></span><br><span class="line">/* 例子: 仅接受正数的值 */</span><br><span class="line">flex-grow: <span class="number">1</span>;</span><br></pre></td></tr></table></figure><!--  --><iframe height="340" style="width: 100%;" scrolling="no" title="[vue] flex-grow" src="https://codepen.io/anran758/embed/LYEwdRV?height=340&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/LYEwdRV'>[vue] flex-grow</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><!-- **本例 codepen demo: [align-content](https://codepen.io/anran758/pen/OJPKWyj)** --><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>与 <code>flex-grow</code> 相反，<code>flex-shrink</code> 属性处理元素收缩的问题，默认为 <code>1</code>，意味着元素默认会随着容器缩小而等比例缩小。当值为 <code>0</code> 时则不缩放。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-shrink</span>: &lt;number&gt;</span><br><span class="line"></span><br><span class="line">/* 例子: 默认缩放 */</span><br><span class="line">flex-shrink: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子: 使元素不缩放 */</span></span><br><span class="line"><span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>在以下 demo 中，各 flex 项目的宽高相等。当父容器有足够的空间时，元素不需要紧衣缩食，因此 <code>flex-shrink</code> 也没有机会表现出它的作用。</p><!--  --><iframe height="275" style="width: 100%;" scrolling="no" title="[vue] flex-shrink" src="https://codepen.io/anran758/embed/eYmqKpG?height=275&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/eYmqKpG'>[vue] flex-shrink</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p>将 flex 容器尺寸调小后可以发现，<code>flex-shrink</code> 的值越大，元素被压榨的空间越多。</p><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-shrink-2.png" class=""> --><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-shrink-3.png" class=""><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p><code>flex-basis</code> 指定了 flex 元素在主轴空间(main size)所占的初始大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-basis</span>:  &lt;<span class="string">&#x27;width&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>当一个元素同时被设置了 <code>flex-basis</code> (值为 <code>auto</code> 除外)和 <code>width</code> 属性时，<code>flex-basis</code> 具有更高的优先级。</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-basis.png" class=""><p><code>W3C</code> 鼓励使用 <code>flex</code> 简写属性(下一小节进行秒速)来控制灵活性，而不是直接使用 <code>flex-basis</code> 属性。因为简写属性 <code>flex</code> 可以正确地重置任何未指定的属性以适应常见的用途。</p><iframe height="366" style="width: 100%;" scrolling="no" title="[vue] flex-basis" src="https://codepen.io/anran758/embed/yLymboP?height=366&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/yLymboP'>[vue] flex-basis</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code> 属性是 <code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code> 的简写，规定了弹性元素如何伸缩以适应 flex 容器中的可用空间，默认值为 <code>0 1 auto</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br></pre></td></tr></table></figure><p><code>flex</code> 属性可以指定 1 个，2 个或 3 个值。</p><p><strong>单值语法</strong>: 值必须为以下其中之一:</p><ul><li>一个无单位数(<code>&lt;number&gt;</code>): 它会被当作 <code>&lt;flex-grow&gt;</code> 的值。</li><li>一个有效的宽度(width)值: 它会被当作 <code>&lt;flex-basis&gt;</code>的值。</li><li>关键字 <code>none</code>、<code>auto</code>、<code>initial</code>。</li></ul><p><strong>双值语法</strong>: 第一个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-grow&gt;</code> 的值。第二个值必须为以下之一：</p><ul><li>一个无单位数：它会被当作 <code>&lt;flex-shrink&gt;</code> 的值。</li><li>一个有效的宽度值: 它会被当作 <code>&lt;flex-basis&gt;</code> 的值。</li></ul><p><strong>三值语法:</strong></p><ul><li>第一个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-grow&gt;</code> 的值。</li><li>第二个值必须为一个无单位数，并且它会被当作  <code>&lt;flex-shrink&gt;</code> 的值。</li><li>第三个值必须为一个有效的宽度值， 并且它会被当作 <code>&lt;flex-basis&gt;</code> 的值。</li></ul><p>这个属性没啥好演示的，其实就是之前介绍的三个属性的组合:</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-flex.png" class=""><iframe height="345" style="width: 100%;" scrolling="no" title="[vue] flex" src="https://codepen.io/anran758/embed/dyPxaXw?height=345&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/dyPxaXw'>[vue] flex</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p><code>align-self</code> 属性在 flex 布局中作用于单个 flex 元素上，它将控制指定元素在交叉轴上的位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-self</span>: auto | normal | stretch | center | flex-start | flex-end;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多数浏览器未实现的功能 */</span></span><br><span class="line"><span class="attribute">align-self</span>: start | end | self-start | self-end | [first | last]? baseline;</span><br></pre></td></tr></table></figure><ul><li><code>auto</code>: 设置为父元素的 align-items 值，如果该元素没有父元素的话，就设置为 <code>stretch</code>。</li><li><code>normal</code>: 在 flex 布局中，相当于 <code>stretch</code> 的效果。</li><li><code>stretch</code>: flex 元素将会基于容器的宽和高，按照自身 margin box 的 cross-size 拉伸。</li><li><code>center</code>: 使项目在交叉轴中居中。</li><li><code>flex-start</code>: flex 元素会对齐到 cross-axis 的首端。</li><li><code>flex-end</code>: flex 元素会对齐到 cross-axis 的尾端。</li></ul><!-- <img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/align-self.png" class=""> --><iframe height="762" style="width: 100%;" scrolling="no" title="[vue] align-self" src="https://codepen.io/anran758/embed/mdJbyKz?height=762&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/mdJbyKz'>[vue] align-self</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p><code>order</code> 属性用于设置指定 flex 元素在容器中的顺序。容器中的 flex 元素按升序值排序，若值相同则按其源代码出现的顺序进行排序，默认值为 <code>0</code>。它接受一个整数值(integer)，如 <code>-2</code>、<code>0</code>、<code>3</code> 等。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">order</span>: &lt;integer&gt;</span><br></pre></td></tr></table></figure><p>我们可以操作下面的 demo 来控制元素的顺序，比如将第三项元素通过 <code>order</code> 在移动到第一位。</p><img data-src="/blog/2020/02/05/css-getting-started-with-flexbox/flex-order.png" class=""><iframe height="863" style="width: 100%;" scrolling="no" title="[vue] order" src="https://codepen.io/anran758/embed/wvawEbL?height=863&theme-id=32168&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/wvawEbL'>[vue] order</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><hr><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><iframe data-feature="flexbox" src="https://caniuse.bitsofco.de/embed/index.html?feat=flexbox&periods=future_3,current,past_1,past_2&accessible-colours=false" frameborder="0" width="100%" height="400px"></iframe><p>要将学到的新东西应用到实际项目中就不得不考虑其兼容性了。通过 <a href="https://caniuse.com/#feat=flexbox">caniuse</a> 我们可以看到：flex 布局经过多年的发展，主流浏览器都已经对 flex 布局基本模块都实现完毕了。</p><p><code>PC</code> 端需要考虑的是要不要兼容 <code>IE</code>，移动端最低兼容为 <code>ios 3.2+</code>、<code>Android 2.1+</code>。如果你需要开发微信小程序，那么小程序官方就推荐使用 flex 布局。</p><p>早期 flex 布局是通过 <code>display: box;</code> 来申明，这是使用了旧的规范，后来该值被 <code>flex</code> 给替换掉了。还有一些很低版本的浏览器或许还需要添加浏览器前缀才能使用 flex 布局。因此你在某处看到如下代码也不用感到奇怪，这是开发者在给布局做兼容呢:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: -moz-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  -webkit-box-pack: center;</span><br><span class="line">  -webkit-<span class="attribute">justify-content</span>: center;</span><br><span class="line">     -moz-box-pack: center;</span><br><span class="line">      -ms-<span class="attribute">flex</span>-pack: center;</span><br><span class="line">          <span class="attribute">justify-content</span>: center;</span><br><span class="line">  -webkit-box-align: center;</span><br><span class="line">  -webkit-<span class="attribute">align-items</span>: center;</span><br><span class="line">     -moz-box-align: center;</span><br><span class="line">      -ms-<span class="attribute">flex</span>-align: center;</span><br><span class="line">          <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果要我们在开发时手动写这种兼容好像不是很靠谱，兼容又冗余。所幸现在的前端开发都会使用脚手架，这些脚手架一般都会内置 <code>postcss</code> 和 <code>autoprefix</code> 之类的插件来帮助我们完成这些事。</p><p>还有一些朋友可能会说，我们老项目还是得要兼容 <code>IE 8+</code> 呀，是不是意味着跟 flex 布局无缘了？其实不是的，github 上有一个叫 <a href="https://github.com/jonathantneal/flexibility">flexibility</a> 的 <code>polyfill</code> 可以让 <code>IE8 +</code> 也实现 flex 布局效果.</p><hr><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本篇介绍了 flex 布局该如何使用、各属性的作用与效果，下一篇再详细讲讲 flex 布局在实际工作中的妙用~</p><p><strong>参考资料:</strong></p><ol><li><a href="https://www.w3.org/TR/css-flexbox-1/">CSS Flexible Box Layout Module Level 1</a></li><li><a href="https://drafts.csswg.org/css-align-3/">CSS Box Alignment Module Level 3</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Flex_Item">Flex Item</a></li></ol><!-- 在 flex 布局中，弹性容器的子元素可以在任何方向上排布，也可以 “弹性伸缩” 其尺寸。既可以增加尺寸以填满未使用的空间，也可以收缩尺寸以避免父元素溢出。子元素的水平对齐和垂直对齐都能很方便的进行操控。 -->]]></content>
      
      
      <categories>
          
          <category> layout </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> layout </tag>
            
            <tag> flexbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo blog 的升级与同步方案</title>
      <link href="/blog/2019/11/02/hexo-blog-upgrade-and-version-control/"/>
      <url>/blog/2019/11/02/hexo-blog-upgrade-and-version-control/</url>
      
        <content type="html"><![CDATA[<p>前一篇我们介绍了如何使用 <code>Hexo</code> 框架及 <code>Next</code> 主题搭建博客。这次来聊聊如何安全的更新博客与主题的版本。</p><p><img data-src="https://user-images.githubusercontent.com/16272760/63487983-da41b080-c4df-11e9-951c-64883a8a5e9b.png" alt="next theme"></p><span id="more"></span><hr><p>早期写博客时笔者就有考虑过使用 <code>git</code> 来做版本控制，那时 <code>github</code> 私人仓库还没有免费开放，国内虽然有 <code>coding</code> 和码云这些平台有开放少量的私人仓库，但由于懒得折腾就选了最方便同步的 <code>OneDrive</code>(因为它只需将文件夹移入就可以实现跨设备共享)。</p><p>后来笔者因为工作的原因，需要在多设备中频繁切换，这种简单同步方式就会暴露出一些问题。比如说，在<strong>设备 A</strong> 想对博客做一些自定义的修改，其中可能会动到依赖，但此时<strong>设备 B</strong> 的文件正在同步，那这样可能会导致文件不一致的问题。可能会将旧的文件重新同步过来，这可能会导致程序报错，还不易于排查。</p><p>冲突文件合并失败会额外添加如 <code>index-anran758&#39;s MacBook Pro.js</code> 之类的同名文件，并且发生冲突时是隐式的，你甚至不知道发生了冲突，这种体验使用不太友好。</p><p>因此 <code>OneDrive</code> 的同步方式适用于改动不会太大的文件。</p><hr><p>如果你对 <code>git</code> 版本控制比较熟悉的话，那可以通过 <code>git</code> 对 blog 进行版本控制。</p><p>使用源码托管平台的话就如上文所说主要有这么几种选择:</p><p>国内的 <a href="https://gitee.com/">gitee(码云)</a>、<a href="https://coding.net/">coding</a> 是一个不错的选择，代码的上传于下载速度也比较可观。国外可以使用 <a href="https://github.com/">github</a>，github 的私人仓库是今年才开放无限制免费创建仓库数量的，缺点由于众所周知的问题，有时可能拉代码速度较慢。</p><p>笔者使用的是 github 作为源码托管，下文将要介绍的方法对于 <code>git</code> 仓库是通用，因此根据自身的喜好选择对应的平台。</p><h2 id="博客托管"><a href="#博客托管" class="headerlink" title="博客托管"></a>博客托管</h2><p>托管 blog 源码的步骤如下:</p><ol><li><p>找到对应的平台，创建私人仓库(注意是 <strong>Private</strong>，不要将自己的私人配置也开源咯)。</p></li><li><p>仓库创建完毕后，得到仓库的地址。打开命令行，进入 <code>/blog</code> 目录下并输入命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化 git 项目</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个名为 origin 的 remote</span></span><br><span class="line"><span class="comment"># your_repo_path 是你创建仓库得到的仓库地址</span></span><br><span class="line">git remote add origin your_repo_path</span><br></pre></td></tr></table></figure></li><li><p>由于 <code>/theme/next</code> 本身也是一个仓库，<code>git</code> 无法提交嵌套仓库的文件夹，因此需要在 <code>.gitignore</code> 添加配置，忽略该文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其他忽略规则...</span></span><br><span class="line">themes/next/</span><br></pre></td></tr></table></figure></li><li><p>提交代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交代码</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;new: blog 数据开始进行版本控制&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上游(-u)并推送至远程的 master 分支</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>这样我们就完成了博客的源码托管。</p></li></ol><h2 id="主题托管"><a href="#主题托管" class="headerlink" title="主题托管"></a>主题托管</h2><p><code>Next theme</code> 官网介绍的安装方式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 blog 目录</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 言下之意就是将该库克隆到 themes 目录下的 next 文件夹中</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>在 <code>Next theme 7.0+</code> 版本中，主题嵌入了检查版本更新的代码，每当运行本地服务器时，都会进行检查版本号的更新。当有新的版本发布时会在命令行输出警告:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARN  Your theme NexT is outdated. Current version: v7.4.2, latest version: v7.5.0</span><br><span class="line">WARN  Visit https://github.com/theme-next/hexo-theme-next/releases <span class="keyword">for</span> more information.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时你想体验 <code>Next</code> 的新特性的话可能会有点麻烦，因为原先我们在旧版本上修改了配置，或添加了一些自定义的布局。这将会造成代码冲突。</p><p>因此我们需要独立开两条分支:</p><ul><li><code>master</code> 分支是官方发布的正式版本，我们不去修改 <code>master</code> 分支的中的任何文件。</li><li>另一条是我们自己创建的新分支，笔者命名为 <code>customize</code>, 言下之意为该分支含有我们自定义的修改，包括私人配置等。</li></ul><p>除此之外，由于主题配置文件(<code>theme/next/_config.yml</code>)中含有某些应用的 <code>appid</code> 或者 <code>secret</code>，这些配置不应该被其他人随意看到以防冒名滥用。因此我们应该将该项目额外添加一个 <code>remote</code> 来保存我们的私人配置。 具体操作如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时已经下载到了主题文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换新分支</span></span><br><span class="line">git checkout -B customize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行主题配置或其他修改操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交改动(未推送)</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;chg: 修改为自定义配置&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个名为 userRepo(名字可以自己定义，只要自己能搞清是哪个来源即可) 的新 remote，</span></span><br><span class="line">git remote add userRepo git@github.com:anran758/hexo-xxx-next.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上游(即以后使用 git pull/status 时默认拉取 userRepo 源的 customize 分支)，并推送指定 remote</span></span><br><span class="line">git push -u userRepo customize</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如此就完成了代码的追踪，以后使用 <code>next</code> 主题就不是从 <code>hexo-theme-next</code> 中获取了，而是我们自己的私人仓库 <code>hexo-xxx-next</code> 中获取，安装方式是一样的。</p><h2 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h2><h3 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h3><p>前文说过我们将源码托管的需求之一就是为了解决代码合并的问题，为了体验新版本的特性，我们需要将新版本的代码合并进我们的分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 origin/master 获取最新版本的代码</span></span><br><span class="line"><span class="comment"># 理论上我们不修改 master 分支的代码不会发生冲突</span></span><br><span class="line">git fetch origin</span><br><span class="line">git pull --no-commit origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至 customize 分支</span></span><br><span class="line">git checkout customize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查本地是否有文件改动，有的话需要进行 commit 提交或者使用 git stash 藏起来</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并代码</span></span><br><span class="line">git merge master</span><br></pre></td></tr></table></figure><p>我们最起码修改过 _config.yml，因此会发生冲突也不奇怪，有冲突咱们就解决冲突。</p><p>如果你使用 vscode 进行编码，侧边栏有一个源代码管理，打开它可以看到冲突的文件。</p><p>打开冲突的文件，判断冲突项确定要保留(删除)的代码，解决冲突后，提交到缓存区(git add .(file))。缓冲区有本次升级所涉及的代码，可以大致预览一下本次的更新都做了什么事</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将缓冲区的文件提交至 commit</span></span><br><span class="line">git commit -m <span class="string">&quot;Merge release v(version) into customize branch&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交代码</span></span><br><span class="line">git push</span><br><span class="line"><span class="comment"># Counting objects: 99, done.</span></span><br><span class="line"><span class="comment"># Delta compression using up to 4 threads.</span></span><br><span class="line"><span class="comment"># Compressing objects: 100% (57/57), done.</span></span><br><span class="line"><span class="comment"># Writing objects: 100% (99/99), 12.86 KiB | 346.00 KiB/s, done.</span></span><br><span class="line"><span class="comment"># Total 99 (delta 71), reused 64 (delta 42)</span></span><br><span class="line"><span class="comment"># remote: Resolving deltas: 100% (71/71), completed with 41 local objects.</span></span><br><span class="line"><span class="comment"># To github.com:anran758/hexo-xxx-next.git</span></span><br><span class="line"><span class="comment">#    4a70c18..54805a2  customize -&gt; customize</span></span><br></pre></td></tr></table></figure><p>升级完后运行本地服务器最后会输出一条：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Congratulations! Your are using the latest version of theme NexT.</span><br></pre></td></tr></table></figure><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>若最新版本的 <code>Hexo</code> 引入了你想要的新功能，你想更新 <code>Hexo</code> 版本的话，首先确定版本号变动的是哪一位。</p><p><code>package.json</code> 的版本号格式是数字由点分隔，如 <code>主版本号.功能版本号.补丁版本号</code>。若更新是主(大)版本号的话，则需要先修改 <code>dependencies</code> 依赖中 <code>hexo</code> 的主版本号，再输入 <code>npm update</code>。</p><p>以下是 <code>hexo@v3</code> 更新为 <code>hexo@v4</code> 的示例:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   // ...</span><br><span class="line">   &quot;dependencies&quot;: &#123;</span><br><span class="line"><span class="addition">+    &quot;hexo&quot;: &quot;^4.0.0&quot;,</span></span><br><span class="line"><span class="deletion">-    &quot;hexo&quot;: &quot;^3.9.0&quot;,</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令行输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx hexo -v</span></span><br><span class="line">hexo: 3.9.0</span><br><span class="line">hexo-cli: 2.0.0</span><br><span class="line">os: Darwin 17.7.0 darwin x64</span><br><span class="line">node: 12.13.1</span><br><span class="line">v8: 7.7.299.13-node.16</span><br><span class="line">uv: 1.33.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.39.2</span><br><span class="line">napi: 5</span><br><span class="line">llhttp: 1.1.4</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">openssl: 1.1.1d</span><br><span class="line">cldr: 35.1</span><br><span class="line">icu: 64.2</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 12.1</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm update</span></span><br><span class="line">+ hexo@4.2.0</span><br><span class="line">added 71 packages from 90 contributors, updated 14 packages and moved 5 packages in 12.513s</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npx hexo -v</span></span><br><span class="line">hexo: 4.2.0</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">os: Darwin 17.7.0 darwin x64</span><br><span class="line">node: 12.13.1</span><br><span class="line">v8: 7.7.299.13-node.16</span><br><span class="line">uv: 1.33.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.39.2</span><br><span class="line">napi: 5</span><br><span class="line">llhttp: 1.1.4</span><br><span class="line">http_parser: 2.8.0</span><br><span class="line">openssl: 1.1.1d</span><br><span class="line">cldr: 35.1</span><br><span class="line">icu: 64.2</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 12.1</span><br></pre></td></tr></table></figure><p>若只是后面两位版本号有变更的话，仅需输入 <code>npm update</code> 即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单单从升级版本来合并代码的角度来看，实际上本地 commit 也可以做这种事，将 <code>commit</code> 储存在本地(<code>.git</code>)中不提交远端也是没有问题的，<code>OneDrive</code>也可以完成同步。</p><p>但从安全和可调试的角度来看，<code>OneDrive</code>的同步方式存在一定风险(懒的代价)。使用 <code>git</code> 版本控制可以清晰看到每一次提交的修改，不会多出奇奇怪怪的东西。必要的时候还可以进行回滚，相对来说更安全。但这种方案需要使用者了解一定的 <code>git</code> 知识。</p><p>从操作步骤来看，使用的 <code>git</code> 同步方案会产生多个仓库，这些仓库一般是拥有权限的人才能查看(修改)源码。比如完成了本文中两个仓库源码同步后，在另一台设备初次同步的步骤是：</p><ol><li>通过 <code>git clone</code> 下载 blog 本体。</li><li>通过 <code>git clone</code> 下载私人仓库 <code>next theme</code> 到 <code>/theme</code> 目录下。</li><li>进入两个仓库内安装对应的依赖</li></ol><p>以上可以在 blog 项目下的 <code>package.json</code> 设置 <code>scripts</code>，通过一条命令来完成这些事。</p><p>由此我们可以看到，相比 <code>OneDrive</code> 的懒人方案，<code>git</code> 方案的操作步骤会更繁琐。更新方式也从自动更新变成手动更新。</p><p>两者种方案各有利弊，具体采用什么方案就看朋友们的习惯啦~</p><hr><p>本文涉及到的 <code>git</code> 命令都是可以在 <a href="https://github.com/anran758/Front-End-Lab/tree/master/git">git 速查方案</a> 查找相应的解释。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
            <tag> Next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将 JSON 数据格式输出至页面上</title>
      <link href="/blog/2019/08/24/js-%E5%B0%86JSON%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E8%87%B3%E9%A1%B5%E9%9D%A2%E4%B8%8A/"/>
      <url>/blog/2019/08/24/js-%E5%B0%86JSON%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E8%87%B3%E9%A1%B5%E9%9D%A2%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p><code>JSON</code> 是一种轻量级的数据交换格式，它有键值对集合(js 中的对象)和数组两种结构。<code>JSON</code>是一个通用的格式，在前后端语言中都能跟该 <code>JSON</code> 打交道。</p><p>有时候我们需要将 <code>JSON</code> 格式输入至页面展示的需求，其中还需要保持一定的索引，那么该如何实现呢？</p><span id="more"></span><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们将对象转为 <code>JSON</code> 字符串时会经常使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify</a> 这个 API，其实该方法就内置有格式化的参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfo = &#123;<span class="attr">name</span>: <span class="string">&#x27;anran758&#x27;</span>,<span class="attr">github</span>: <span class="string">&#x27;https://github.com/anran758&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">JSON</span>.stringify(userInfo, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br><span class="line"><span class="comment">// &quot;&#123;↵  &quot;name&quot;: &quot;anran758&quot;,↵  &quot;github&quot;: &quot;https://github.com/anran758&quot;↵&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们第一个参数(<code>value</code>)传入了一个需要序列化的对象。第二个参数是<code>replacer</code>，用以对属性转换和处理，由于我们不需要额外的处理，因此传入一个<code>null</code>；第三个参数则是空格索引的个数，封顶是<code>10</code>，<code>0</code>或不传则没有空格。</p><p>在控制台打印出信息后，我们可以看的出来格式化的数据是带换行符，并且有缩进的格式。接下来我们就要考虑如何输出到页面中。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>只要学过<code>HTML</code>的朋友都知道，我们直接将数据输入至<code>HTML</code>中，空格缩进会被浏览器给忽略掉的。因此不能输入到 <code>&lt;div&gt;</code> 中。这时候又想到，<code>JSON</code>格式实际上也算是代码的一种，那能不能输入至雷士代码块的标签中呢？答案是可以的。</p><p><code>HTML</code> 中有两个标签可以展示源代码: <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 。它们之间不同之处在于:</p><ul><li><code>&lt;pre&gt;</code> 表示预定义<strong>格式文本</strong>，按照原文件中的编排，以等宽字体的形式展现出来，<strong>文本中的空白符（比如空格和换行符）都会显示出来</strong>。</li><li><code>&lt;code&gt;</code> 则是呈现一段计算机代码，它以浏览器的默认等宽字体显示，<strong>但并不一定会完整呈现原来的格式</strong>。</li></ul><p>这些标签知识实际上算是比较冷门的知识，或许远古的面试题会考这种知识点，平时很少会遇到。但是如果你经常使用<code>markdown</code>的话，那么这些标签在<code>markdown</code>中有不同的别名:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比如 markdown 语法中的 ``，实际上等同于 <span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span> 标签。实际作用是短代码块标签</span><br><span class="line"></span><br><span class="line">而 markdown 语法中的长代码块就等同于 <span class="code">`&lt;pre&gt;`</span> 标签，不同的博客或者网站的应用中还可以对 <span class="code">`&lt;pre&gt;`</span> 加类名，用以展示不同的语言的语法高亮。</span><br></pre></td></tr></table></figure><p>通过三者之间的对比可以看出，只有 <code>&lt;pre&gt;</code> 才是符合我们需求的。</p><iframe height="300" style="width: 100%;" scrolling="no" title="代码格式输出 - demo1" src="//codepen.io/anran758/embed/NWKdVYQ/?height=300&theme-id=32168&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/NWKdVYQ/'>代码格式输出 - demo1</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p>确定好展示的方式后，就可以考虑进一步扩展格式化的功能。比如对象中还有属性是 <code>JSON</code> 字符串的话，咱也进一步的解析，直至最底层。想实现这种功能需要编写一个递归函数，考虑如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPlainObject = <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(v) === <span class="string">&quot;[object Object]&quot;</span></span><br><span class="line"><span class="keyword">const</span> isString = <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(v) === <span class="string">&quot;[object String]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式 JSON 字符串为对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author <span class="variable">anran758</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123; any &#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatJsonStrAsObj</span>(<span class="params">sample</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> temp = sample;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isString(temp)) &#123;</span><br><span class="line">    <span class="comment">// 因为有解析失败的可能，使用 try catch 做相应处理</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      temp = <span class="built_in">JSON</span>.parse(temp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">      <span class="comment">// parse error，return this sample</span></span><br><span class="line">      <span class="keyword">return</span> sample;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isPlainObject(temp)) &#123;</span><br><span class="line">    temp = &#123; ...temp &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.keys(temp).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> item = temp[key];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 字符串或者对象进行递归确认</span></span><br><span class="line">      <span class="keyword">if</span> (isString(item) || isPlainObject(item)) &#123;</span><br><span class="line">        temp[key] = formatJsonStrAsObj(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 JSON 字符串转换为带缩进的字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>sample JSON 字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>[indnt=2] 缩进数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatJSONIndnt</span>(<span class="params">sample, indnt = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newSample = formatJsonStrAsObj(sample);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isString(newSample)) <span class="keyword">return</span> newSample;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(newSample, <span class="literal">null</span>, indnt);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="keyword">return</span> newSample.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">  name: <span class="string">&#x27;anran758&#x27;</span>,</span><br><span class="line">  avatar: <span class="string">&#x27;https://xxx&#x27;</span>,</span><br><span class="line">  detail: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    desc: <span class="string">&#x27;some description&#x27;</span>,</span><br><span class="line">    level: <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> data = formatJSONIndnt(info);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接将 data 输出至 dom 中</span></span><br></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>上文讲了如何将数据输出至页面，以及扩展格式化功能的示例。接下来讲解输入方面的应用。</p><p>当用户从别的地方复制数据想粘贴至输入框时，可以在输入框上设置监控事件，触发事件后尝试帮用户格式化数据，示例代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span> <span class="attr">class</span>=<span class="string">&quot;preview pre&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;textarea&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">  name: <span class="string">&#x27;anran758&#x27;</span>,</span><br><span class="line">  avatar: <span class="string">&#x27;https://xxx&#x27;</span>,</span><br><span class="line">  detail: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    desc: <span class="string">&#x27;some description&#x27;</span>,</span><br><span class="line">    level: <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> data = formatJSONIndnt(info);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textarea = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.textarea&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> preview = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.pre&#x27;</span>);</span><br><span class="line"></span><br><span class="line">preview.innerHTML = data;</span><br><span class="line">textarea.addEventListener(<span class="string">&#x27;paste&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 阻止默认事件</span></span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">const</span> value = (e.clipboardData || <span class="built_in">window</span>.clipboardData).getData(<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里使用了上面定义的函数，进行格式化数据</span></span><br><span class="line">  e.target.value = formatJSONIndnt(value, <span class="number">2</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.preview</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f5fcff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3eeff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.textarea</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;SFMono-Regular&#x27;</span>, Consolas, <span class="string">&#x27;Liberation Mono&#x27;</span>, Menlo, Courier,</span><br><span class="line">    monospace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.preview</span> + <span class="selector-class">.preview</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe height="300" style="width: 100%;" scrolling="no" title="代码格式输入 - demo1" src="//codepen.io/anran758/embed/oNvBrWm/?height=300&theme-id=32168&default-tab=js,result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/anran758/pen/oNvBrWm/'>代码格式输入 - demo1</a> by anran758  (<a href='https://codepen.io/anran758'>@anran758</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre"><code>&lt;pre&gt;</code> - HTML（超文本标记语言） | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code"><code>&lt;code&gt;</code> - HTML（超文本标记语言） | MDN</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从搭建到部署，快速构建一个私人博客</title>
      <link href="/blog/2019/08/19/hexo-blog/"/>
      <url>/blog/2019/08/19/hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>有时候我们希望有一个受控的博客，来记录或分享一些东西。这个博客的主题内容由你自己来决定，可以是技术分享(编程、汉化分享等)，也可以是生活感想。</p><img data-src="/blog/2019/08/19/hexo-blog/banner.png" class=""><span id="more"></span><p>本文将介绍一个可以迅速搭建并部署的受控博客。阅读本文前，希望你对以下知识点有所了解:</p><ul><li><code>git(版本控制)</code> 的基础使用</li><li><code>markdown</code> 的使用</li></ul><h2 id="为什么要搭建博客"><a href="#为什么要搭建博客" class="headerlink" title="为什么要搭建博客"></a>为什么要搭建博客</h2><p>在线类博客有很多选择，为什么我们需要从零搭建新的博客呢？自己搭建的博客有什么好处吗？</p><p>首先，前文所提的 <strong>“博客受控”</strong>，指的就是能够自己控制的博客的样式、内容等，自己想怎么改就怎么改。</p><p>内容受控是指我们知道在线类的博客是受平台限制的，这意味着你所发表的内容是需要受审才能发出的，一些敏感的技术词汇，该篇文章都可能会被和谐或被删除。但在自己搭建博客就没有这样的问题，最起码能保留源文件。</p><p>其二，博客的样式是受控的。像著名在线博客<code>CSDN</code>上一些博主的文章确实是有学习参考的价值，但问题的是该站广告是在是太多了，字体和排版的阅读体验并不太好。但如果是自己搭建的博客的话，就可以自己着手优化这些问题。</p><p>但博客的搭建还需要我们从各方面考虑利弊。平台类博客会有相应的推荐系统，会对同类型文章相互引流，在 SEO 方面会做得比我们好。</p><p>个人搭建的博客，刚起步时的浏览量并不高，但是可以通过<code>SEO</code>等方式来逐步增加自己网站的权重。或者提高博客的质量和干货，读者认为文章有价值，自然会收藏起来形成熟客。</p><p>那么博客能写什么东西呢？在日常生活中，有很多知识点是呈碎片状，写博客的本质上就是对自己知识的一种梳理，然后再将这些知识分享出来，可能会有对这方面知识有疑惑，或者想找到解决方案，自身分享出来的东西能给读者做一定的参考。同时这也会是一个良性循环，因为分享的同时，你可能也需要去查询一些资料，同时也可以找到别人遇到过并分享出来的解决方案，是一个相互收益的过程。</p><p>我们的基本需求是梳理与分享，那么更应该把注意力放在内容本身，网站布局的排版样式等则是增加读者阅读体验的问题。因此我们可以使用现成的博客框架快速完成这些事。</p><p>博客框架有很多种选择，笔者选择的是 <a href="https://hexo.io/zh-cn/">Hexo</a>，因为它足够便捷优雅。</p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p><code>Hexo</code> 依赖 <a href="https://nodejs.org/en/">Node.js</a> 和 <code>NPM</code>包管理，<code>Node.js</code> 安装后一般会自带<code>NPM</code>。</p><p>我们打开终端(<code>Windows PowerShell / cmd.exe</code>、<code>bash</code>、<code>macOS</code> 里的终端)，输入以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查 npm 是否安装成功</span></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 hexo cli，</span></span><br><span class="line"><span class="comment"># 如果安装速度过慢的话，可以安装国内的淘宝镜像</span></span><br><span class="line"><span class="comment"># 在命令行输入 ` npm install -g cnpm --registry=https://registry.npm.taobao.org`</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 hexo 是否安装成功，并查看版本</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>依赖安装成功后，我们可以在命令行输入 <code>hexo help</code> 查看使用方式(描述是英文，示例部分笔者将其转为中文):</p><p><strong><code>Usage: hexo &lt;command&gt;</code></strong></p><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td><code>help</code></td><td>获取命令的帮助</td></tr><tr><td><code>init</code></td><td>创建一个新的 Hexo 文件夹</td></tr><tr><td><code>version</code></td><td>显示版本信息</td></tr></tbody></table><p>使用 <code>hexo help [command]</code> 可以查看更多的信息, 如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="built_in">help</span> init</span><br><span class="line"><span class="comment"># Usage: hexo init [destination]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Description(描述):</span></span><br><span class="line"><span class="comment"># 在指定的路径或当前目录中创建一个新的Hexo文件夹.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arguments（参数）:</span></span><br><span class="line"><span class="comment">#  destination  文件夹路径。 如果未指定，则在当前文件夹中初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Options（选项）:</span></span><br><span class="line"><span class="comment">#  --no-clone    复制文件而不是从GitHub克隆</span></span><br><span class="line"><span class="comment">#  --no-install  跳过 npm 依赖安装(默认初始化会自动装依赖)</span></span><br></pre></td></tr></table></figure><p><strong>全局选项：</strong></p><table><thead><tr><th>options</th><th>description</th></tr></thead><tbody><tr><td><code>--config</code></td><td>指定配置文件而不是使用默认的 <code>_config.yml</code></td></tr><tr><td><code>--cwd</code></td><td>指定 CWD</td></tr><tr><td><code>--debug</code></td><td>显示终端中的所有详细消息</td></tr><tr><td><code>--draft</code></td><td>显示草稿帖子</td></tr><tr><td><code>--safe</code></td><td>禁用所有插件和脚本</td></tr><tr><td><code>--silent</code></td><td>在控制台上隐藏输出</td></tr></tbody></table><p>在官网 <a href="https://hexo.io/zh-cn/docs/commands">commands</a> 中可以找到全部完整的解释。</p><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>在终端上，我们可以看到有一个 <code>init</code> 的命令，我们可以使用这个命令来初始化 <code>hexo</code> 项目，但再建站之前我们需要先决定在哪里存放博客源代码。</p><p>我推荐使用如微软的 <a href="https://onedrive.live.com/about/en-US/">OneDrive</a>（win10 系统自带）之类的云文件夹。你可以白嫖它 5G 的云储存空间。当你在<code>设备A</code>下修改了文件，它会自动同步到云端上。切换回<code>设备B</code>并登录账号后，它又会自动从云端下载数据，是一个便捷的方式。</p><p>但值得注意的是 <code>OneDrive</code> 毕竟是国外服务，由于众所周知的原因可能需要科学上网才能使用。该方式只是数据备份与同步的问题，不使用它也不会影响下文的构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你是 unix 系统的话，可以使用该命令查看当前路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># /Users/anran/OneDrive</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化文件夹名为 blog</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="comment"># INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span></span><br><span class="line"><span class="comment"># other install info ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入文件夹</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure><p>安装完成后目录如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml   (网站的配置信息)</span><br><span class="line">├── package.json  (应用依赖信息)</span><br><span class="line">├── node_modules  (依赖包)</span><br><span class="line">├── scaffolds     (模板文件)</span><br><span class="line">├── source        (资源文件夹是存放用户资源的地方)</span><br><span class="line">|   ├── _drafts      (草稿文件夹，刚初始化时可能不存在)</span><br><span class="line">|   └── _posts       (文章&#x2F;帖子源码列表)</span><br><span class="line">└── themes        (主题)</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>建站完成后我们需要进行 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a>，<code>hexo</code> 中主要有两项配置。一项是<code>站点配置文件</code>，路径为 <code>/_config.yml</code>。另一项是<code>主题配置文件</code>,路径是<code>/themes/(下载的主题)/_config.yml</code>。</p><p>我们可以先在<code>站点配置文件</code>修改以下基础选项:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站主标题，SEO元素之一</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#网站副标题，可选</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站描述, SEO元素之一，用于告诉搜索引擎关于这个站点的描述</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">分享生活、分享技术</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站的关键词，如:</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Front</span> <span class="string">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站作者</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">anran758</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站使用的语言, 由于 Hexo 具备多语言配置，默认为英文，我们需要修改回中文语言</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>初始化项目后默认会安装相关的依赖，接着在命令行输入如下命令来<strong>运行博客</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务，默认端口为 4000，启动服务后可以在浏览器输入 `http://localhost:4000` 查看效果</span></span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># or 简写方式</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以使用 -p, 指定 9000 端口</span></span><br><span class="line">hexo s -p 9000</span><br></pre></td></tr></table></figure><img data-src="/blog/2019/08/19/hexo-blog/preview-blog.jpg" class=""><h3 id="写作步骤"><a href="#写作步骤" class="headerlink" title="写作步骤"></a>写作步骤</h3><p>我们一般通过命令行来操作博客:</p><p>比如创建文章的方式如下: <code>hexo new [layout] &lt;title&gt;</code></p><p><code>layout</code>是指定布局，<code>Hexo</code>默认有<code>post</code>、<code>page</code> 和 <code>draft</code> 三种布局，它们分别对应不同的路径。我们也可以自定义布局，但实际页面会和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p><p>按照我个人的写作习惯，通常写作步骤是：</p><ol><li>创建草稿(<code>drafts</code>)</li><li>在草稿上进行写作</li><li>整理细节并在本地服务器上查看效果(<code>server</code>)</li><li>发布至正式的帖子上</li><li>生成静态文件并部署(后续讲)</li></ol><hr><p><strong>创建草稿(<code>drafts</code>)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft <span class="string">&quot;My first post&quot;</span></span><br><span class="line"><span class="comment"># INFO  Created: ~/blog/source/_drafts/My-first-post.md</span></span><br></pre></td></tr></table></figure><p>在初次创建草稿会生成一个名为 <code>_drafts</code> 的草稿文件夹，接着该文件夹下有一个我们刚刚创建的草稿，名为 <code>My-first-post.md</code> 的 <code>markdown</code> 文件，文件内容如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: My first post</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>在本地服务器查看草稿(<code>drafts</code>)</strong></p><p>我们可以启动本地服务器一边写作一边预览,但默认情况下草稿是不会被展示出来的，如果你想查看草稿的话，可以输入以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s -p 9000 --draft</span><br><span class="line"><span class="comment"># INFO  Start processing</span></span><br><span class="line"><span class="comment"># INFO  Hexo is running at http://localhost:9000 . Press Ctrl+C to stop.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要退出服务器，按住 control + c</span></span><br></pre></td></tr></table></figure><img data-src="/blog/2019/08/19/hexo-blog/preview.jpg" class=""><p><strong>发布草稿(<code>publish</code>)</strong></p><p>如果我们在本地服务器上校队完草稿细节后，可以将草稿发布为文章，否则在后续生成博客静态文件时不会被打包出来:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo publish [layout] &lt;filename&gt;</span></span><br><span class="line"><span class="comment"># 将草稿发布为文章</span></span><br><span class="line">$ hexo publish post My-first-post</span><br><span class="line"><span class="comment"># INFO  Published: ~/blog/source/_posts/My-first-post.md</span></span><br></pre></td></tr></table></figure><p>输入命令后你可以发现发布的文章被转移到了<code>source/_posts/</code>上，这样就完成了本地的文章发布。</p><p><strong>生成静态文件(<code>generate</code>)</strong></p><p><code>Hexo</code>框架的一项工作就是将源文件 <code>markdown</code> 最后生成为 <code>HTML</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成文件</span></span><br><span class="line">$ hexo generate</span><br><span class="line"><span class="comment"># INFO  Start processing</span></span><br><span class="line"><span class="comment"># INFO  Files loaded in 275 ms</span></span><br><span class="line"><span class="comment"># INFO  Generated: 2019/08/11/My-first-post/index.html</span></span><br><span class="line"><span class="comment"># INFO  1 files generated in 152 ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写形式</span></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控文件变化，并生成静态文件</span></span><br><span class="line">$ hexo g --watch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成文件并部署(部署后面单独章节来讲解)</span></span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>我们熟悉完博客系统的操作后，接下来就是美化博客。<code>Hexo</code> 支持主题，我们可以根据<a href="https://hexo.io/zh-cn/docs/themes.html">官网的创建主题教程</a>自己来设计，也可以直接在<a href="https://hexo.io/themes/">主题商城</a> 中找现成的主题。这里以笔者推荐的主题 <code>Next</code> 为例:</p><img data-src="/blog/2019/08/19/hexo-blog/hexo.jpg" class=""><p><img data-src="https://user-images.githubusercontent.com/16272760/61057395-d2deb000-a427-11e9-8e28-f348fe181795.png" alt="theme next"></p><p>笔者一开始使用 <code>next</code> 主题时，版本才 <code>5.x</code>，当时仍有很多博客所需的东西没有集成。如今回头一看，发现 <code>next</code> 升级了好几个大版本。github 主题仓库也迁移至了 <code>https://github.com/theme-next</code> 里，乃至文档都有两个不同的版本。</p><p><a href="https://theme-next.org/">新文档</a>是采用它自身主题的一个<code>scheme</code>来建成，是全英文文档，可以保证信息资料是最新的。<a href="http://theme-next.iissnan.com/">旧文档</a>布局便于阅读，同时是中文文档，大多参数也能在该文档找到，但毕竟没有再过多的维护，建议还是以最新文档为参考。</p><p>安装主题可以通过<code>git clone</code>克隆至<code>blog/theme/</code>下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># /Users/anran/OneDrive/Blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动主题前需要清除缓存与已部署的文件</span></span><br><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># clone 主题</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>接着在 <code>站点配置文件(/_config.yml)</code> 中启动 <code>theme</code>。再打开<code>主题配置文件(/themes/next/_config.yml)</code>选择 Scheme:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">theme:</span> <span class="string">landscape</span></span><br><span class="line"><span class="string">+</span> <span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /themes/next/_config.yml</span></span><br><span class="line"><span class="comment"># 提供三种模式</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br></pre></td></tr></table></figure><img data-src="/blog/2019/08/19/hexo-blog/start.jpg" class=""><p>评论、订阅、数据统计、SEO 等部分功能配置已经集成至 <code>next</code> 主题配置中，但大多还需要额外添加依赖还需要根据<a href="https://theme-next.org/docs/getting-started/">文档</a>来配置。<code>next</code> 在主题配置中集成了由于配置自定义项过多，读者可以根据自己所需添加相应的统计、SEO 相关的 <code>app key</code> 等就不进一步展开讲。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>我们使用<code>git</code>进行部署，可以将网站部署至私人服务器、也可以部署到免费的<code>github pages</code>上。本文将介绍部署至<code>github</code>的方法，如果你还没有<code>github</code>账号的话，那你需要先<a href="github.com">注册一个账号</a>。</p><p>步骤如下:</p><ol><li><p>访问<code>github.com</code>，点击<code>sign up</code>注册账号。</p></li><li><p>进入注册页，输入账号密码和邮箱，输入验证码!</p><img data-src="/blog/2019/08/19/hexo-blog/join-github.png" class=""></li><li><p>选择免费用户</p><img data-src="/blog/2019/08/19/hexo-blog/choose-free-account.jpg" class=""></li><li><p>接着是关于<code>github</code>推荐服务的调查，当然你也可以跳过它.</p><img data-src="/blog/2019/08/19/hexo-blog/img-1.jpg" class=""></li><li><p>验证完毕后，它会提示你创建一个仓库，这里我们先创建一个<code>blog</code>。</p><img data-src="/blog/2019/08/19/hexo-blog/create-blog.jpg" class=""></li><li><p>复制仓库链接，copy 至 <code>站点配置文件(/_config.yml)</code>里。同时安装<code>hexo-deployer-git</code>的依赖：</p><img data-src="/blog/2019/08/19/hexo-blog/copy.jpg" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://yourname.github.io/blog</span>   <span class="comment"># 修改为 github io 的地址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span>                           <span class="comment"># 要将资源映射到仓库名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourname/blog.git</span>  <span class="comment"># blog 的 git 地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span>                            <span class="comment"># 发布至 gp-pages 分支，如果该分支不存在，就会自动创建它</span></span><br></pre></td></tr></table></figure></li><li><p>接着开始部署。如果你还没配置<code>git</code>账号的话，它会提示你输入账号密码，输入正确的账号密码后就部署成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 或者使用`hexo d -g`, 两者是等价的效果</span></span><br><span class="line">hexo g -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># *** Please tell me who you are.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run</span></span><br><span class="line"><span class="comment">#  git config --global user.email &quot;you@example.com&quot;</span></span><br><span class="line"><span class="comment">#  git config --global user.name &quot;Your Name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to set your account&#x27;s default identity.</span></span><br><span class="line"><span class="comment"># Omit --global to set the identity only in this repository.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fatal: unable to auto-detect email address (got &#x27;29625@DESKTOP-0R7P8H4.(none)&#x27;)</span></span><br><span class="line"><span class="comment"># Logon failed, use ctrl+c to cancel basic credential prompt.</span></span><br><span class="line"><span class="comment"># Username for &#x27;https://github.com&#x27;: anran758</span></span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> 621 ms</span><br><span class="line">INFO  0 files generated <span class="keyword">in</span> 424 ms</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend <span class="built_in">dirs</span>...</span><br><span class="line"></span><br><span class="line">INFO  Congratulations! Your are using the latest version of theme NexT.</span><br><span class="line">Enumerating objects: 131, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (131/131), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (91/91), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (131/131), 257.72 KiB | 2.48 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 131 (delta 43), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (43/43), <span class="keyword">done</span>.</span><br><span class="line">To https://github.com/yourname/blog.git</span><br><span class="line"> * [new branch]      HEAD -&gt; gh-pages</span><br><span class="line">Branch <span class="string">&#x27;master&#x27;</span> <span class="built_in">set</span> up to track remote branch <span class="string">&#x27;gh-pages&#x27;</span> from <span class="string">&#x27;https://github.com/yourname/blog.git&#x27;</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有配置全局 git 账号的话可以先配置，不然下次部署还是会提示你输入账号密码</span></span><br><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>接着在我们创建的<code>blog</code>下进入<code>settings</code>项，设置 <code>github pages</code> 为 <code>gh-pages</code> 也就是之前在配置里设置的分支即可。这样就可以在线上查看我们部署的状况啦~</p></li></ol><img data-src="/blog/2019/08/19/hexo-blog/settings.jpg" class=""><img data-src="/blog/2019/08/19/hexo-blog/githu-pages.png" class=""><img data-src="/blog/2019/08/19/hexo-blog/finish.jpg" class=""><h2 id="优化与扩展"><a href="#优化与扩展" class="headerlink" title="优化与扩展"></a>优化与扩展</h2><p>下面介绍一下文档中没有提到的相关问题与扩展。</p><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p><code>next</code> 有内置本地搜索的配置项，但文档上说明需要额外安装 <code>hexo-generator-searchdb</code> 这个依赖。但该项目现在已经被归档了，它还存在一些问题没有修复。你可以使用 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 来代替它。接者在<code>站点配置文件</code>添加如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Expansion: hexo-generator-search</span></span><br><span class="line"><span class="comment"># 站内搜索</span></span><br><span class="line"><span class="comment"># https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>在使用本地搜索功能时，你可能会遇到以下错误：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This page contains the following errors:</span><br><span class="line">error on line 86 at column 35: Input is not proper UTF-8, indicate encoding !</span><br><span class="line">Bytes: 0x08 0xE8 0xB7 0x9F</span><br><span class="line">Below is a rendering of the page up to the first error.</span><br></pre></td></tr></table></figure><p>出现这种错误原因大多是因为搜狗输入法带来的特殊字符串，我们在源码中替换它即可。打开编辑器（比如<code>vscode</code>），在全局搜索错误信息<code>Bytes</code> 第一个字节 <code>/x08</code> 替换为空。</p><h3 id="github-emoji"><a href="#github-emoji" class="headerlink" title="github emoji"></a>github emoji</h3><p>如果你希望在博客中支持 <code>emoji</code> 的话，你可以安装 <a href="https://github.com/crimx/hexo-filter-github-emojis">hexo-filter-github-emojis</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use Github Emojis</span></span><br><span class="line"><span class="comment"># Docs: https://github.com/crimx/hexo-filter-github-emojis</span></span><br><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">unicode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">localEmojis:</span></span><br></pre></td></tr></table></figure><h3 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h3><p>为了让搜索引擎能找到我们的网站，我还需要给搜索引擎的网络蜘蛛提供<strong>站点地图文件</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo sitemap 生成器以及百度的 sitemap 生成器</span></span><br><span class="line">npm install hexo-generator-sitemap hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>依赖安装完后在<code>站点配置文件</code>中添加如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Expansion: hexo-generator-sitemap</span></span><br><span class="line"><span class="comment"># generate sitemap.</span></span><br><span class="line"><span class="comment"># https://github.com/hexojs/hexo-generator-sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Expansion: hexo-generator-baidu-sitemap</span></span><br><span class="line"><span class="comment"># 针对百度进行优化的 sitemap，作者还是建议手动提交至百度会比较好</span></span><br><span class="line"><span class="comment"># https://github.com/coneycode/hexo-generator-baidu-sitemap</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure><h3 id="设置无分页的归档"><a href="#设置无分页的归档" class="headerlink" title="设置无分页的归档"></a>设置无分页的归档</h3><p>如果你期望将归档目录在一页中全部加载出来，那么你可以添加如下配置: </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-archive</span></span><br><span class="line"><span class="comment"># 该插件默认内置于 hexo 中，只需参考文档添加配置即可</span></span><br><span class="line"><span class="comment"># https://github.com/hexojs/hexo-generator-archive</span></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="图片的引入"><a href="#图片的引入" class="headerlink" title="图片的引入"></a>图片的引入</h3><p>在 <code>hexo</code> 中引用图片主要有两种方式：</p><ul><li>在本地通过资源文件夹引入</li><li>使用图床</li></ul><p>在本地资源的引入，需要修改 <code>_config.yml</code> 的配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p> 设置完选项后，以后每次使用 <code>hexo new [layout] &lt;title&gt;</code> 后就会生成一个同名的文件夹。然后可以使用 `</p>` 来引入图片资源:<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 例如插入一个 banner 图，hexo 会自动寻找同名文件夹下的文件 --&gt;</span><br><span class="line">&#123;% asset<span class="emphasis">_img banner.png banner %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">这里是一段示例内容。</span></span><br></pre></td></tr></table></figure><p>该方法的缺点是需要占用本地资源，如果你是使用 <code>git</code> 进行部署，因为使 <code>.git</code> 文件变大(即便删除了该文件，它还会存在 <code>git</code> 的 commit 信息中)。</p><p>第二种方式可以使用图床，免费图床有个问题就是服务可能会不稳定，风险不由自己掌控，相对没那么保险。但是它能节省空间，甚至在网络传输上下载速度更快。如果使用图床的话，可以尝试<a href="https://github.com/Suxiaogang/WeiboPicBed">新浪微博图床</a>，将插件下载至 <code>chrome</code>，登录后即可上传得到相应的 <code>url</code>.</p><h3 id="README"><a href="#README" class="headerlink" title="README"></a>README</h3><p>默认情况下，将源码生成部署至服务器会将上一次生成的数据覆盖掉。如果你期望在 <code>github</code>上保留一个 <code>README.md</code> 给读者看说明的话，可以通过 <code>_config.yml</code> 来设置它：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> [<span class="string">&#x27;images/loading.gif&#x27;</span>, <span class="string">&#x27;README.md&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="外链音乐播放器插件"><a href="#外链音乐播放器插件" class="headerlink" title="外链音乐播放器插件"></a>外链音乐播放器插件</h3><p>网易云音乐提供了一个外链音乐播放器，可以插入博客中，样式以及播放的歌单都是通过<code>url</code>控制的。我们稍微封装一下，添加如下代码：</p><figure class="highlight yml"><figcaption><span>/next/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网易云音乐插件</span></span><br><span class="line"><span class="comment"># 控制台: https://music.163.com/#/outchain/0/&#123;% music.id %&#125;/m/use/html</span></span><br><span class="line"><span class="comment"># 网易云音乐插件默认提供三种模式，不同模式设有不同宽高，样式也可能会略有不同。</span></span><br><span class="line"><span class="comment"># 如果你想调整默认的宽高的话，可以设置 width | height 覆盖原先 modal 的宽度</span></span><br><span class="line"><span class="comment"># modal: 1(310 X 430) | 2(310 X 90) | 3(278 | 32)</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">102842761</span>      <span class="comment"># 网易云分享的ID</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span>    <span class="comment"># 是否开启自动播放</span></span><br><span class="line">  <span class="attr">modal:</span> <span class="number">2</span>           <span class="comment"># 模式, 默认为 modal 2</span></span><br><span class="line">  <span class="comment"># width: 310       # 宽度, 默认为 modal 2</span></span><br><span class="line">  <span class="comment"># height: 90       # 高度, 默认为 modal 2</span></span><br></pre></td></tr></table></figure><p>添加 <code>netease-cloud-music.swig</code> 模板:</p><figure class="highlight html"><figcaption><span>/next/layout/_partials/sidebar/netease-cloud-music.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;##</span><br><span class="line"> # extend layout: 网易云音乐外链播放器</span><br><span class="line"> # @author anran758</span><br><span class="line"> #&#125;</span><br><span class="line">&#123;%- if theme.music and theme.music.enable %&#125;</span><br><span class="line">  &#123;# default size #&#125;</span><br><span class="line">  &#123;%- set music_model = theme.music.modal or 2 %&#125;</span><br><span class="line">  &#123;%- set music_width = 310 %&#125;</span><br><span class="line">  &#123;%- set music_height = 90 %&#125;</span><br><span class="line">  &#123;%- set music_padding = 20 %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;# default config #&#125;</span><br><span class="line">  &#123;%- set music_id = theme.music.id or 102842761 %&#125;</span><br><span class="line">  &#123;%- set music_auto = 0 %&#125;</span><br><span class="line">  &#123;%- if theme.music.autoplay %&#125;</span><br><span class="line">    &#123;%- set music_auto = 1 %&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if theme.music.width %&#125;</span><br><span class="line">    &#123;%- set music_width = theme.music.width %&#125;</span><br><span class="line">  &#123;%- elif music_model === 1 or music_model === 2 %&#125;</span><br><span class="line">    &#123;%- set music_width = 310 %&#125;</span><br><span class="line">  &#123;%- elif music_model === 3 %&#125;</span><br><span class="line">    &#123;%- set music_width = 278 %&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if theme.music.height %&#125;</span><br><span class="line">    &#123;%- set music_height = theme.music.height %&#125;</span><br><span class="line">  &#123;%- elif music_model === 1 %&#125;</span><br><span class="line">    &#123;%- set music_height = 430 %&#125;</span><br><span class="line">  &#123;%- elif music_model === 2 %&#125;</span><br><span class="line">    &#123;%- set music_height = 90 %&#125;</span><br><span class="line">  &#123;%- elif music_model === 3 %&#125;</span><br><span class="line">    &#123;%- set music_height = 32 %&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &lt;iframe</span><br><span class="line">    frameborder=&quot;no&quot;</span><br><span class="line">    border=&quot;0&quot;</span><br><span class="line">    marginwidth=&quot;0&quot;</span><br><span class="line">    marginheight=&quot;0&quot;</span><br><span class="line">    width=&quot;&#123;&#123; music_width + music_padding&#125;&#125;&quot;</span><br><span class="line">    height=&quot;&#123;&#123; music_height + music_padding &#125;&#125;&quot;</span><br><span class="line">    src=&quot;//music.163.com/outchain/player?type=0&amp;id=&#123;&#123; music_id &#125;&#125;&amp;auto=&#123;&#123; music_auto &#125;&#125;&amp;height=&#123;&#123; music_height &#125;&#125;&quot;</span><br><span class="line">    style=&quot;margin: 10px 0 50px;&quot;</span><br><span class="line">  &gt;<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>在 <code>layout/_macro/sidebar.swig</code> 中插入模板：</p><figure class="highlight html"><figcaption><span>layout/_macro/sidebar.swig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-overview-wrap sidebar-panel&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/sidebar/site-overview.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 插入下列代码 --&gt;</span></span><br><span class="line">  &#123;&#123; partial(&#x27;_partials/sidebar/netease-cloud-music.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123;- next_inject(&#x27;sidebar&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过值得注意的是，虽然插件能用，但由于博客渲染的是多页面，如果是跳到了别的页面，原先播放状态就会被破坏，从用户体验来看，这个功能并不太实用。</p><hr><p><code>Hexo</code> 的介绍就说到这里了，虽然还有一些技巧相关的内容，如果有读者感兴趣的话到时候再深入讲吧~</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[环境搭建] 从零开始配置前端开发环境</title>
      <link href="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/"/>
      <url>/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/</url>
      
        <content type="html"><![CDATA[<p>前段时间更换了设备，正好趁着这个机会来记录一下适合前端开发的一个环境，以及推荐提高效率的应用。</p><span id="more"></span><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p><strong><a href="https://nodejs.org/zh-cn/">Node.js</a></strong> 是<code>JavaScript</code>运行时，目前前端工程化必不可缺的一个环境。通常我们会选择稳定版本(LTS)进行下载。</p><p><strong><a href="https://www.npmjs.com/get-npm">NPM</a></strong> 是<code>javascript</code>的包管理工具，也是目前<code>Node.js</code>默认的包管理工具。一般下载了<code>Node.js</code>后会附带<code>npm</code>，不用专门的去下载。</p><p><strong><a href="https://github.com/yarnpkg/yarn">YARN</a></strong> 是<code>Fackbook</code>开源的依赖管理包，和<code>npm</code>是做同样的工作，但相比<code>npm</code>安装依赖的速度会更加迅速。两者都是讲依赖写入<code>package.json</code>中，在使用习惯上是相近的。</p><p><strong><a href="https://git-scm.com/downloads">Git</a></strong> 是最先进的代码版本控制软件。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="关于编辑器"><a href="#关于编辑器" class="headerlink" title="关于编辑器"></a>关于编辑器</h3><p>目前前端开发主流的编辑器有 <a href="https://www.sublimetext.com/3">sublimeText</a>、<a href="https://www.jetbrains.com/webstorm/">WebStorm</a>、<a href="https://code.visualstudio.com/">vscode</a>，三种主流器各有特点:</p><ul><li><code>sublimeText</code>是一个十分轻巧的编辑器，在 macOS 上下载该软件仅需 15.2MB. 由于轻巧的缘故，很多那你所需的环境需要安装相应的插件，比如你可能需要某个语言的语法高亮，因此你需要在 store 上找到相应插件来提高你开发体验。然后该编辑器是付费软件(虽然可以无限试用</li><li><code>webStorm</code> 是一个功能强大的编辑器，同时也是一个付费软件，并不像<code>sublimeText</code>那样可以无限试用，由于功能太过于齐全，一些低配置的电脑可能会吃不消。以上特点是群友对<code>webStorm</code>的评价，笔者没有使用该编辑器，不过多评论。</li><li><code>vsocde</code> 是由微软开源的一个编辑器，虽然是后起之秀，但开源后该编辑器的设计与体验迅速吸引了一大批用户。它内置了一些前端基础的开发环境，针对<code>Node.js</code>还可以进行短点调试。</li></ul><p>笔者一开始也是<code>sublimeText</code>用户，但自从使用了<code>vscode</code>后就再也回不去了，因为确实是太好用了!</p><p><code>vscode</code>其中有一个插件叫做 <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync">setiings sync</a> , 它可以将你的编辑器配置上传至<code>gist</code>。就算你换了一个全新的设备，下载<code>vscode</code>后，再下载该插件，传入<code>Token</code>后就可以同步你所有的配置，十分的方便~</p><p><code>vscode</code>的配置可以查看该文章: <a href="https://anran758.github.io/blog/2018/02/06/dev-zero-configuration-vscode/">[环境搭建] 从零开始配置 vscode</a></p><h3 id="关于浏览器"><a href="#关于浏览器" class="headerlink" title="关于浏览器"></a>关于浏览器</h3><p>前端的工作更多时候是与用户打交道，我们的工作产出通常在浏览器页面上呈现。</p><p>浏览器通常提供了开发者工具以供开发者调试，要选择浏览器作为调试可以先参考目前市面的浏览器份额： 目前市面上主流的浏览器主要就是<a href="https://www.google.com/intl/zh-CN/chrome/">chrome</a>、<a href="https://www.apple.com/cn/safari/">Safari</a>、<a href="https://www.apple.com/cn/safari/">IE/Edge</a>、<a href="opera">opera</a>、<a href="https://www.firefox.com.cn/">firefox</a>这五种浏览器。国内市场有<code>UC</code>浏览器等，但内核的大多都是采用<code>webkit</code>或者兼容低版本<code>IE</code>内核。</p><p>从 <a href="https://gs.statcounter.com/">statcounter</a> 上我们可以看到浏览器市场份额，选中 <strong>Edit Chart Data</strong>, 再选择 <code>Region</code> 为 <code>China</code>, 我们就能看到中国浏览器市场份额的数据, 以 <strong>2018.07 - 2019.07</strong> 的趋势为例:</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-1.jpg" class=""><p>从统计数据来看目前主要的趋势还是以<code>chrome</code>所使用的<code>webkit</code>内核作为主流，同时<code>chrome</code>的开发者工具对于开发人员十分的友好，因此有很多的开发者选择了该浏览器作为首选的调试工具。<code>chrome</code>还有一个便利就是登陆了谷歌账号后，可以在别的机器上进行同步插件和配置。</p><p>打开<code>chrome</code>，右键页面并选中 “<strong>检查</strong>“即可打开开发者工具，<code>chrome</code>的具体使用参考下面几篇文章:</p><ul><li><a href="https://support.google.com/chrome/answer/157179?hl=zh-Hans">Chrome 键盘快捷键</a></li><li><a href="http://wiki.jikexueyuan.com/project/chrome-devtools/">Chrome 开发工具指南</a></li></ul><h3 id="关于设计图"><a href="#关于设计图" class="headerlink" title="关于设计图"></a>关于设计图</h3><p>每个团队的设计师提供的设计图可能是不一致的，有些团队的设计师可能使用<code>Skitch</code>, 一个可以直接导出为<code>html</code>文件的设计图、有些则直接提供<code>PSD</code>文件。</p><p>如果要在两者当中选择，那么我更喜欢<code>PSD</code>的设计图。虽然<code>Skitch</code>导出的设计图可以直接查看每个元素的尺寸，但没有标注和测量的功能。<code>PSD</code>文件通常是源文件，可以在设计软件中打开，可以查看具体设计的详细信息。</p><p>打开<code>PSD</code>文件通常有两种方式：</p><ul><li><code>Photoshop</code>这个著名的设计软件就不必再多说了吧，优点是功能齐全，你想要的这里都有，缺点是具备一定的学习成本，功能繁多带来的问题就是眼花缭乱。</li><li><a href="https://www.fancynode.com.cn/pxcook">PxCook</a> 就是专门为前端与设计师协作的工具，阉割了开发所用不到的功能，具备各种标注于测量。</li></ul><h2 id="扩展应用"><a href="#扩展应用" class="headerlink" title="扩展应用"></a>扩展应用</h2><p>有了以上的环境其实就可以投入开发了，但实际工作中还是不太够用，我们需要添加一些好用插件或者工具可以增加效率~ </p><h3 id="chrome-插件"><a href="#chrome-插件" class="headerlink" title="chrome 插件"></a>chrome 插件</h3><p>下面推荐一些比较好用的开发类插件，但链接需要科学上网才能访问：</p><p><strong><a href="https://chrome.google.com/webstore/detail/markdown-preview-plus/febilkbfcbhebfnokafefeacimjdckgl">Markdown Preview Plus</a></strong><br><code>markdown</code> 是程序员最常用的一个文件之一，默认情况下<code>chomre</code>查看<code>markdown</code>是无格式文字展示，可以安装此插件将<code>markdown</code>格式为文档。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-2.jpg" class=""><p><strong><a href="https://chrome.google.com/webstore/detail/enhanced-github/anlikcnbgdeidpacdbdljnabclhahhmd">Enhanced GitHub</a></strong><br>该插件将增强<code>github</code>的功能，能显示仓库的大小，能够支持下载单个文件等。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-3.jpg" class=""><p><strong><a href="https://chrome.google.com/webstore/detail/github-hovercard/mmoahbbnojgkclgceahhakhnccimnplk">GitHub Hovercard</a></strong><br>该插件提供 <strong>hover card</strong>, 显示用户信息、仓库信息、issue、ccommit 信息等。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-4.jpg" class=""><p><strong><a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc">JSONView</a></strong><br><code>JSON</code>是一个通用的数据格式，无论是前端还是后端都会跟这个数据格式打交道，有时我们直接在URL打开会返回<code>JSON</code>接口后，会在页面上显示一串字符串对象，并不太方便阅读数据。</p><p>该插件就是格式化返回的<code>JSON</code>, 使其美观。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-5.jpg" class=""><p><strong><a href="https://chrome.google.com/webstore/detail/nodejs-v8-inspector-manag/gnhhdgbaldcilmgcpfddgdbkhjohddkj">NIM(Node.js 调试管理工具)</a></strong><br><code>Node.js</code>的调试工具，具体教程商城页有介绍。</p><p><strong><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">Vue.js devtools</a>、<a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools</a>、<a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React Developer Tools</a></strong><br>对应前端框架开发必备的 <code>devtools</code>，需要的时候再安装也不迟。</p><p><strong><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">Proxy SwitchyOmega</a></strong><br>开发中还是必不可免会有使用代理的情况，该插件可以轻松快捷地管理和切换多个代理设置。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><strong><a href="https://www.getpostman.com/downloads/">Postman</a></strong><br><code>Postman</code>是一个跨平台的应用，它拥有完整的<code>API</code>开发环境，该应用前后端的朋友都能使用的了。在<code>Chrome</code>插件商城中你也能找到它，安装后会自动将该应用离线下载至本地。如果你更偏爱于命令行，可以尝试<code>curl</code>。</p><p><strong><a href="https://www.sourcetreeapp.com/">Sourcetree</a></strong><br>Sourcetree 是<code>Git GUI</code>，使用可视化界面来对代码进行版本控制，操作起来会比较友好。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-6.jpg" class=""><h2 id="Mac-环境"><a href="#Mac-环境" class="headerlink" title="Mac 环境"></a>Mac 环境</h2><blockquote><p>针对 macOS 环境的补充</p></blockquote><p><a href="https://brew.sh/">Homebrew</a>: macOS 的包管理器，如果需要使用 macOS 进行开发的话，请务必安装该包！</p><p><a href="https://pilotmoon.com/scrollreverser/">scrollreverser</a>： 可以将鼠标和触摸板设置不同的方向。</p><p><a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a>: 查看更广阔知识库的钥匙</p><p><a href="https://github.com/oldj/SwitchHosts/blob/master/README_cn.md">SwitchHosts</a>: 开发中难免会修改<code>hosts</code>，该款软件可以用于快速切换<code>hosts</code>文件。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-8.jpg" class=""><p><a href="https://iterm2.com/">iterm2</a>: macOS 默认的终端实际上并不太好用，<code>iterm2</code>的出现就是为了替代默认的重点，它支持<a href="https://iterm2.com/features.html">更多的功能</a>。</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-9.jpg" class=""><p><a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>: 默认的终端或者<code>iterm2</code>的外观并不太美观~ <code>zsh</code>框架能使你的终端颜值更上一步~ 不仅如此，它作为一个框架，有更多的插件和主题可选择，感兴趣的朋友可以深究一下~</p><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/img-10.jpg" class=""><hr><p><strong><a href="https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion">git flow</a></strong><br>该包封装了<code>release</code>、<code>feature</code>、<code>hotfix</code>等项目代码管理流程，减少输入<code>git</code>命令过程。<code>git flow</code>也被封装进了 Sourcetree 中，只不过一个是带有 UI 界面的软件，另一个是直接在命令行使用的包，满足不同人的需求。</p><p>macOS 环境下配置的步骤:</p><ul><li>安装 <a href="https://github.com/nvie/gitflow/wiki/Mac-OS-X">gitflow</a></li><li>如果你在使用 oy-my-zsh 的话，还可以安装它的插件 <a href="https://github.com/bobthecow/git-flow-completion#installation-for-zsh">git-flow-completion</a> 来进行 tab 补全命令。</li></ul><hr><p><a href="https://zipzapmac.com/go2shell">Go2Shell</a>: 在Finder中打开到当前目录的终端窗口。</p><p>安装方法如下：</p><ol><li><p>进入 <a href="https://zipzapmac.com/go2shell">Go2Shell</a> 的官网，点击 <strong>Free DOWNLOAD</strong> 下载安装包并安装至应用程序</p></li><li><p>直接打开 Go2Shell 的图标进行配置, 在 <strong>Command to execute in terminal</strong> 输入框输入如下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear; <span class="built_in">cd</span> %PATH%;  <span class="built_in">echo</span> -e <span class="string">&quot;Last login: `date`&quot;</span>; <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></li><li><p>点击 <strong>Add Go2Shell button to Finder Toolabar</strong> 安装至工具栏</p></li><li><p>接着就可以在任意 Finder 文件夹中点击 Go2Shell 的图标，就会打开当前目录路径下 shell</p></li></ol><img data-src="/blog/2019/07/26/configuring-mac-front-end-development-env-from-zero/go2shell.png" class="" title="go2shell"><h2 id="环境配置常见问题"><a href="#环境配置常见问题" class="headerlink" title="环境配置常见问题"></a>环境配置常见问题</h2><h3 id="解决-Homebrew-下载更新极慢的问题"><a href="#解决-Homebrew-下载更新极慢的问题" class="headerlink" title="解决 Homebrew 下载更新极慢的问题"></a>解决 Homebrew 下载更新极慢的问题</h3><p>更新 <code>Homebrew</code> 总是卡在 <code>updating homebrew...</code>，慢的难以忍受。</p><p>通过 <code>brew update --verbose</code> 可以输出更新的详细信息，可以发现是从储存库拉取代码时下载过慢的问题。</p><p>这个问题很好解决，我们只需要将储存库的源更改为国内的源即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  homebrew github origin =&gt; 阿里云镜像</span></span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  homebrew-core github origin =&gt; 阿里云镜像</span></span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 homebrew</span></span><br><span class="line">brew update --verbose</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> macOS </tag>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant Design Pro 使用 no-mock 造成 POST 请求被重定向为 GET 请求</title>
      <link href="/blog/2019/07/16/ant-design-redirect-change-method/"/>
      <url>/blog/2019/07/16/ant-design-redirect-change-method/</url>
      
        <content type="html"><![CDATA[<p>最近在 ant design pro 的项目遇到了一个奇怪的问题，在输入命令行<code>npm run start:no-mock</code>后，发现预期发出<code>POST</code>请求变成了<code>GET</code>请求，状态码是<code>301</code>永久重定向。而在使用<code>mock</code>数据中不会出现这种问题。</p><span id="more"></span><p>因此使用断点调试，经过一番尝试，逐步检查函数的调用及传参问题，最后也将此问题排除掉了。</p><p>随后想到问题是不是出现在类库身上，接口是基于<code>dva/fetch</code>进行封装的，而<code>dva/fetch</code>又是基于浏览器原生(<code>native code</code>)的<code>fetch</code>进行封装. 使用断点并没有进入<code>fetch</code>内部。</p><p>为了缩小范围，将发出请求的参数和方法从<code>Network</code>中拷贝下来，使用<code>fetch</code>直接调用，发现只要不经过<code>umi</code>类处理就不会出现这种现象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 dva/fetch</span></span><br><span class="line"><span class="comment">// request(&#x27;/api/login&#x27;, &#123; method: &#x27;POST&#x27;, body: &#123;username, password&#125; &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用原生 fetch</span></span><br><span class="line">request(<span class="string">&#x27;https://zzz.xxx.com/api/login&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: &#123;username, password&#125; &#125;)</span><br></pre></td></tr></table></figure><p>随后在<code>network</code>上我注意到，通过<code>umi</code>处理后的请求<code>URL</code>有点奇怪:</p><p>虽然我没有研究过<code>umi</code>的具体实现细节，但可以推测出<code>umi</code>是通过<code>config</code>拿到<code>proxy.target</code>作为<code>base url</code>. 但项目中<code>target</code>使用的协议是<code>http</code>协议，在实际的<code>network</code>中被转换为了<code>https</code>. </p><p>难不成就是这个在作祟？抱着尝试的态度将<code>target</code>上的协议转为<code>https</code>, 发现就能正常的发出<code>POST</code>请求了。。</p><p>但这样就会很迷茫，真的是<code>umi</code>干的吗？由于该项目基础架构另一个团队上接手上来的，有了很多复杂的因素干扰，<code>method</code>在哪一步进行了转换呢? 然后为了解惑做了一些简单的排查:</p><p>从网络原理来考虑，这种情况应该是在客户端发生的，为了排除服务端重定向的嫌疑，使用了抓包查看了没有经过浏览器格式的报文信息，确定了是客户端的问题。接着去看了部分源码也没有看到相关的逻辑。</p><p>最后近期业务量还挺重的，因此在此文记录一下，后序会继续关注一下这个问题，了解到原因再回来补充。</p><p>由于项目是运行在内网中，因此没有升级<code>umi</code>最新版本(内网可能没有最新的版本的镜像), 也有可能在最新版已经修复但没有继续尝试了。如果有遇到相同问题的同学可以了解一下这个情况。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;umi&quot;</span>: <span class="string">&quot;^2.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;umi-plugin-react&quot;</span>: <span class="string">&quot;^1.0.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ant Design Pro </tag>
            
            <tag> react </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在本地测试微信登录</title>
      <link href="/blog/2019/05/18/wechat-pc-login/"/>
      <url>/blog/2019/05/18/wechat-pc-login/</url>
      
        <content type="html"><![CDATA[<p>在做微信登录的时候，希望能在本地能够测试登录。这里使用的是<strong>微信开放平台</strong>的<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=573894734c5ae390158b4fa0d09b2d15a98f7a5a&lang=zh_CN">网站应用微信登录</a>, 与<strong>微信公众平台</strong>不同，<strong>微信开放平台</strong>并没有提供测试号的服务，因此在调试起来会十分的麻烦。比较传统的方法就是部署上测试服务器上专门先测试这一个接口。但从流程上来说，会比较麻烦，不够高效。下文将分享另一种测试的过程。</p><span id="more"></span><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>首先在页面引入微信的<code>js</code>文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//res.wx.qq.com/connect/zh_CN/htmledition/js/wxLogin.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在登录页上实例化登录对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- login.vuw --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;login_container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// other code ...</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// other code ...</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line">        APIs.login(&#123;</span><br><span class="line"><span class="javascript">            redirect_uri: Base64.encode(<span class="string">&#x27;http://apitest.anran758.com&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/* eslint-disable no-new */</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">new</span> WxLogin(&#123;</span></span><br><span class="line"><span class="javascript">                    id: <span class="string">&#x27;login_container&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// appid: &quot;&quot;,</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// scope: &quot;&quot;,</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// redirect_uri: &quot;&quot;,</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// state: &quot;&quot;,</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// style: &quot;&quot;,</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// href: &quot;&quot;</span></span></span><br><span class="line">                    ...res.data</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>WxLogin</code>接收一个对象，对象属性如下所示。其中对象里的<code>appid</code>, <code>scope</code>，<code>redirect_uri</code>, <code>state</code>四个属性是由后端控制返回的。</p><table><thead><tr><th>参数</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>self_redirect</td><td>否</td><td>true：手机点击确认登录后可以在 iframe 内跳转到 redirect_uri，false：手机点击确认登录后可以在 top window 跳转到 redirect_uri。默认为 false。</td></tr><tr><td>id</td><td>是</td><td>第三方页面显示二维码的容器id</td></tr><tr><td>appid</td><td>是</td><td>应用唯一标识，在微信开放平台提交应用审核通过后获得</td></tr><tr><td>scope</td><td>是</td><td>应用授权作用域，拥有多个作用域用逗号（,）分隔，网页应用目前仅填写snsapi_login即可</td></tr><tr><td>redirect_uri</td><td>是</td><td>重定向地址，需要进行UrlEncode</td></tr><tr><td>state</td><td>否</td><td>用于保持请求和回调的状态，授权请求后原样带回给第三方。该参数可用于防止csrf攻击（跨站请求伪造攻击），建议第三方带上该参数，可设置为简单的随机数加session进行校验</td></tr><tr><td>style</td><td>否</td><td>提供”black”、”white”可选，默认为黑色文字描述。详见文档底部FAQ</td></tr><tr><td>href</td><td>否</td><td>自定义样式链接，第三方可根据实际需求覆盖默认样式。详见文档底部FAQ</td></tr></tbody></table><p>该方法会生成一个二维码，并挂载到指定的容器 ID 上。用户扫描二维码时，页面会向微信服务端发送一个请求等待用户确认，用户确认完成后，就会将页面重定向至指定的路径（redirect_uri）。</p><p>那么现在问题就来了：重定向的地址要跟<strong>微信开放平台</strong>里设置的重定向的域名一致，就是说我们在本地开发起的<code>localhost:8080</code>这种是不行的。<br>这时我们就会想到了去修改<code>hosts</code>，但光改<code>hosts</code>是不行，还需要改端口。。这时就可以用到<code>whistle</code>了。</p><h2 id="whistle"><a href="#whistle" class="headerlink" title="whistle"></a>whistle</h2><p><a href="https://github.com/avwo/whistle">whistle</a>是基于Node实现的跨平台web调试代理工具，主要用于查看、修改HTTP、HTTPS、Websocket的请求、响应，也可以作为HTTP代理服务器使用。我们可以使用它来进行转发：</p><img data-src="/blog/2019/05/18/wechat-pc-login/whistle.png" class=""><p>通过 npm 来安装 whistle:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 whistle</span></span><br><span class="line">npm install -g whistle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 whistle</span></span><br><span class="line">w2 start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定端口号来启动 whistle</span></span><br><span class="line">w2 start -p 9000</span><br></pre></td></tr></table></figure><p>安装完毕后命令行提示我们可以进入 whistle 的控制台(默认启动的 URL 是 127.0.0.1:8899)，但此时还不能直接抓包，还需要配置代理才可以使用.</p><p>配置代理可以使用全局代理或浏览器代理，比较推荐的做法是使用后者。我个人习惯使用<code>chrome</code>浏览器，因此可以安装 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega</a> 代理插件，将 whistle 的配置信息填入，保存配置后记得切换插件的模式噢。</p><img data-src="/blog/2019/05/18/wechat-pc-login/setting-proxy.png" class=""><img data-src="/blog/2019/05/18/wechat-pc-login/open-plugin.png" class=""><p>想要拦截<code>HTPPS</code>的请求的话，还需要<a href="http://wproxy.org/whistle/webui/https.html">安装根证书</a>,</p><img data-src="/blog/2019/05/18/wechat-pc-login/https.gif" class=""><p>接着进入 whistle 的控制台, 点进<a href="http://127.0.0.1:8899/#rules">rules</a>, 配置需要代理或转发的地址。这个配置规则类似于设置 hosts.</p><img data-src="/blog/2019/05/18/wechat-pc-login/rules.png" class=""><p>设置好 rules 后，将本地开发的的网址<code>http://localhost:8020/#/login</code>替换为<code>http://test.anran758:8020/#/login</code>再进行测试登录，登录完毕后就能拿到用户数据了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/avwo/whistle/blob/master/README-zh_CN.md">whistle</a></li><li><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=573894734c5ae390158b4fa0d09b2d15a98f7a5a&lang=zh_CN">网站应用微信登录开发指南</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微信开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信开发 </tag>
            
            <tag> 微信登录 </tag>
            
            <tag> whistle </tag>
            
            <tag> 网站应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[UI组件] 来做一个可配置的滑块进度条吧</title>
      <link href="/blog/2019/05/03/minp-customize-slider/"/>
      <url>/blog/2019/05/03/minp-customize-slider/</url>
      
        <content type="html"><![CDATA[<p>在一些需要用户填写资料的业务场景中，有时会让用户选择某个业务的范围，这时就需要用到滑块进度条。然后你们最爱的产品经理会说，给我整一个颜色可控，滑块按钮可大可小，滑块边框也要可大可小的滑动条来..</p><span id="more"></span><p>emmm，一看这样的设计需求就意味着小程序原生的<a href="https://developers.weixin.qq.com/miniprogram/dev/component/slider.html">slider</a>组件就不能用了。因为这玩意在样式上就不能自由的配置，只好来手动实现一个。</p><hr><h2 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h2><img data-src="/blog/2019/05/03/minp-customize-slider/slider-bar.png" class="" title="slider-bar"><p>行吧，那说干就干。首先滑动条可以从俯视图角度来看，分为三层。分别是<code>底部滑轨区域</code>，<code>进度条区域</code>以及供用户操作的<code>滑块</code>本身。</p><p>在结构设计中，可以将<code>底部滑轨区域</code>，<code>进度条区域</code>分为一块，这样<code>进度条区域</code>可以根据随着滑动条的高度变化而变化, 宽度则由<code>js</code>控制。除此之外还需要暴露一些参数给外部，让它自己定义长粗宽。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的属性列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// 滑块大小</span></span><br><span class="line">        blockSize: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">32</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑块宽度</span></span><br><span class="line">        blockBorderWidth: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑轨高度</span></span><br><span class="line">        height: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑轨进度</span></span><br><span class="line">        step: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进度值小数位</span></span><br><span class="line">        digits: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            value: <span class="number">0</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">&quot;slider-wrap&quot;</span> <span class="attr">class</span>=<span class="string">&quot;slider-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;silder-bg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: &#123;&#123;height&#125;&#125;rpx;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>  <span class="attr">class</span>=<span class="string">&quot;silder-bg-inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    &lt;view</span><br><span class="line">        class=&quot;silder-block&quot;</span><br><span class="line">        style=&quot;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;&quot;</span><br><span class="line">    &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.slider-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg</span>,</span><br><span class="line"><span class="selector-class">.silder-bg-inner</span>,</span><br><span class="line"><span class="selector-class">.silder-block</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg</span>,</span><br><span class="line"><span class="selector-class">.silder-bg-inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2</span>rpx;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eeeeee</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8</span>rpx;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-bg-inner</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#66a6ff</span>;</span><br><span class="line">    <span class="comment">/* border-radius: 8rpx; */</span></span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">8</span>rpx;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">8</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.silder-block</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">32</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32</span>rpx;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">3</span>rpx <span class="number">#66a6ff</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="点击行为事件"><a href="#点击行为事件" class="headerlink" title="点击行为事件"></a>点击行为事件</h2><blockquote><p>滑块进度条的<code>滑块</code>是一个听话的小朋友，就是说我们叫它去哪它就听话的过去。所以就不要抓它去煲汤了~</p></blockquote><p>在组件外部容器中绑定一个点击事件，我们必须得要知道用户点击位置，在<code>bind:tap</code>事件中取到<code>clientX</code>属性。除此之外还需要取到进度条的位置信息。</p><p>得到两个关键数据后，将用户点击的位置<code>ClintX</code>与进度条组件的偏移量<code>offset</code>相减，得出相对于组件内的进度<code>progress</code>.<br>再用组件的宽度<code>width</code>减去<code>progress</code>乘于<code>100</code>得到目前进度的百分比<code>percentage</code>。<br>同时为了防止进度条超出进度条</p><p>如下图所示：<code>((191 - 36) / 301) * 100 ≈ 52</code></p><img data-src="/blog/2019/05/03/minp-customize-slider/offset.png" class="" title="关系示意图"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;slider-wrap&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;tappingSlider&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ...other --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组件的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        containerInfo: <span class="literal">null</span>,</span><br><span class="line">        percentage: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">ready</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 取到滑块进度条的位置信息</span></span><br><span class="line">        wx.createSelectorQuery().in(<span class="built_in">this</span>)</span><br><span class="line">            .select(<span class="string">&#x27;.slider-wrap&#x27;</span>)</span><br><span class="line">            .boundingClientRect(<span class="function">(<span class="params">rect</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rect) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.data.container = rect;</span><br><span class="line">                <span class="built_in">this</span>._initBloackPos();</span><br><span class="line">            &#125;).exec()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击进度条</span></span><br><span class="line">    <span class="function"><span class="title">tappingSlider</span>(<span class="params">evt</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="built_in">this</span>.data;</span><br><span class="line">        <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="built_in">this</span>.data;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要做边界处理</span></span><br><span class="line">        <span class="keyword">const</span> perc = <span class="built_in">this</span>._computeOffset(clientX, containerInfo.left, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">const</span> percentage = <span class="built_in">this</span>._boundaryHandler(perc);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setData(&#123; percentage &#125;);</span><br><span class="line">        <span class="built_in">this</span>.triggerEvent(<span class="string">&#x27;change&#x27;</span>, &#123;</span><br><span class="line">              value: percentage.toFixed(digits) * <span class="number">1</span></span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算相对容器的偏移距离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">x</span></span> - X 坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">offset</span></span> - 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">maxVal</span></span> - 在 maxVal 范围内求百分比</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">_computeOffset</span>(<span class="params">x, offset, maxVal</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; width &#125; = <span class="built_in">this</span>.data.containerInfo;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 底层保证一定精度</span></span><br><span class="line">        <span class="keyword">return</span> (((x - offset) / width) * maxVal).toFixed(<span class="number">4</span>) * <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 边界处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">num</span></span> - 待处理的最值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">maxNum</span></span> - num 最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123; Number &#125;</span> <span class="variable">minNum</span></span> - num 最小值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">_boundaryHandler</span>(<span class="params">num, maxNum = <span class="number">100</span>, minNum = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num &gt; maxNum ? maxNum : (num &lt; minNum ? minNum : num);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;slider-wrap&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;tappingSlider&quot;</span> <span class="attr">bindtouchmove</span>=<span class="string">&quot;onTouchMove&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;silder-bg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: &#123;&#123;height&#125;&#125;rpx;&quot;</span>&gt;</span></span><br><span class="line">        &lt;view</span><br><span class="line">            class=&quot;silder-bg-inner&quot;</span><br><span class="line">            style=&quot;width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;&quot;</span><br><span class="line">        &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    &lt;view</span><br><span class="line">        class=&quot;silder-block&quot;</span><br><span class="line">        style=&quot;left: &#123;&#123;percentage&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;&quot;</span><br><span class="line">    &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>虽然实现了点击滑动到指定位置的功能，但仔细一看还是有一些瑕疵的~ 当我们点击到百分百时，<code>滑块</code>超出原先设定的容器宽度。</p><p>超出的原因是因为在布局上，我们使用绝对定位<code>absolute</code>，通过设置滑块<code>left</code>属性来控制滑块位置的。<br>偏移量中还包含了滑块自身的宽度，因此还需要对滑块的偏移量做一定的处理，去掉自身宽度再获取百分比。</p><p>在文章开头我们已经暴露了一个<code>blockSize</code>的属性，利用该属性可以计算滑块的最大偏移量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        <span class="comment">// other data...</span></span><br><span class="line"></span><br><span class="line">        _blockOffset: <span class="number">0</span>,</span><br><span class="line">        _maxDistance: <span class="number">100</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 点击进度条</span></span><br><span class="line">        <span class="function"><span class="title">tappingSlider</span>(<span class="params">evt</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>._computeOffset(clientX, containerInfo.left, maxVal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 滑块偏移度</span></span><br><span class="line">            <span class="keyword">const</span> _blockOffset = <span class="built_in">this</span>._boundaryHandler(</span><br><span class="line">                computeOffset(_maxDistance), _maxDistance</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实际百分比</span></span><br><span class="line">            <span class="keyword">const</span> percentage = <span class="built_in">this</span>._boundaryHandler(computeOffset(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.setData(&#123; _blockOffset, percentage &#125;);</span><br><span class="line">            <span class="built_in">this</span>.triggerEvent(<span class="string">&#x27;change&#x27;</span>, &#123; <span class="attr">value</span>: percentage.toFixed(digits) * <span class="number">1</span> &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- other code --&gt;</span></span><br><span class="line">&lt;view</span><br><span class="line">    class=&quot;silder-block&quot;</span><br><span class="line">    style=&quot;left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如此，该事件就完成啦~</p><h2 id="滑动事件"><a href="#滑动事件" class="headerlink" title="滑动事件"></a>滑动事件</h2><p>完成点击事件后，我们还得让它能进行自由的滑动。进度条组件的拖动的流程大致是：<code>点击滑块</code> -&gt; <code>拖动滑块</code> -&gt; <code>释放滑块</code>这三个步骤。</p><p>因此跟H5的思路一样，我们只需监听<code>touchmove</code>、<code>touchstatr</code>、<code>touchend</code>三个事件。</p><p>首先先监听<code>touchmove</code>，用户点击滑块后，记录当前的<code>clientX</code>属性, 随后还需要记录当前<code>进度</code>和滑块的<code>偏移量</code>；<br><code>touchmove</code>事件则由外层容器相关联，并更新滑动的距离。由于<code>touchmove</code>里针对<code>拖动事件</code>逻辑不能被随便触发，因此需要加一个标识的锁；<br>在<code>touchend</code>事件触发后释放锁即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">onTouchStart</span>(<span class="params">evt</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data.moving = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录原始坐标</span></span><br><span class="line">            <span class="built_in">this</span>.data.originPos = <span class="built_in">this</span>.data._blockOffset;</span><br><span class="line">            <span class="built_in">this</span>.data.originPercentage = <span class="built_in">this</span>.data.percentage;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.data._startTouchX = evt.changedTouches[<span class="number">0</span>].clientX;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑块移动</span></span><br><span class="line">        <span class="function"><span class="title">onTouchMove</span>(<span class="params">evt</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; moving, containerInfo &#125; = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (!moving || !containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">const</span> &#123;</span><br><span class="line">                digits,</span><br><span class="line">                originPos,</span><br><span class="line">                originPercentage,</span><br><span class="line">                _startTouchX,</span><br><span class="line">                _maxDistance</span><br><span class="line">            &#125; = <span class="built_in">this</span>.data;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算偏移量</span></span><br><span class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>._computeOffset(clientX, _startTouchX, maxVal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实际百分比</span></span><br><span class="line">            <span class="keyword">const</span> perc = originPercentage + computeOffset(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">const</span> percentage = <span class="built_in">this</span>._boundaryHandler(perc);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 滑块偏移度</span></span><br><span class="line">            <span class="keyword">const</span> offset = originPos + computeOffset(_maxDistance);</span><br><span class="line">            <span class="keyword">const</span> _blockOffset = <span class="built_in">this</span>._boundaryHandler(offset, _maxDistance);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.setData(&#123; percentage, _blockOffset &#125;);</span><br><span class="line">            <span class="built_in">this</span>.triggerEvent(<span class="string">&#x27;change&#x27;</span>, &#123;</span><br><span class="line">                value: percentage.toFixed(digits) * <span class="number">1</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">onTouchEnd</span>(<span class="params">evt</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data.moving = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;slider-wrap&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;tappingSlider&quot;</span> <span class="attr">bindtouchmove</span>=<span class="string">&quot;onTouchMove&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;silder-bg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: &#123;&#123;height&#125;&#125;rpx;&quot;</span>&gt;</span></span><br><span class="line">        &lt;view</span><br><span class="line">            class=&quot;silder-bg-inner&quot;</span><br><span class="line">            style=&quot;width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;&quot;</span><br><span class="line">        &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    &lt;view</span><br><span class="line">        class=&quot;silder-block&quot;</span><br><span class="line">        style=&quot;left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;&quot;</span><br><span class="line">        bindtouchstart=&quot;onTouchStart&quot;</span><br><span class="line">        bindtouchend=&quot;onTouchEnd&quot;</span><br><span class="line">    &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>滑块进度条</code>组件的实现~ 实际上该组件还有更多可供配置的地方，如颜色值，背景控制等这些比较基础的东西就不继续展开讲啦~<br> 本文是以小程序进行示例。但思路是共通的，也可以使用同样思路在<code>H5</code>实现，只不过是 API 的差异罢了~</p><p><a href="https://developers.weixin.qq.com/s/Oc79f7mv7K8N">微信代码片段</a>, 可以直接拿来就用。</p><hr><p>2019/05/04 更新：</p><p>后面又重新看了一遍，发现该组件还是有可优化的空间：</p><p>操作不必局限于滑块上，可以将<code>bindtap</code>事件废弃，其余的所有事件都代理到最外部的节点中。<code>touchstar</code>的同时就渲染位置信息，还允许它自由的滑动:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;slider-wrap&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtouchstart</span>=<span class="string">&quot;onTouchStart&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtouchmove</span>=<span class="string">&quot;onTouchMove&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindtouchend</span>=<span class="string">&quot;onTouchEnd&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;silder-bg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: &#123;&#123;height&#125;&#125;rpx;&quot;</span>&gt;</span></span><br><span class="line">        &lt;view</span><br><span class="line">            class=&quot;silder-bg-inner&quot;</span><br><span class="line">            style=&quot;width: &#123;&#123;percentage&#125;&#125;%; height: &#123;&#123;height&#125;&#125;rpx;&quot;</span><br><span class="line">        &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    &lt;view</span><br><span class="line">        class=&quot;silder-block&quot;</span><br><span class="line">        style=&quot;left: &#123;&#123;_blockOffset&#125;&#125;%;width: &#123;&#123;blockSize&#125;&#125;rpx;height: &#123;&#123;blockSize&#125;&#125;rpx; border-width: &#123;&#123;blockBorderWidth&#125;&#125;rpx;&quot;</span><br><span class="line">    &gt;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">    <span class="comment">// other options ...</span></span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// other method ...</span></span><br><span class="line">        <span class="function"><span class="title">onTouchStart</span>(<span class="params">evt</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data.moving = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; containerInfo &#125; = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (!containerInfo) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123; clientX &#125; = evt.changedTouches[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">const</span> &#123; digits, _maxDistance &#125; = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">const</span> computeOffset = <span class="function">(<span class="params">maxVal</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>._computeOffset(clientX, containerInfo.left, maxVal);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 滑块偏移度</span></span><br><span class="line">            <span class="keyword">const</span> _blockOffset = <span class="built_in">this</span>._boundaryHandler(</span><br><span class="line">                computeOffset(_maxDistance), _maxDistance</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 实际百分比</span></span><br><span class="line">            <span class="keyword">const</span> percentage = <span class="built_in">this</span>._boundaryHandler(computeOffset(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录原始坐标</span></span><br><span class="line">            <span class="built_in">this</span>.data.originPos = _blockOffset;</span><br><span class="line">            <span class="built_in">this</span>.data.originPercentage = percentage;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.data._startTouchX = clientX;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.setData(&#123; _blockOffset, percentage &#125;);</span><br><span class="line">            <span class="built_in">this</span>.triggerEvent(<span class="string">&#x27;change&#x27;</span>, &#123; <span class="attr">value</span>: percentage.toFixed(digits) * <span class="number">1</span> &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://developers.weixin.qq.com/s/XpaZV7mn7t8L">微信代码片段 v0.0.2</a></p>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序开发 </tag>
            
            <tag> UI组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5微信支付所遇到的若干问题</title>
      <link href="/blog/2019/02/23/h5-cookie-lost/"/>
      <url>/blog/2019/02/23/h5-cookie-lost/</url>
      
        <content type="html"><![CDATA[<p>最近做了个H5微信支付的需求，记录一下所遇到的一些问题。。</p><span id="more"></span><h2 id="cookie-丢失的问题"><a href="#cookie-丢失的问题" class="headerlink" title="cookie 丢失的问题"></a>cookie 丢失的问题</h2><p>在H5页面中，一开始我们是需要拿到微信用户的信息。因此需要调用获取用户的接口。<br>在第一次调用该接口时，需要有一个授权的过程。没有拿到用户信息的话，就需要调取授权让用户确认。</p><p>然后问题就来了<del>授权完成后，会发现后端是拿不到<code>cookie</code>信息。经过查询资料后发现原来还是跨域在作祟</del><br>虽然我们解决了基本的跨域问题，即域名(origin)的不同。但是默认情况下跨域请求不会发送<code>cookie</code>.</p><p>这时前端需要设置<code>XHR</code>的<code>withCredentials: true</code>, 后端也需要配合设置<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials">Access-Control-Allow-Credentials</a>即可。</p><p>以 <code>axios</code> 为例, <code>withCredentials: true</code> 与 <code>data</code> 平级:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opt = &#123;</span><br><span class="line">  url: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">  method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">&#x27;jojo&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  withCredentials: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios(opt).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure><p>这种情况一般是前后端项目不在同一个域名的情况下，且需要带凭证的场景需要设置<code>Credentials</code>。</p><h2 id="url未注册-url-not-registered"><a href="#url未注册-url-not-registered" class="headerlink" title="url未注册(url not registered)"></a>url未注册(url not registered)</h2><p>随后微信弹了一下<code>url not registered</code>的错误，检查支付目录已经正确的被配置。</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul><li><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&index=6">微信内H5调起支付</a></li><li><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_3">jsapi 开发流程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> h5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> h5 </tag>
            
            <tag> 微信 </tag>
            
            <tag> 微信支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在微信小程序中保存网络图片</title>
      <link href="/blog/2019/02/11/miniprograms-download-image/"/>
      <url>/blog/2019/02/11/miniprograms-download-image/</url>
      
        <content type="html"><![CDATA[<p>在小程序的文档中我们得知，<a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.saveImageToPhotosAlbum.html">wx.saveImageToPhotosAlbum</a> 是用来保存图片到相册的。</p><p>但是仔细一看会发现这个接口的<code>filePath</code>参数只接受临时文件路径或永久文件路径，不支持网络图片路径，意味着我们不能直接调用这个接口。。</p><span id="more"></span><p>因此先需要把该文件下载至本地，使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.downloadFile.html?search-key=downloadFile">wx.downloadFile</a> 。</p><p>但值得注意的是<strong>小程序只可以跟指定的域名与进行网络通信</strong>，也就是说下载图片之前，我们需要先去<strong>微信公众者平台</strong>的开发设置里设置<code>uploadFile合法域名</code>。</p><p>示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;qr-code&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;url&#125;&#125;&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;saveImage&quot;</span>&gt;</span>保存图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: <span class="string">&#x27;https://avatars3.githubusercontent.com/u/23024075?s=460&amp;v=4&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保存图片</span></span><br><span class="line">  <span class="function"><span class="title">saveImage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.wxToPromise(<span class="string">&#x27;downloadFile&#x27;</span>, &#123;</span><br><span class="line">        url: <span class="built_in">this</span>.data.url</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.wxToPromise(<span class="string">&#x27;saveImageToPhotosAlbum&#x27;</span>, &#123;</span><br><span class="line">        filePath: res.tempFilePath</span><br><span class="line">      &#125;))</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        wx.showToast(&#123; <span class="attr">title</span>: <span class="string">&#x27;保存成功~&#x27;</span>,<span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span> &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(err) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是用户自己取消的话保存图片的话</span></span><br><span class="line">        <span class="comment">// if (~err.errMsg.indexOf(&#x27;cancel&#x27;)) return;</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将 callback 转为易读的 promise</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns </span>[promise]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">wxToPromise</span>(<span class="params">method, opt</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      wx[method](&#123;</span><br><span class="line">        ...opt,</span><br><span class="line">        <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">          opt.success &amp;&amp; opt.success();</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">fail</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">          opt.fail &amp;&amp; opt.fail();</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后理论上就可以保存图片了… 用户第一次在我们的小程序使用保存图片这个功能是会弹出一个授权弹框，如果用户手滑点了拒绝授权后再点一次保存图片，然后就会发现什么反应都没有了。。。</p><p>出现这样的原因是因为这个授权弹框只会出现一次，所以我们得想办法再让用户重新授权一次。这时就想到使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wx.authorize.html">wx.authorize</a> .</p><p>但是经过测试后发现，使用 <code>wx.authorize</code> 后，会报 <code>authorize:fail auth deny</code> 的错误。然后经过查阅资料得知：</p><blockquote><ul><li>如果用户未接受或拒绝过此权限，会弹窗询问用户，用户点击同意后方可调用接口；</li><li>如果用户已授权，可以直接调用接口；</li><li>如果用户已拒绝授权，则不会出现弹窗，而是直接进入接口 fail 回调。请开发者兼容用户拒绝授权的场景。</li></ul></blockquote><p>emmm… 那这样效果当然不符合我们预期，只能在换一种方式。这时就想到了使用<code>&lt;button open-type=&quot;openSetting&quot;/&gt;</code>，在交互上做一个提示弹框，引导用户重新授权：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;qr-code&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;url&#125;&#125;&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;saveImage&quot;</span>&gt;</span>保存图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简陋版提示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;showDialog&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">    这是一段提示用户授权的提示语</span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">      &lt;button</span><br><span class="line">        class=&quot;btn&quot;</span><br><span class="line">        open-type=&quot;openSetting&quot;</span><br><span class="line">        bindtap=&quot;confirm&quot; &gt;</span><br><span class="line">         授权</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;cancel&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    url: <span class="string">&#x27;https://avatars3.githubusercontent.com/u/23024075?s=460&amp;v=4&#x27;</span>,</span><br><span class="line">    showDialog: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">saveImage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.wxToPromise(<span class="string">&#x27;downloadFile&#x27;</span>, &#123;</span><br><span class="line">        url: <span class="built_in">this</span>.data.url</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.wxToPromise(<span class="string">&#x27;saveImageToPhotosAlbum&#x27;</span>, &#123;</span><br><span class="line">        filePath: res.tempFilePath</span><br><span class="line">      &#125;))</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="comment">// this.hide();</span></span><br><span class="line">        wx.showToast(&#123;</span><br><span class="line">          title: <span class="string">&#x27;保存成功~&#x27;</span>,</span><br><span class="line">          icon: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">&#123; errMsg &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(errMsg)</span><br><span class="line">        <span class="comment">// if (~errMsg.indexOf(&#x27;cancel&#x27;)) return;</span></span><br><span class="line">        <span class="keyword">if</span> (!~errMsg.indexOf(<span class="string">&#x27;auth&#x27;</span>)) &#123;</span><br><span class="line">          wx.showToast(&#123; <span class="attr">title</span>: <span class="string">&#x27;图片保存失败，稍后再试&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span> &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 调用授权提示弹框</span></span><br><span class="line">          <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            showDialog: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// callback to promise</span></span><br><span class="line">  <span class="function"><span class="title">wxToPromise</span>(<span class="params">method, opt</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      wx[method](&#123;</span><br><span class="line">        ...opt,</span><br><span class="line">        <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line">          opt.success &amp;&amp; opt.success();</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">fail</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">          opt.fail &amp;&amp; opt.fail();</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">confirm</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      showDialog:<span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">cancel</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      showDialog: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后这样就完成啦~</p><hr><p><a href="https://developers.weixin.qq.com/s/SoOhi6mX7D6Y">微信代码片段点这里</a>,  该功能需要添加<code>appid</code>才能进行正常的测试。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[小程序] 小程序项目的结构设计</title>
      <link href="/blog/2018/11/23/miniprogrmas-build-frame/"/>
      <url>/blog/2018/11/23/miniprogrmas-build-frame/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/11/23/miniprogrmas-build-frame/banner.png" class=""><p>在工作中也做了好几个小程序项目了，正好抽空将小程序开发的一些知识重新整理一下~</p><span id="more"></span><h2 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h2><p>其中小程序是由<code>.wxml</code>、<code>.wxss</code>、<code>.js</code>、<code>.json</code>四种类型构成(下文将简称为四类文件)。其开发方式跟传统网页开发是十分类似的。</p><ul><li><code>.wxml</code>模板文件对应为传统网页开发的<code>.html</code>文件，是一个页面(组件)的骨架。只不过它里面采用的语法跟传统的<code>HTML</code>语法有些差异, 比如标签的名称是微信自己在底层封装的组件。</li><li><code>.wxss</code>样式文件则对应<code>CSS</code>样式文件，具有大部分<code>CSS</code>的特性(比如<code>css3</code>的某些伪类特性就没有，但常见的<code>css3</code>属性倒是可以用)，除此之外还在此基础上做了新的扩展。</li><li><code>js</code>一直都是作为跟页面交互角色，在小程序开发中也不例外。<br>在<code>js</code>中，可以使用微信提供的<code>API</code>。如常见的<code>Page</code>(构造器)和<code>Component</code>，还有微信给出的一些特定权限的API.  </li><li><code>json</code>则是配置文件，一般是页面或者组件内那一级的配置文件。</li></ul><p>(这里有个小细节可以区分<code>wxml</code>和<code>wxss</code>区别，这两者都是以<code>wx(微信)</code>为开头，后面的小尾巴是区别是样式文件还是模板文件)。</p><p>具体的更多细节可以去看<a href="https://developers.weixin.qq.com/miniprogram/dev/quickstart/basic/file.html">官网文档</a>。本文的重心还是在讨论项目结构如何安排会比较整洁合理。</p><h2 id="项目结构设计思路"><a href="#项目结构设计思路" class="headerlink" title="项目结构设计思路"></a>项目结构设计思路</h2><p>每个小程序项目的根目录会有一个<code>project.config.json</code>的项目配置文件，可以设置<code>miniprogramRoot</code>属性指定小程序源码的目录, 默认为根目录(<code>/</code>)。意思是说把源代码放在<code>/src/</code>下的目录也没有问题，笔者采用的是源码在根目录方式。</p><p>首先，小程序规定：一个小程序<strong>主体部分</strong>由三个文件组成，同时必须放在项目的根目录。</p><ul><li><code>app.js</code> 需要在里面调用<code>App()</code>函数，注册一个小程序。</li><li><code>app.json</code> 小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</li><li><code>app.wxss</code>  全局样式，作用于每一个页面。但注意的是<code>app.wxss</code>写的全局样式不会影响组件内的样式。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>小程序是由许多页面组成的，因此我们需要一个目录来存放页面, 我们通常把这个文件夹命名为<code>/pages/</code>。<code>app.json</code>的<code>pages</code>是一个数组，数组的每一项是用来指定页面的路径，框架会根据路径自动去寻找相对位置的四类文件(小程序的代码构成)。数组第一项为小程序入口页面。</p><p>每个页面为单独的一个目录, 页面的四类文件使用统一的名称。这里我们跟官方同步，四类文件跟随目录的名称走:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── pages</span><br><span class="line">│   │── home</span><br><span class="line">│   │   ├── home.wxml</span><br><span class="line">│   │   ├── home.js</span><br><span class="line">│   │   ├── home.json</span><br><span class="line">│   │   └── home.wxss</span><br><span class="line">│   └── user</span><br><span class="line">│       ├── user.wxml</span><br><span class="line">│       └── user.js</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>除此之外，在开发小程序时，页面是会分主要页面和次要页面(子页)，子页通常是一些列表页详情页的东西。理论上只会有一个入口能跳的过去那种二级页面。如果这样的子页一多，然后全都放在了<code>/pages/</code>目录下，就会导致目录列表变得庞大，会比较难找…</p><p>这时可以考虑换一种方式储存，在页面文件夹里再加一个文件夹, 名为<code>subpage</code>。把子页放在这个文件夹内，这样层级关系就清晰了，缺点就是不适合套太深。或者说一个产品也不应该把页面藏得太深让用户找不到…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── pages</span><br><span class="line">│   └── home</span><br><span class="line">│       ├── subpage</span><br><span class="line">│       │   └── detail</span><br><span class="line">│       │       ├── index.wxml</span><br><span class="line">│       │       └── ...</span><br><span class="line">│       ├── home.wxml</span><br><span class="line">│       └── ...</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>至于项目简单一些的话前者会好一点(子页命名参照<code>master-description</code>的格式)，页面太过复杂的话可能会比较推荐使用后者的方式。</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>既然有了页面，那么页面必不可免会需要引用到图片。图片大致可以分为<strong>业务类</strong>和<strong>公共类</strong>。一些可以复用的图片我们可以放在同一个地方统一管理。而业务类则放在对应的页面目录下, 命名格式推荐为<code>dir@description</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── iamges (公共图片)</span><br><span class="line">│   │── icon</span><br><span class="line">│   │   ├── icon@download.png</span><br><span class="line">│   │   └── icon@cancel.png</span><br><span class="line">|   └── ...</span><br><span class="line">├── pages</span><br><span class="line">│   └── index</span><br><span class="line">│       ├── images</span><br><span class="line">│       |   └── index@bg.png</span><br><span class="line">│       |   └── index@video.png</span><br><span class="line">│       ├── index.wxml</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       ├── index.json</span><br><span class="line">│       └── index.wxss</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>但值得注意的是，在<strong>js</strong>中使用<code>import</code>引入图片时不能通过根目录进行查找，而<code>wxml</code>则没有这种限制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绝对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">images</span> <span class="attr">src</span>=<span class="string">&quot;/images/icon@download.png&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">images</span> <span class="attr">src</span>=<span class="string">&quot;./images/index@video.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会报错</span></span><br><span class="line"><span class="keyword">import</span> iconDownload <span class="keyword">from</span> <span class="string">&#x27;/images/icon@download.png&#x27;</span></span><br><span class="line"><span class="comment">// 只能使用相对路径</span></span><br><span class="line"><span class="keyword">import</span> iconDownload <span class="keyword">from</span> <span class="string">&#x27;/../../icon@download.png&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>写完页面后自然需要给页面润色, 我们可以通过在页面的<code>.wxss</code>来写局部样式，这没问题。但在我们完成一个又一个页面后，这时你可能会发现有些页面的样式<strong>重复性</strong>太高了。</p><p>因为一个成熟的设计师，在设计每一个产品时，大多会有一套设计风格或者称之为主题的东西。这些元素大量重复在各个页面中，我们重复写这些样式实际上代码是有点冗余的。</p><img data-src="/blog/2018/11/23/miniprogrmas-build-frame/button.png" class="" title="主题按钮"><p>这时有经验的开发者很自然就会想到将重复性的代码抽出来，所幸微信提供了<code>@import</code>语句可以导入外联样式表。而这些通用的样式可以放在<code>/style/</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── style</span><br><span class="line">│   ├── button.wxss</span><br><span class="line">│   └── ...</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><p>直接在<code>.wxss</code>的顶层引入即可复用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@improt</span> <span class="string">&#x27;/style/button.wxss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* other code */</span></span><br></pre></td></tr></table></figure><p>至于是为何不在<code>app.json</code>中设定全局样式而单独抽出来的原因也是前文所提及的问题————组件中默认情况下不受全局样式影响的，理论上组件也不该受到外部样式的”无意“的影响。<br>但<code>app.json</code>中的样式只需要加载一次就全局可用，外部样式就不一定了(因为没有实际的调研过)，而且还需要额外的去做引入的那一步。具体用哪一种方式还是要看具体情况来自己斟酌啦~</p><p>还有一些方法，比如使用<code>scss</code>、<code>less</code>之类的预处理之类的方案，也是可以，只不过超出了本文的讨论范围，不展开讲。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>组件对于熟悉模块化开发的同学自然不陌生，小程序基础库版本 <code>1.6.3</code> 就开始支持自定义组件了，至今为止也不用担心兼容性的问题了。从笔者角度来看看法，小程序的组件可以分为全局组件和局部组件。</p><p>全局性是指那种封装了登录、弹框、动画组件等等之类的组件，局部的大多是减轻一个页面内的复杂度，通过模块”搭积木”的方式来组成一个页面。即使某个功能砍了也能对页面减少牵连。</p><p>我们习惯于将全局性的东西放在源码的根目录上，因此会在根目录上创建<code>/components</code>文件夹，里面存放全局性的组件。<br>其中全局性的组件有不少会有同等类型的组件，因为可以再进一步的分类，如动画类组件存放为一个文件夹内。<br>再利用编辑器的文件名排序的特性，可以加上<code>@</code>提前组件集合。</p><p>组件下的四类文件按照<code>componment/index</code>的方式命名与<code>page</code>区分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">├── componments (公共组件)</span><br><span class="line">│   │── anima</span><br><span class="line">│   │   ├── coin</span><br><span class="line">│   |   |   ├── index.js</span><br><span class="line">│   |   |   └── ...</span><br><span class="line">│   │   └── liquid</span><br><span class="line">│   |       └── ...</span><br><span class="line">|   └── ...</span><br><span class="line">├── pages</span><br><span class="line">│   └── home</span><br><span class="line">│       ├── componments</span><br><span class="line">│       |   └── goods</span><br><span class="line">│       |     ├── index.wxml</span><br><span class="line">│       |     └── ...</span><br><span class="line">│       ├── home.wxml</span><br><span class="line">│       ├── home.js</span><br><span class="line">│       ├── home.json</span><br><span class="line">│       └── home.wxss</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><p>在原生小程序开发中，一般在源码的根目录下，都会有一个<code>utils</code>文件夹，专门来干杂七杂八的脏话累活。其中包含工具类函数、<code>API</code>的管理、配置信息等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── utils (工具集)</span><br><span class="line">│   │── api</span><br><span class="line">│   │   └── ...</span><br><span class="line">|   ├── ... (其他工具类)</span><br><span class="line">|   ├── config.js</span><br><span class="line">|   └── local.config.js (本地配置，git忽略)</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><p>当小程序的资源大小超过了<code>2M</code>时，进行预览调试时就会报文件过大的错误，这时你可能就需要进行分包，将资源分开加载。小程序文档给出的目录结构是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">├── packageA</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── cat</span><br><span class="line">│       └── dog</span><br><span class="line">├── packageB</span><br><span class="line">│   └── pages</span><br><span class="line">│       ├── apple</span><br><span class="line">│       └── banana</span><br><span class="line">├── pages</span><br><span class="line">│   ├── index</span><br><span class="line">│   └── user</span><br><span class="line">└── utils</span><br></pre></td></tr></table></figure><p>但经过我们在项目中尝试，我们发现通过编辑器的字符串排序后，会破坏目录结构的清晰度，所以推荐将分包放置到一个文件夹内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── subpackages (分包)</span><br><span class="line">│   │── news</span><br><span class="line">│   │   └── ...</span><br><span class="line">|   └── store</span><br><span class="line">│       └── ...</span><br><span class="line">├── ...</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后的一个小程序项目主体结构大致是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">├── components (公共组件目录)</span><br><span class="line">│   ├── @anima (动画组件)</span><br><span class="line">│   └── ...</span><br><span class="line">├── images（公共图片）</span><br><span class="line">│   └── icon</span><br><span class="line">│      ├── icon@download.png</span><br><span class="line">│      └── icon@cancel.png</span><br><span class="line">├── pages（主包目录）</span><br><span class="line">│   └── home (app.json 设置的入口页)</span><br><span class="line">│       ├── home.wxml</span><br><span class="line">│       ├── home.js</span><br><span class="line">│       ├── home.json</span><br><span class="line">│       └── home.wxss</span><br><span class="line">├── style（公用样式目录）</span><br><span class="line">├── subpackages（分包目录）</span><br><span class="line">│   │── news</span><br><span class="line">|   └── store</span><br><span class="line">├── utils（公共模块，工具类）</span><br><span class="line">│   ├── config.js（项目配置）</span><br><span class="line">│   └── local.config.js (本地配置，git忽略)</span><br><span class="line">├── .editorconfig</span><br><span class="line">├── .gitignore</span><br><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">├── project.config.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><p>以上是从原生小程序开发的角度来对项目结构的设计进行一个思路总结，没有过多的讲更深入的东西。下一期想整理一下关于<code>API</code>封装和管理，欢迎指导~</p>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序开发 </tag>
            
            <tag> 小程序开发笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts 的食用方式</title>
      <link href="/blog/2018/06/28/how-to-use-echart/"/>
      <url>/blog/2018/06/28/how-to-use-echart/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/06/28/how-to-use-echart/banner.png" class=""><p><code>ECharts</code>，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上。可以这么说，在国内，是个前端都知道这个玩意是干嘛用的，毕竟它还是出自于国人之手。</p><p>虽说如此，但是<code>Echarts</code>涵盖的类型实在是太广了，它给我们提供了很多配置项，但呼之而来的问题是会有点让刚接触的人有点茫然… 哪些参数是必要的？哪个参数又跟什么地方的<code>key</code>值相对应，缺失后就无法正常的显示…</p><p>因此就来专门讲一讲这配置项的坑以及如何通过组件的方式正确的”食用“。</p><span id="more"></span><hr><p>其实<code>Echarts</code>也有自己的使用教程，但本文的重心并不是从零开始讲解<code>Echarts</code>，至于更多使用细节可以看官方的<a href="http://echarts.baidu.com/tutorial.html">文档</a>。</p><p>这里姑且先用折线图作示例。首先需要先引入<code>ECharts</code>, 我们选择好自己所需的版本后(tips: 如何选择版本，可以去看看<a href="http://echarts.baidu.com/download.html">这里</a>)，然后在<code>&lt;/body&gt;</code>前插入脚本：<code>&lt;script src=&quot;echarts.min.js&quot;&gt;&lt;/script&gt;</code> 。</p><p>随后通过<code>echarts</code>提供的 API 初始化目标容器节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 echarts</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>));</span><br></pre></td></tr></table></figure><p>接着我们需要填写配置项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  <span class="comment">// 全局 tooltip ,</span></span><br><span class="line">  tooltip: &#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 坐标轴触发</span></span><br><span class="line">    trigger: <span class="string">&#x27;axis&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图例组件，也就是提供显示或隐藏某一条数据信息开关</span></span><br><span class="line">  legend: &#123;</span><br><span class="line">    <span class="comment">// 组件在底部显示</span></span><br><span class="line">    bottom: <span class="string">&#x27;0px&#x27;</span>,</span><br><span class="line">    <span class="comment">// 图例每项之间的间隔</span></span><br><span class="line">    itemGap: <span class="number">46</span>,</span><br><span class="line">    <span class="comment">// 图例的数据数组, 省略则自动从 series.name 中获取</span></span><br><span class="line">    <span class="comment">// 但我们需要定制样式，因此我们添上去上去</span></span><br><span class="line">    data: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&#x27;曝光量&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;circle&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">&#x27;点击量&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;circle&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 文字样式</span></span><br><span class="line">    textStyle: &#123;</span><br><span class="line">      color: <span class="string">&#x27;#276dcc&#x27;</span>,</span><br><span class="line">      fontSize: <span class="number">14</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 重设全局调色盘的颜色，比如当前涉嫌图示例中有两条数据</span></span><br><span class="line">  <span class="comment">// 那这两条数据就会取得我们当前设置颜色作为展示</span></span><br><span class="line">  color: [<span class="string">&#x27;#42a66a&#x27;</span>, <span class="string">&#x27;#276dcc&#x27;</span>],</span><br><span class="line">  <span class="comment">// 网格布局</span></span><br><span class="line">  grid: &#123;</span><br><span class="line">    <span class="comment">// 下面三个是离容器的位置</span></span><br><span class="line">    left: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">    right: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">    bottom: <span class="string">&#x27;40px&#x27;</span>,</span><br><span class="line">    <span class="comment">// 坐标刻度，默认是false</span></span><br><span class="line">    containLabel: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// X轴配置</span></span><br><span class="line">  xAxis: &#123;</span><br><span class="line">    type: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">    boundaryGap: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 坐标轴配置</span></span><br><span class="line">    axisLine: &#123;</span><br><span class="line">      lineStyle: &#123;</span><br><span class="line">        color: <span class="string">&#x27;#d6dfea&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 坐标轴上的 label 样式</span></span><br><span class="line">    axisLabel: &#123;</span><br><span class="line">      margin: <span class="number">18</span>,</span><br><span class="line">      fontSize: <span class="number">14</span>,</span><br><span class="line">      color: <span class="string">&#x27;#56749d&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 类目数据，只有在 type: &#x27;category&#x27; 中有效。</span></span><br><span class="line">    <span class="comment">// 一般情况下我们并不会手动写死数据进去，而是通过 Ajax 请求数据来展示</span></span><br><span class="line">    data: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Y轴配置</span></span><br><span class="line">  yAxis: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 数值轴</span></span><br><span class="line">      type: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;点击量&#x27;</span>,</span><br><span class="line">      <span class="comment">// 左侧显示</span></span><br><span class="line">      position: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">      <span class="comment">// 下面的样式不再多说</span></span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          color: <span class="string">&#x27;#d6dfea&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        margin: <span class="number">18</span>,</span><br><span class="line">        fontSize: <span class="number">14</span>,</span><br><span class="line">        color: <span class="string">&#x27;#56749d&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;曝光量&#x27;</span>,</span><br><span class="line">      position: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">      axisLine: &#123;</span><br><span class="line">        lineStyle: &#123;</span><br><span class="line">          color: <span class="string">&#x27;#d6dfea&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      axisLabel: &#123;</span><br><span class="line">        margin: <span class="number">18</span>,</span><br><span class="line">        fontSize: <span class="number">14</span>,</span><br><span class="line">        color: <span class="string">&#x27;#56749d&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 系列列表, 这个是数据的关键所在</span></span><br><span class="line">  series: [</span><br><span class="line">    <span class="comment">// 如果 legend.data 设置了数据的话，那么 series 的数目需要和 legend.data 的数目一致。</span></span><br><span class="line">    <span class="comment">// 否则图表会不工作 !!</span></span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;点击量&#x27;</span>,</span><br><span class="line">      <span class="comment">// 图表的类型，在这个示例中我们使用是折线图</span></span><br><span class="line">      type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      yAxisIndex: <span class="number">1</span>,</span><br><span class="line">      <span class="comment">// 系列中的数据内容数组</span></span><br><span class="line">      <span class="comment">// 同样的，我们主要展示的数据来自于服务端</span></span><br><span class="line">      data: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;曝光量&#x27;</span>,</span><br><span class="line">      type: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">      <span class="comment">// 折线图一维数据可能是这种形式的数组</span></span><br><span class="line">      <span class="comment">// [1, 2, 3, 1, 4]</span></span><br><span class="line">      data: []</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>随后可以通过 Ajax 获取数据，再使用<code>setOption</code>来设置选项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: url,</span><br><span class="line">  method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  config.series[<span class="number">0</span>].data = res.data.click;</span><br><span class="line">  config.series[<span class="number">1</span>].data = res.data.exposure;</span><br><span class="line">  config.xAxis.data = res.data.xAxis;</span><br><span class="line"></span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如此，这样我们定义的 echarts 就完成啦~</p><img data-src="/blog/2018/06/28/how-to-use-echart/echarts.png" class=""><hr><h2 id="Vue-组件"><a href="#Vue-组件" class="headerlink" title="Vue 组件"></a>Vue 组件</h2><p>在<code>vue</code>中封装组件也不难，大致如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;data-echart&#x27;, echartClass ]&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;data-echart__header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header__title&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title-name&quot;</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    &lt;el-popover</span><br><span class="line">                        v-if=&quot;tooltip&quot;</span><br><span class="line">                        ref=&quot;tooltip&quot;</span><br><span class="line">                        placement=&#x27;bottom&#x27;</span><br><span class="line">                        trigger=&#x27;hover&#x27;&gt;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;tooltip&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-popover</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-question&quot;</span> <span class="attr">v-popover:tooltip</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;echartId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;echart__main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;echart&#x27;</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    echartClass: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    option: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">default</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    loading: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">domEchartId</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> (<span class="built_in">document</span> || <span class="built_in">window</span>.document).getElementById(<span class="built_in">this</span>.echartId);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 随机生成一个ID</span></span></span><br><span class="line"><span class="javascript">      echartId: <span class="built_in">this</span>.randomChar(<span class="number">20</span>),</span></span><br><span class="line"><span class="javascript">      myChart: <span class="literal">null</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    option: &#123;</span><br><span class="line"><span class="javascript">      deep: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">handler</span>(<span class="params">newVal</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.update(newVal);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">loading</span>(<span class="params">newVal</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.toggleLoading(newVal);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.init();</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 调起loading</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">toggleLoading</span>(<span class="params">flag</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      flag ? <span class="built_in">this</span>.myChart.showLoading() : <span class="built_in">this</span>.myChart.hideLoading();</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.myChart = echarts.init(<span class="built_in">this</span>.domEchartId);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.myChart.on(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;clickEchart&#x27;</span>, params);</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 绘制图表</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.myChart.setOption(<span class="built_in">this</span>.option);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// Object.keys(this.data).length !== 0 &amp;&amp; this.myChart.setOption(this.data);</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">update</span>(<span class="params">data</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.myChart.setOption(data);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 生成随机字符串</span><br><span class="line"><span class="javascript">     * @param &#123; <span class="built_in">Number</span> &#125; len - 指定随机字符串的长度</span></span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">randomChar</span>(<span class="params">len</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> x = <span class="string">&#x27;0123456789qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> tmp = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="javascript">        tmp += x.charAt(<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">100000000</span>) % x.length);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> tmp;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&#x27;scss&#x27;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="keyword">@import</span> <span class="string">&#x27;~Scss/theme&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line">.data-echart &#123;</span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line">&#125;</span><br><span class="line">.data-echart__header &#123;</span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">.header__title &#123;</span><br><span class="line">  .title-name &#123;</span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: $f-color--title;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .el-icon-question &#123;</span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: $f-color--tip;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.echart__main &#123;</span><br><span class="line"><span class="css">  <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要将组件放入一个设有高度的容器上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 600px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">echart</span> <span class="attr">:option</span>=<span class="string">&quot;charts.option&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">echart</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用的方式也面类似。首先声明一个基础的配置作为模板，在通过 ajax 拿到数据。通过动态数据传入组件内，组件<code>watch</code>到数据变化后立即重新渲染：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 某处集中封装的 ajax 请求</span></span><br><span class="line"><span class="keyword">import</span> API <span class="keyword">from</span> <span class="string">&#x27;Common/apis&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上配置</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      charts: &#123;</span><br><span class="line">        title: <span class="string">&#x27;My charts&#x27;</span></span><br><span class="line">        option： config</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;，</span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    API.getChartData()</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = res.data</span><br><span class="line">        <span class="built_in">this</span>.charts.option.xAxis.data = data.xAxis;</span><br><span class="line">        <span class="built_in">this</span>.charts.option.series[<span class="number">0</span>].data = data.click;</span><br><span class="line">        <span class="built_in">this</span>.charts.option.series[<span class="number">1</span>].data = data.exposure;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Echarts </tag>
            
            <tag> 图表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锚点定位导航</title>
      <link href="/blog/2018/06/09/javascript-position-navigation/"/>
      <url>/blog/2018/06/09/javascript-position-navigation/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/06/09/javascript-position-navigation/banner.jpg" class=""><p>一般我们翻阅百科的时候，如果文章过长的话，就不太方便找到我们想要的资源。此时有一个定位导航的话，那可真是帮大忙了~今天，就来聊聊这种常见的锚点定位导航的原理以及是如何实现的。</p><span id="more"></span><hr><h2 id="定位原理"><a href="#定位原理" class="headerlink" title="定位原理"></a>定位原理</h2><p>首先我们来了解一下，什么锚点？</p><p>在海上，水手们会将锚丢入海中，或者靠岸时将锚抛上岸，其固定目的是让船固定位置。而**锚点(anchor)**也是一样，只不过场景不同罢了。</p><p>页面锚点定位可以通过<code>name</code>或者<code>id</code>属性来定位。<code>name</code>已经被<code>HTML5</code>废弃了，就不再多提。</p><p>在页面上，每个<code>id</code>都会自动创建一个锚点，同时还会生成一个<code>hash</code>，表示所处的文档位置。浏览器可以通过<code>hash</code>来确定位置，使用的方式一般如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#title&quot;</span>&gt;</span>跳到title<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 地址栏后会加上一段 # 开头的 hash --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://anran758.github.io/blog/#title --&gt;</span></span><br></pre></td></tr></table></figure><p>这个<code>hash</code>值我们可以通过浏览器的API<code>location.hash</code>取到。但值得注意的是，跳转<code>hash</code>的话是不会像服务端发送请求的(除了第一次请求页面)。</p><h2 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h2><p>但我们光知道跳转的原理可不够，只要你尝试了上面的跳转方法后，你会发现浏览器跳转方式是很唐突的。它会直愣愣的跳到指定位置(或者没有找到指定位置会，跳到页面最上面)，这在用户看来是十分生硬的，在体验上这个交互并不太友好。这时产品就会要求我们对此处进行优化~ 不过知道了上面的原理后，我们也可以直接使用js的方式来代替这种原生的默认跳转：</p><p>首先我们页面的结构大致如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;actived&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#title1&quot;</span>&gt;</span>第一组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#title2&quot;</span>&gt;</span>第二组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#title3&quot;</span>&gt;</span>第三组图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">&quot;title1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">&quot;title2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">id</span>=<span class="string">&quot;title3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 许多内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面布局固定了后，元素离页面顶部的距离可以通过<code>offsetTop</code>来获取到。同时我们可以操作滚动容器(html)的<code>scrollTop</code>来修改滚动位置。嘿，这样一上(目标距离顶部的高度)一下(滚动条)，两个<code>API</code>双剑合璧后，我们就可以点击模拟滚动啦..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery 环境</span></span><br><span class="line"><span class="keyword">var</span> $menu = $(<span class="string">&#x27;.nav&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> $menuList = $menu.find(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给超链接绑定点击事件</span></span><br><span class="line">$menuList.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $this = $(<span class="built_in">this</span>);</span><br><span class="line">  $this.click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $this.attr(<span class="string">&#x27;href&#x27;</span>).replace(<span class="regexp">/#/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取目标距离顶部的高度</span></span><br><span class="line">    <span class="keyword">var</span> top = $(<span class="string">&#x27;#&#x27;</span> + id).offset().top - <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给滚动容器加动画的效果，滚动到目标位置</span></span><br><span class="line">    $(<span class="string">&#x27;html&#x27;</span>).animate(&#123; <span class="attr">scrollTop</span>: top &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>蹡蹡！在页面中调试会发现，点击后页面会平滑的滚动到指定的锚点~ 除此之外，我们还得再添加一个功能：在页面滚动的时候，能让用户知道自己所在的位置~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> contentList = $(<span class="string">&#x27;#content&#x27;</span>).find(<span class="string">&#x27;.item&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> top = $(<span class="built_in">document</span>).scrollTop();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取目前滚动条所处的区间</span></span><br><span class="line">  <span class="keyword">var</span> currentID = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  contentList.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $this = $(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前距离顶部的数值</span></span><br><span class="line">    <span class="keyword">var</span> itemTop = $this.offset().top;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前滚动距离已经进入了 item 的区间</span></span><br><span class="line">    <span class="keyword">if</span> (top &gt; itemTop - <span class="number">250</span>) &#123;</span><br><span class="line">      currentID = <span class="string">&#x27;#&#x27;</span> + $this.attr(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> currentLink = $menu.find(<span class="string">&#x27;.actived&#x27;</span>);</span><br><span class="line">  <span class="comment">// 移除其他的类名</span></span><br><span class="line">  <span class="keyword">if</span> (currentID &amp;&amp; currentLink.attr(<span class="string">&#x27;href&#x27;</span>) !== currentID) &#123;</span><br><span class="line">    currentLink.removeClass(<span class="string">&#x27;actived&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    $menu.find(<span class="string">&quot;[href=&#x27;&quot;</span> + currentID + <span class="string">&quot;&#x27;]&quot;</span>).addClass(<span class="string">&#x27;actived&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就锚点定位导航的功能就大功告成啦~ 最后将测试代码放入了<a href="https://codepen.io/anran758/pen/yEVqRa">codepen</a>上了，感兴趣的同学可以去看看。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 业务组件 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将项目资源上传至七牛CDN</title>
      <link href="/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/"/>
      <url>/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/banner.png" class=""><p>在实际工作中，常常会遇到需要将项目中的资源传入 CDN 上，以提升用户的加载速度。七牛就是国内一个挺有名的服务商，今天就来分享一下，如何将项目资源上传至七牛吧~</p><span id="more"></span><p>一般情况下，我们开发中会有一个脚手架，里面搭建了我们的开发环境，我们通过<code>npm</code>安装七牛的 API 客户端，<code>npm install -D qn</code>。随后我们在 build 目录下(这里我们习惯将脚手架相关的代码放在此处..)创建一个名为<code>upload.js</code>的文件。</p><p>一般  我们的代码打包后会放在一个<code>dist</code>目录下，我们通过 Node.js 查找我们想要  上传的所有文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义指定目录，以及过滤掉多余的系统文件</span></span><br><span class="line"><span class="keyword">const</span> distPath = <span class="string">&#x27;dist&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> ignore = [<span class="string">&#x27;.DS_Store&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取全部文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123; String &#125;</span> <span class="variable">dir</span></span> - 指定目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123; Array &#125;</span> </span>返回待上传的文件数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllFiles</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> paths = fs.readdirSync(dir);</span><br><span class="line">    <span class="keyword">let</span> files = [];</span><br><span class="line"></span><br><span class="line">    paths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取文件相关信息</span></span><br><span class="line">      <span class="keyword">let</span> dirname = path.resolve(dir, <span class="string">&#x27;./&#x27;</span>, file);</span><br><span class="line">      <span class="keyword">let</span> stat = fs.lstatSync(dirname);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 过滤文件</span></span><br><span class="line">      <span class="keyword">let</span> filter = ignore.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v === file;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (filter.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!stat.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">// 如果是文件的话，就转为将绝对路径转为相对路径</span></span><br><span class="line">        <span class="comment">// users/xxx/project/dist/static/js/vendors.js</span></span><br><span class="line">        <span class="comment">// =&gt; ./dist/static/js/vendors.js&#x27;</span></span><br><span class="line">        files.push(dirname.replace(rootPath, <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 文件夹，递归继续查找文件</span></span><br><span class="line">        files = files.concat(getAllFiles(dirname));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok~ 有了文件列表后，接着我们就要考虑上传的问题啦。不过在这之前，我们还需要再做一些准备…我们要先去<a href="https://portal.qiniu.com/user/key">七牛开发者平台</a>获取签名信息，用来作为上传的凭证。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/base.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// other configuration...</span></span><br><span class="line">  cdn: &#123;</span><br><span class="line">    <span class="comment">// https://portal.qiniu.com/user/key</span></span><br><span class="line">    accessKey: <span class="string">&#x27;your access key&#x27;</span>,</span><br><span class="line">    secretKey: <span class="string">&#x27;your secret key&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://portal.qiniu.com/bucket/koudaifm/index</span></span><br><span class="line">    bucket: <span class="string">&#x27;project&#x27;</span>,                    <span class="comment">// 就是储存空间的域名，一般来说也是你的项目名</span></span><br><span class="line">    origin: <span class="string">&#x27;http://fs.project.com&#x27;</span>,      <span class="comment">// 外链域名，这个可以自己设置，一开始七牛会分配给你一个随机的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://developer.qiniu.com/kodo/manual/1671/region-endpoint</span></span><br><span class="line">    <span class="comment">// 这个是跟项目所在的储存区域相对应的，比如华南地区的就是这个示例的uploadURL</span></span><br><span class="line">    uploadURL: <span class="string">&#x27;http://up-z2.qiniu.com&#x27;</span>,</span><br><span class="line">    <span class="comment">// timeout: 3600000                   // 超时，唔..这里姑且不需要</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/05/24/node-%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%B8%83%E7%89%9BCDN/qiniu.png" class="" title="七牛储存空间"><hr><p>考虑到上传资源时，可能会碰到资源已存在的问题，这时就需要再额外创建一个函数来处理这个问题~ 然后我们开始封装上传函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">&#x27;colors&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将配置项放到单独文件上，统一改起来也方便..</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../config/base&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pluginName = <span class="built_in">require</span>(<span class="string">&#x27;../package.json&#x27;</span>).name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> client = qn.create(config.cdn);</span><br><span class="line"><span class="keyword">let</span> done = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除七牛资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnDelete</span>(<span class="params">key, cb</span>) </span>&#123;</span><br><span class="line">  client.delete(key, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Delete &#x27;</span>.yellow + <span class="string">&#x27;success&#x27;</span>.green + <span class="string">&#x27;: &#x27;</span>, key);</span><br><span class="line">      cb &amp;&amp; cb();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;Delete &#x27;</span>.yellow + <span class="string">&#x27;error&#x27;</span>.red + <span class="string">&#x27;: &#x27;</span>,</span><br><span class="line">        err.name + <span class="string">&#x27; [code: &#x27;</span> + err.code + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnUpload</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 上传到七牛对应的(bucket)下</span></span><br><span class="line">  <span class="keyword">var</span> key = pluginName + dir.replace(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  client.uploadFile(dir, &#123; <span class="attr">key</span>: key &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Upload &#x27;</span> + <span class="string">&#x27;success&#x27;</span>.green + <span class="string">&#x27;: &#x27;</span>, result.key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果目标资源已存在，七牛会返回一个 614 的错误码</span></span><br><span class="line">      <span class="comment">// https://developer.qiniu.com/fusion/kb/1352/the-http-request-return-a-status-code</span></span><br><span class="line">      <span class="keyword">if</span> (err.code === <span class="number">614</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除文件并重试，以最新</span></span><br><span class="line">        qnDelete(key, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          qnUpload(dir);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 报错信息</span></span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;Upload &#x27;</span> + <span class="string">&#x27;error&#x27;</span>.red + <span class="string">&#x27;: &#x27;</span>,</span><br><span class="line">        err.name + <span class="string">&#x27; [code: &#x27;</span> + err.code + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (++done === filesLength) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Upload <span class="subst">$&#123;distPath&#125;</span>/** to qiniu CDN.\n`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对每个文件调用 qnUpload</span></span><br><span class="line">myFiles.forEach(qnUpload);</span><br></pre></td></tr></table></figure><hr><p>锵锵！一个可复用的上传组件就这么出现啦~ 最后上完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> qn = <span class="built_in">require</span>(<span class="string">&#x27;qn&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">&#x27;colors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../config/base&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pluginName = <span class="built_in">require</span>(<span class="string">&#x27;../package.json&#x27;</span>).name;</span><br><span class="line"><span class="keyword">const</span> rootPath = path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> distPath = <span class="string">&#x27;dist&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> ignore = [<span class="string">&#x27;.DS_Store&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取全部文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123; String &#125;</span> <span class="variable">dir</span></span> - 指定目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123; Array &#125;</span> </span>返回待上传的文件数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllFiles</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> paths = fs.readdirSync(dir);</span><br><span class="line">    <span class="keyword">let</span> files = [];</span><br><span class="line"></span><br><span class="line">    paths.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获取文件信息</span></span><br><span class="line">      <span class="keyword">let</span> dirname = path.resolve(dir, <span class="string">&#x27;./&#x27;</span>, file);</span><br><span class="line">      <span class="keyword">let</span> stat = fs.lstatSync(dirname);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> filter = ignore.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v === file;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (filter.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!stat.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">// 如果是文件的话，就转为将绝对路径转为相对路径</span></span><br><span class="line">        <span class="comment">// users/xxx/project/dist/static/js/vendors.js</span></span><br><span class="line">        <span class="comment">// =&gt; ./dist/static/js/vendors.js&#x27;</span></span><br><span class="line">        files.push(dirname.replace(rootPath, <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 递归重复查找文件</span></span><br><span class="line">        files = files.concat(getAllFiles(dirname));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e + <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myFiles = getAllFiles(distPath);</span><br><span class="line"><span class="keyword">const</span> filesLength = myFiles.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 七牛上传配置</span></span><br><span class="line"><span class="comment">// https://www.npmjs.com/package/qn#upload</span></span><br><span class="line"><span class="keyword">let</span> client = qn.create(config.cdn);</span><br><span class="line"><span class="keyword">let</span> done = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除七牛资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnDelete</span>(<span class="params">key, cb</span>) </span>&#123;</span><br><span class="line">  client.delete(key, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Delete &#x27;</span>.yellow + <span class="string">&#x27;success&#x27;</span>.green + <span class="string">&#x27;: &#x27;</span>, key);</span><br><span class="line">      cb &amp;&amp; cb();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;Delete &#x27;</span>.yellow + <span class="string">&#x27;error&#x27;</span>.red + <span class="string">&#x27;: &#x27;</span>,</span><br><span class="line">        err.name + <span class="string">&#x27; [code: &#x27;</span> + err.code + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传资源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qnUpload</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 上传到七牛对应的(bucket)下</span></span><br><span class="line">  <span class="keyword">var</span> key = pluginName + dir.replace(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  client.uploadFile(dir, &#123; <span class="attr">key</span>: key &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Upload &#x27;</span> + <span class="string">&#x27;success&#x27;</span>.green + <span class="string">&#x27;: &#x27;</span>, result.key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果目标资源已存在，七牛会返回一个 614 的错误码</span></span><br><span class="line">      <span class="comment">// https://developer.qiniu.com/fusion/kb/1352/the-http-request-return-a-status-code</span></span><br><span class="line">      <span class="keyword">if</span> (err.code === <span class="number">614</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除文件并重试</span></span><br><span class="line">        qnDelete(key, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          qnUpload(dir);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 报错信息</span></span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;Upload &#x27;</span> + <span class="string">&#x27;error&#x27;</span>.red + <span class="string">&#x27;: &#x27;</span>,</span><br><span class="line">        err.name + <span class="string">&#x27; [code: &#x27;</span> + err.code + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (++done === filesLength) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Upload <span class="subst">$&#123;distPath&#125;</span>/** to qiniu CDN.\n`</span>);</span><br><span class="line"></span><br><span class="line">myFiles.forEach(qnUpload);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> JavaScirpt </tag>
            
            <tag> 七牛 </tag>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的几种压缩图片的思路</title>
      <link href="/blog/2018/05/08/canvas-compress-prictures/"/>
      <url>/blog/2018/05/08/canvas-compress-prictures/</url>
      
        <content type="html"><![CDATA[<!-- TODO: 整理现成可用的方案，vip-litle --><img data-src="/blog/2018/05/08/canvas-compress-prictures/banner.png" class=""><p>在做 H5 开发时，难免会遇到有需要上传图片的需求。这种需要我们去引入一些库，或者自己来实现这么个功能。那么一般是如何去处理压缩图片的需求呢？这里简要的概述一下实现原理~</p><span id="more"></span><p>目前主流对图片进行处理都是使用<code>canvas</code>技术~当我们碰到需要压缩图片的场景时，第一种我们就可以尝试控制图片的尺寸。因为图片的尺寸越大，里面包含的信息就越多，自然体积也随着增加了起来。</p><p>我们可以做一个宽高的限制，超出就对其进行尺寸的缩放。那么限制最大值是多少呢？这个应该根据产品或者需求来调整。当然，裁剪图片也是一种思路，那么该如何去裁剪，让用户选择还是我们自定义？这也是需要考虑的一点。</p><p>判断缩放的方法主要使用<code>drawImage</code>将图片导入canvas，如果图片超过了指定的宽高，就进行缩放图片。关于这一点，我觉得张鑫旭老师的<a href="http://www.zhangxinxu.com/wordpress/2017/07/html5-canvas-image-compress-upload/">这篇文章</a>讲的已经足够简洁的了，感兴趣的同学可以看这边~</p><hr><p>第二种就是使用<code>canvas</code>提供的另一个接口：<code>canvas.toDataURL(type, encoderOptions)</code>。这是浏览器原生提供可以压缩图片的方法，该方法返回一个包含图片展示的<code>data URI</code>(也就是我们常说的base64)。</p><p>它接受两个可选参数，我们可以使用<code>type</code>参数指定其类型，默认为<code>PNG</code>格式。<code>encoderOptions</code>则是压缩图片质量参数，区间在 0~1 之间。值得注意的是，<strong>压缩图片质量这个参数只对<code>image/jpeg</code>或<code>image/webp</code>有效</strong>。所幸的是，其他格式用不了压缩图片的参数，但浏览器还是会对图片进行压缩处理，剔除对 web 展示没啥用的元数据(虽然可能会涉及到版权纠纷的问题)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="comment">// 中间处理的过程省略 ...</span></span><br><span class="line"><span class="keyword">var</span> fullQuality = canvas.toDataURL(<span class="string">&quot;image/jpeg&quot;</span>, <span class="number">0.8</span>);</span><br></pre></td></tr></table></figure><p>但单单是转为 base64 是不能满足我们一些需求的，这时我们可能会想要让它再转为对服务端友好的<code>blob</code>类型。<br>这时我们就需要用到<code>window.atob()</code>, 将已经编译成 base64 的字符串解码为二进制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> type = fullQuality.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码为二进制</span></span><br><span class="line"><span class="keyword">var</span> binStr = atob(fullQuality.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">var</span> length = binStr.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个缓存区，容器大小可以容纳 binStr.</span></span><br><span class="line"><span class="comment">// 这个缓存区我们是不能直接操作的。</span></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(binStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立`Uint8Array`类型数组</span></span><br><span class="line"><span class="comment">// 这样我们就可以通过对象的方法或者数组索引读写里面的数据啦</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// var buff = new ArrayBuffer(4);   =&gt; ArrayBuffer(4) &#123;&#125;</span></span><br><span class="line"><span class="comment">// var arr = new Uint8Array(buff);  =&gt; Uint8Array(4) [0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">// arr[2] = 8;</span></span><br><span class="line"><span class="comment">// console.log(buff)    =&gt; 缓存区和 Uint8Array 同时被修改了</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">  <span class="comment">// 逐个查询 binStr 里的二进制 Unicode 编码，并存入类型数组中</span></span><br><span class="line">  arr[i] = binStr.charCodeAt(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([buffer],&#123; <span class="attr">type</span>: type &#125;</span><br></pre></td></tr></table></figure><p>如果是想转为<code>File</code>类型的话，和上面的方法实现的也一致..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/File/File</span></span><br><span class="line"><span class="comment">// 第一个参数传入 ArrayBuffer 也行，blob 也行..</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="keyword">new</span> File([buff], <span class="string">&quot;img.jpg&quot;</span>, &#123; <span class="attr">type</span>: type &#125;);</span><br></pre></td></tr></table></figure><p>哇，转个类型都看起来好像挺麻烦的样子呢…那么有没有内置的方法呀？答案是有，canvas 里有个<code>toBlob(callback, type, encoderOptions)</code>的方法, 它接受三个参数，一个是将canvas转为<code>blob</code>后接受的回调函数、一个是指定的图片格式、另一个是图片质量，区间也在 0~1 之间。</p><p>看起来这个方法似乎比上面那个更好用呢..然而残念的是，这货还受着兼容性影响，不在乎的兼容性的话倒是可以使用… 不然就需要上一种polyfill 的方式来实现~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">canvas.toBlob(<span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接收转换后的 blob 类型</span></span><br><span class="line">  <span class="comment">// 此时可以在函数里发起请求</span></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: baseURL + <span class="string">&#x27;/uploader/&#x27;</span>,</span><br><span class="line">    data: &#123; <span class="attr">act_id</span>: actID, <span class="attr">pic_1</span>: blob &#125;,</span><br><span class="line">    type: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// success</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="string">&#x27;image/png&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> 图片 </tag>
            
            <tag> 图片压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈CSS3 Matrix 的使用</title>
      <link href="/blog/2018/05/06/%E8%B0%88%E8%B0%88CSS3-Matrix-%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/blog/2018/05/06/%E8%B0%88%E8%B0%88CSS3-Matrix-%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/05/06/%E8%B0%88%E8%B0%88CSS3-Matrix-%E7%9A%84%E7%90%86%E8%A7%A3/banner.png" class=""><p>CSS3的<code>transform</code>里有一个方法叫做<code>Matrix</code>，该需要六个参数，可以使用数学函数让元素进行旋转、缩放、移动以及倾斜元素。</p><p>光是看这名词好像有点吓人，仿佛又回想起当初被数学支配的恐惧。的确，相比那些<code>translate(25deg)</code>之类有着明确语义跟容易调用方法外，<code>Matrix</code>使用起来确实有些复杂~</p><span id="more"></span><p><code>Matrix</code>的参数分别有a, b, c, d, e, f六个参数，我们可以分别对应：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">matrix</span>(X轴的缩放， X轴拉升, Y轴的拉伸, Y轴的缩放, X轴的位移, Y轴的位移);</span><br></pre></td></tr></table></figure><p>这样看上去好像好多了，我们常使用的几个方法也是可以通过Matrix来实现：</p><p>元素默认情况下的表现可以用<code>Matrix</code>来表示为：<code>matrix(1, 0, 0, 1, 0, 0)</code>;</p><p>通过上面的例子，我们很容易推测出缩放的公式为：<code>translate(sx, sy)</code>等于<code>matrix(sx, 0, 0, sy, 0, 0)</code>;</p><p>位移就更简单啦： <code>translate(tx, ty)</code>等于<code>matrix(1, 0, 0, 1, tx, ty)</code>;</p><p>拉升则是：<code>skew(degx, degy)</code>等于<code>matrix(1, tan(degx), tan(degy), 1, 0, 0)</code></p><p>旋转没有提供相应的参数，他需要套用数学的公式，毕竟这个方法名就是<code>矩阵</code>嘛：<code>rotate(deg)</code>等于<code>matrix(cos(deg),sin(deg), -sin(deg), cos(deg), 0, 0)</code></p><hr><p>那问题来了，为啥有简单易用的方法不用，我们非要搞这么麻烦的东西呢？这是因为很多时候我们需要高度精确定制动画时，那些简单的方法以及不能满足我们的需求啦~</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
            <tag> CSS </tag>
            
            <tag> transform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-flow 练习笔记</title>
      <link href="/blog/2018/04/23/git-flow/"/>
      <url>/blog/2018/04/23/git-flow/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/04/23/git-flow/banner.png" class=""><p>在我们团队开发中，必不可免会使用到版本控制。同时还需要一个统一的工作流程，创建新的功能、打补丁、正式版发布打tag等等，git-flow工作流就这些繁琐的东西简化了，它封装了git命令，将命令组合了起来，我们只需要几行代码就能解决这些繁琐的工作。正好工作也有好一段时间了，想将这方面的知识梳理一下。</p><span id="more"></span><p>git flow 有好几个版本，这里笔者演示使用的是<a href="https://github.com/petervanderdoes/gitflow-avh">git-flow-avh</a>的版本。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先我们先开始初始化仓库的工作流，我们在命令行使用<code>git flow init</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git flow init</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (<span class="built_in">local</span>) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (global) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (system) on this platform</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (file) on this platform</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">No branches exist yet. Base branches must be created now.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命令行出现了警告，告诉我们还没有基础的分支。这是因为测试是全新的仓库作测试，这个我们姑且先不管它，接着引导会向我们确定需要初始化分支的名字，我们都采用默认即可。<br>直到询问<code>Version tag prefix</code>时，我们采用<code>v</code>作版本前缀，这其实也是很常见的一种习惯。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Branch name <span class="keyword">for</span> production releases: [master]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line"></span><br><span class="line">Branch name <span class="keyword">for</span> <span class="string">&quot;next release&quot;</span> development: [develop]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line"></span><br><span class="line">How to name your supporting branch prefixes?</span><br><span class="line">Feature branches? [feature/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Bugfix branches? [bugfix/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Release branches? [release/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Hotfix branches? [hotfix/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Support branches? [support/]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line"></span><br><span class="line">Version tag prefix? [] v</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Hooks and filters directory? [/Users/anran/MyProject/git-flow-test/.git/hooks]</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br></pre></td></tr></table></figure><p>随后我们使用<code>git branch</code>查看一下当前分支，我们会发现，git flow 创建了两条分支————主分支（master）和开发分支（develop），并自动切换到了 develop 上。</p><p>一般来说，我们常将 master 作为部署的分支，这个版本的产品防止稳定的代码和功能，作为产品的一个正式版部署。<br>正常情况下，我们不能直接在 master 分支上进行工作，而该是在 develop 开发环境下进行工作。<br>除此之外，develop 还是一个基础的分支，当我们开发新的功能时，我们会另开一个分支，在新的分支上进行功能开发，等功能开发完毕后再合并进来 develop 分支。</p><p>嘿，我们先创建一个<code>README.md</code>，在里面添加一些文字进去，再提交上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git branch</span><br><span class="line">* develop</span><br><span class="line">  master</span><br><span class="line">➜  git-flow-test git:(develop) touch README.md</span><br><span class="line">➜  git-flow-test git:(develop) ✗ vim README.md</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git add .</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git status</span><br><span class="line">On branch develop</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">  new file:   README.md</span><br><span class="line"></span><br><span class="line">➜  git-flow-test git:(develop) ✗ git commit -m <span class="string">&quot;First commit&quot;</span></span><br><span class="line">[develop 61ec91a] First commit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md</span><br></pre></td></tr></table></figure><p>如果这时直接用<code>push</code>的话，git会提示你没有设定上游分支————别忘了现在我们在使用全新的测试仓库。</p><figure class="highlight plain"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git push</span><br><span class="line">fatal: The current branch develop has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin develop</span><br><span class="line"></span><br><span class="line">➜  git-flow-test git:(develop) git push --set-upstream origin develop</span><br><span class="line">Counting objects: 5, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2&#x2F;2), done.</span><br><span class="line">Writing objects: 100% (5&#x2F;5), 385 bytes | 385.00 KiB&#x2F;s, done.</span><br><span class="line">Total 5 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:anran758&#x2F;git-flow-test.git</span><br><span class="line"> * [new branch]      develop -&gt; develop</span><br><span class="line">Branch &#39;develop&#39; set up to track remote branch &#39;develop&#39; from &#39;origin&#39;.</span><br><span class="line">➜  git-flow-test git:(develop)</span><br></pre></td></tr></table></figure><h2 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h2><p>umm..现在假设我们现在碰到了一个需求，需要加一些功能，这时我们就需要开一个功能分支了，这时工作中常用的分支。那为啥都切到开发环境了还要单独开一个分支呢？这是避免产品调皮的说，“刚才那个功能只是我突发奇想，咱们不要了吧(诶嘿.jpg”。嗯，这时宰一个产品祭天事小，污染了全局的开发环境才事大，回退都不好回退（可能团队中其他人也在写一些功能上去或者修复了一些bug上去，回退意味着其他人也会收到影响）。</p><p>而单独开一个分支则没那么多破事需要烦恼，再不济就删除这个分支即可，不需要耗费额外的成本。</p><p>我们先看一下给flow都有啥，使用命令<code>git flow -h</code>会提示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git flow -h</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">usage: git flow &lt;subcommand&gt;</span><br><span class="line"></span><br><span class="line">Available subcommands are:</span><br><span class="line">   init      Initialize a new git repo with support <span class="keyword">for</span> the branching model.</span><br><span class="line">   feature   Manage your feature branches.</span><br><span class="line">   bugfix    Manage your bugfix branches.</span><br><span class="line">   release   Manage your release branches.</span><br><span class="line">   hotfix    Manage your hotfix branches.</span><br><span class="line">   support   Manage your support branches.</span><br><span class="line">   version   Shows version information.</span><br><span class="line">   config    Manage your git-flow configuration.</span><br><span class="line">   <span class="built_in">log</span>       Show <span class="built_in">log</span> deviating from base branch.</span><br><span class="line"></span><br><span class="line">Try <span class="string">&#x27;git flow &lt;subcommand&gt; help&#x27;</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>因为我们现在是想做一个新功能，feature 就是我们想要的命令。我们进一步查看详情：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git flow feature <span class="built_in">help</span></span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">usage: git flow feature [list]</span><br><span class="line">   or: git flow feature start</span><br><span class="line">   or: git flow feature finish</span><br><span class="line">   or: git flow feature publish</span><br><span class="line">   or: git flow feature track</span><br><span class="line">   or: git flow feature diff</span><br><span class="line">   or: git flow feature rebase</span><br><span class="line">   or: git flow feature checkout</span><br><span class="line">   or: git flow feature pull</span><br><span class="line">   or: git flow feature delete</span><br><span class="line"></span><br><span class="line">    Manage your feature branches.</span><br><span class="line"></span><br><span class="line">    For more specific <span class="built_in">help</span> <span class="built_in">type</span> the <span class="built_in">command</span> followed by --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><hr><p>我们使用<code>git flow feature start</code>再加上一个名字，这个名字代表着这个功能分支是做什么的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) git flow feature start home</span><br><span class="line">flags:ERROR short flag required <span class="keyword">for</span> (showcommands) on this platform</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gitflow-common: line 81: [: -eq: unary operator expected</span><br><span class="line">Switched to a new branch <span class="string">&#x27;feature/home&#x27;</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">&#x27;feature/home&#x27;</span> was created, based on <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">- You are now on branch <span class="string">&#x27;feature/home&#x27;</span></span><br><span class="line"></span><br><span class="line">Now, start committing on your feature. When <span class="keyword">done</span>, use:</span><br><span class="line"></span><br><span class="line">     git flow feature finish home</span><br></pre></td></tr></table></figure><p>这时我们创建了一个名为<code>feature/home</code>的新分支，并且切换到了新分支上。feature的前缀就是前面使用默认的功能分支的名字。<br>这个 feature 可以当成一个放置功能的文件夹。</p><p>随后我创建一个 HTML 文件，并在上面写了少许代码假装（雾）完成了这个新功能的开发。<br>使用<code>git flow feature finish &lt;name&gt;</code>完成本回合的开发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(feature/home) ✗ git flow finish home</span><br><span class="line">Switched to branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">Your branch is up to date with <span class="string">&#x27;origin/develop&#x27;</span>.</span><br><span class="line">Already up to date.</span><br><span class="line">Deleted branch feature/home (was 61ec91a).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- The feature branch <span class="string">&#x27;feature/home&#x27;</span> was merged into <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">- Feature branch <span class="string">&#x27;feature/home&#x27;</span> has been locally deleted</span><br><span class="line">- You are now on branch <span class="string">&#x27;develop&#x27;</span></span><br></pre></td></tr></table></figure><p>git flow 将分支合并后，会将<code>feature/home</code>分支删除。这时分支会切换到<code>develop</code>。<strong>注意，这时候的代码还没有提交到远端！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) ✗ git add .</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git commit -m <span class="string">&quot;添加新的功能&quot;</span></span><br><span class="line">[develop 9ca31f9] 添加新的功能</span><br><span class="line"> 1 file changed, 12 insertions(+)</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line">➜  git-flow-test git:(develop) ✗ git push</span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 482 bytes | 482.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:anran758/git-flow-test.git</span><br><span class="line">   61ec91a..9ca31f9  develop -&gt; develop</span><br></pre></td></tr></table></figure><h2 id="正式发布"><a href="#正式发布" class="headerlink" title="正式发布"></a>正式发布</h2><p>好啦，当我们开发的差不多了，bug都修完并且都测试过了，这时就可以考虑部署一版了。这时我们可以使用<code>git flow release start &lt;version number&gt;</code>进入发布的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(develop) ✗ git flow release start 1.0.0</span><br><span class="line">Switched to a new branch <span class="string">&#x27;release/1.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">&#x27;release/1.0.0&#x27;</span> was created, based on <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">- You are now on branch <span class="string">&#x27;release/1.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line">Follow-up actions:</span><br><span class="line">- Bump the version number now!</span><br><span class="line">- Start committing last-minute fixes <span class="keyword">in</span> preparing your release</span><br><span class="line">- When <span class="keyword">done</span>, run:</span><br><span class="line"></span><br><span class="line">     git flow release finish <span class="string">&#x27;1.0.0&#x27;</span></span><br></pre></td></tr></table></figure><p>git flow 基于<code>develop</code>创建了一个新的分支，同时切换到新分支<code>release/1.0.0</code>上了。</p><p>这时我们可以进入最后的准备啦~比如我们一般发布都需要写版本信息，说明这版本都做了什么？新加了哪些功能？修了哪些bug等信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ touch changelog.md</span><br><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ vim changelog.md</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line"><span class="comment"># item name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## v1.0.0 2018/04/23</span></span><br><span class="line"></span><br><span class="line">* 基础功能完善</span><br><span class="line">* 完成巴拉巴拉功能</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">&quot;changelog.md&quot;</span> 6L, 83C</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ git add changelog.md</span><br><span class="line">➜  git-flow-test git:(release/1.0.0) ✗ git commit -m <span class="string">&quot;增加版本号信息&quot;</span></span><br><span class="line">[release/1.0.0 f8464d6] 修改版本号信息</span><br><span class="line"> 1 file changed, 6 insertions(+)</span><br><span class="line"> create mode 100644 changelog.md</span><br></pre></td></tr></table></figure><p>这时暂时先不用push，不过这里值得注意的是，<strong>一般来说，我们只有两个长期分支，一个 develop，另一个是 master分支。例如release 、feature等分支一般不会出现在远程的分支中。这是以为当我们做完这些工作流后，这些分支都会合并删除了。</strong></p><p>等完成这些工作后，我们把发布流程结束，在命令行输入: <code>git flow release finish 1.0.0</code>。git flow将会做以下几个步骤：</p><ul><li><p>pull代码，以确保本地分支的代码都是最新的版本。</p></li><li><p>然后，release 的内容会被合并到 “master” 和 “develop” 两个分支中去，这样不仅产品代码为最新的版本，而且新的功能分支也将基于最新代码。<br>这时命令行会进入vim编辑器里的合并信息页，默认会以<code>Merge branch &#39;release/1.0.0&#39;</code>作为 commit<br>信息提交。我们也可以自己输入一些信息进行描述。(vim编辑器状态下，输入<code>a</code>则进入编辑状态，使用<code>:q</code>为不保存信息退出编辑器，<code>:wq</code>为保存信息并退出vim)。</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Merge branch <span class="string">&#x27;release/1.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Please enter <span class="keyword">a</span> commit message <span class="keyword">to</span> explain why this merge <span class="keyword">is</span> necessary,</span><br><span class="line"># especially <span class="keyword">if</span> it merges <span class="keyword">an</span> updated upstream into <span class="keyword">a</span> topic branch.</span><br><span class="line">#</span><br><span class="line"># Lines starting with <span class="string">&#x27;#&#x27;</span> will <span class="keyword">be</span> ignored, <span class="built_in">and</span> <span class="keyword">an</span> <span class="built_in">empty</span> message aborts</span><br><span class="line"># the commit.</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">&quot;~/MyProject/git-flow-test/.git/MERGE_MSG&quot;</span> <span class="number">7</span>L, <span class="number">256</span>C</span><br></pre></td></tr></table></figure><ul><li>保存后又会进入另一个信息，这次这个是确定版本号信息。我们将<code>v1.0.0</code>前面的<code>#</code>去掉，让其作为tag，<code>v</code>是一开头初始化所用的前缀，而<code>1.0.0</code>则是我们这次发布的名称（版本号）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Write a message for tag:</span></span><br><span class="line"><span class="comment">#   v1.0.0</span></span><br><span class="line"><span class="comment"># Lines starting with &#x27;#&#x27; will be ignored.</span></span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">&quot;~/MyProject/git-flow-test/.git/TAG_EDITMSG&quot;</span> 5L, 84C</span><br></pre></td></tr></table></figure><ul><li>为便于识别和做历史参考，release 提交会被标记上这个 release 的名字。</li><li>清理操作，版本分支会被删除，并且回到 “develop”。</li></ul><h2 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h2><p>上线后，在进行测试时会可能会发现之前没有留意到的小bug，比如展示的数据调错了字段，当bug修复后，这时就可以使用git flow 里的<code>hotfix</code>，用来表示bug的修复。值得注意的是，<code>hotfix</code>与之前两个分支有些不同，<code>hotfix</code>是基于<code>master</code>主分支的修复，而前面两者是基于<code>develop</code>分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(master) git flow hotfix start v1.0.1hotfix</span><br><span class="line">Switched to a new branch <span class="string">&#x27;hotfix/v1.0.1hotfix&#x27;</span></span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- A new branch <span class="string">&#x27;hotfix/v1.0.1hotfix&#x27;</span> was created, based on <span class="string">&#x27;master&#x27;</span></span><br><span class="line">- You are now on branch <span class="string">&#x27;hotfix/v1.0.1hotfix&#x27;</span></span><br><span class="line"></span><br><span class="line">Follow-up actions:</span><br><span class="line">- Start committing your hot fixes</span><br><span class="line">- Bump the version number now!</span><br><span class="line">- When <span class="keyword">done</span>, run:</span><br><span class="line"></span><br><span class="line">     git flow hotfix finish <span class="string">&#x27;fixShoppingCart&#x27;</span></span><br></pre></td></tr></table></figure><p>然后你会看到git flow会提示你：</p><ul><li>开始修复你bug</li><li>修复bug也是需要影响版本号的</li><li>完成上述工作后就可以结束这个补丁啦~</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) vim index.html</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ vim changelog.md</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ git add .</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) ✗ git commit -m <span class="string">&quot;fixed shopping cart bug&quot;</span></span><br><span class="line">[hotfix/v1.0.1hotfix 1506b7f] fixed shopping cart bug</span><br><span class="line"> 2 files changed, 4 insertions(+), 2 deletions(-)</span><br><span class="line">➜  git-flow-test git:(hotfix/v1.0.1hotfix) git flow hotfix finish v1.0.1hotfix</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> changelog.md | 2 ++</span><br><span class="line"> index.html   | 4 ++--</span><br><span class="line"> 2 files changed, 4 insertions(+), 2 deletions(-)</span><br><span class="line">Switched to branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">Your branch is up to date with <span class="string">&#x27;origin/develop&#x27;</span>.</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> changelog.md | 8 ++++++++</span><br><span class="line"> index.html   | 4 ++--</span><br><span class="line"> 2 files changed, 10 insertions(+), 2 deletions(-)</span><br><span class="line"> create mode 100644 changelog.md</span><br><span class="line">Deleted branch hotfix/v1.0.1hotfix (was 1506b7f).</span><br><span class="line"></span><br><span class="line">Summary of actions:</span><br><span class="line">- Hotfix branch <span class="string">&#x27;hotfix/v1.0.1hotfix&#x27;</span> has been merged into <span class="string">&#x27;master&#x27;</span></span><br><span class="line">- The hotfix was tagged <span class="string">&#x27;vv1.0.1hotfix&#x27;</span></span><br><span class="line">- Hotfix tag <span class="string">&#x27;vv1.0.1hotfix&#x27;</span> has been back-merged into <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">- Hotfix branch <span class="string">&#x27;hotfix/v1.0.1hotfix&#x27;</span> has been locally deleted</span><br><span class="line">- You are now on branch <span class="string">&#x27;develop&#x27;</span></span><br></pre></td></tr></table></figure><p>我们使用<code>git flow hotfix finish v1.0.1hotfix</code>结束工作流后，跟之前那样会出现合并的信息，如果需要的话，就添加相应秒速信息，再保存退出即可。</p><p>这时会将修复的部分同时合并到<code>master</code>和<code>develop</code>分支上，同时会为这次hotfix打上 tag。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>bugfix</code>，它也是修复bug分支。看到这里就会有同学会疑问了：“啥？又改bug，这和之前那个又有啥区别？”。</p><p>原来它与<code>hotbug</code>不同的是，它是基于<code>develop</code>分支的。事实上这一个工作流在笔者的日常开发中用的比较少，似乎有些gif flow 的模型中都没有这个工作流，不过我也没有深入的去考证~因为目前没有遇到碰到这个的场景，了解的同学不妨留言讨论分享一下。</p><p>除此之外还有一个<code>support</code>的功能，是想用来支持以前的版本产品，这是一个实验性的功能，不太建议使用这个。</p><p>如果你偏爱于可视化的git的话，如同 Sourcetree 之类的 Git GUI 也内置有git flow。</p><img data-src="/blog/2018/04/23/git-flow/img-1.png" class="" title="Mac下的Sourcetree"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>git flow实际上就一连串命令的组合，我们也可以单个单个的输入命令达到同样的效果。虽说git flow统一了工作流程，但并不是适用于全部的场景。项目中只有一个人时却反而会显得有点繁琐了。我们应该根据实际项目去选择符合项目的工作流。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> git flow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识网络原理: 从浏览器地址栏输入 URL 到页面渲染之间都经历了什么</title>
      <link href="/blog/2018/04/06/URL-to-browser/"/>
      <url>/blog/2018/04/06/URL-to-browser/</url>
      
        <content type="html"><![CDATA[<p>【多图长文预警，建议先码】在浏览器地址栏输入 URL 到页面渲染之间都经历了什么？这是一道很经典的问题，可以很全面的考验面试者对于网络知识的理解。这之间的过程是一环套一环，下面笔者通过这题来科普一下基础的网络知识。</p><span id="more"></span><p><strong>太长不看简易版</strong></p><ol><li>用户在浏览器输入 URL</li><li>浏览器尝试读取 URL 的缓存</li><li>无缓存则开始查 URL 域名的 ip，也就是 DNS 查找</li><li>开始建立 TCP 链接，经过三次握手成功建立连接</li><li>客户端开始发送数据</li><li>服务端将用户所需的资源返回给客户端</li><li>若返回的是 HTML 文档的话，浏览器开始解析 HTML 文档</li><li>构建 DOM 树、构建 CSSOM 树</li><li>将解析步骤中创建的 CSSOM 树和 DOM 树合成为 Render 树，然后用于计算每个可见元素的布局，最后将其绘制到屏幕上</li></ol><hr><!-- omit in toc --><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%9C%B0%E5%9D%80%E6%A0%8F">地址栏</a></li><li><a href="#url">URL</a></li><li><a href="#ip-%E5%9C%B0%E5%9D%80">IP 地址</a><ul><li><a href="#ipv4">IPv4</a></li><li><a href="#%E5%88%86%E7%B1%BB%E7%BD%91%E7%BB%9C">分类网络</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%88%86%E9%85%8D%E6%96%B9%E6%A1%88">其他分配方案</a></li><li><a href="#ipv6">IPv6</a></li></ul></li><li><a href="#%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9Fdns">域名系统(DNS)</a><ul><li><a href="#dns">DNS</a></li><li><a href="#%E6%9C%AC%E5%9C%B0-dns">本地 DNS</a></li><li><a href="#hosts">hosts</a></li><li><a href="#%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90">域名解析</a></li></ul></li><li><a href="#tcp-%E8%BF%9E%E6%8E%A5">TCP 连接</a></li><li><a href="#https-ssltsl">HTTPS (SSL/TSL)</a></li><li><a href="#http">HTTP</a></li><li><a href="#%E6%B8%B2%E6%9F%93%E6%96%87%E6%A1%A3">渲染文档</a></li><li><a href="#%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB">扩展阅读</a></li><li><a href="#%E5%90%8E%E8%AE%B0">后记</a></li></ul><h2 id="地址栏"><a href="#地址栏" class="headerlink" title="地址栏"></a>地址栏</h2><p>当我们在浏览器地址栏输入信息时，浏览器就已经开始进行工作了。首先它会监听我们输入的信息并尝试匹配出你想要访问的网址或关键词，以 <code>chrome</code> 为例，它会猜我们想要什么，给出下面的建议项：</p><ul><li>使用默认搜索引擎搜索关键字</li><li>书签，历史记录和最近下载中存储的其他链接</li><li>使用默认搜索引擎的相关关键字搜索选项</li></ul><p>我们在地址栏输入知乎首页的链接 <code>zhihu.com</code> 后敲下回车，命令浏览器搜索信息。接着大致会对输入的信息进行以下判断:</p><ol><li>看看输入的是不是一个合法的 <code>URL</code> 链接。</li><li>若是则判断输入的 URL 是否完整。不完整的话，浏览器可能会对域猜测，也就是说尝试通过在输入的内容中添加前缀、后缀或两者来 “补全” <code>URL</code>。比如输入 <code>zhihu.com</code> 则可能会在前面添加 <code>www</code>。</li><li>否，那就将输入的内容作为搜索的条件，使用用户设置的默认搜索引擎来进行搜索</li></ol><img data-src="/blog/2018/04/06/URL-to-browser/search-word.png" class="" title="输入了不规范的 URL"><p>浏览器根据我们输入的信息判断出 <code>zhihu.com</code> 是一个合法 <code>URL</code>，并被补全为 <code>www.zhihu.com</code>。</p><p><strong>本章参考资料:</strong></p><ul><li><a href="https://www.webnots.com/how-to-use-google-chrome-address-bar-for-search/">How to Use Google Chrome Address Bar for Search?</a></li><li><a href="http://kb.mozillazine.org/Location_Bar_search">Location Bar search(Firfox 地址栏的详细行为)</a></li></ul><hr><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>经常上网的朋友经常能听说 <code>URL</code> 这个名词，那么它具体是干嘛用的呢？</p><p><code>URL</code> 全称为**统一资源定位系统(uniform resource locator)**，用于表示一个因特网(Internet)上标准的资源的地址。就像每户人家都会有个门牌地址一样。维基百科对 <code>URL</code> 的术语上是这样解释：</p><p>每个 <code>HTTP URL</code> 都符合通用 <code>URI</code> 的语法(关于 <code>URL</code> 与 <code>URI</code> 的差别参请看下文的列参考资料)。<code>URI</code> 一般语法由五个的分层序列的组分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URI &#x3D; scheme:[&#x2F;&#x2F;authority]path[?query][#fragment]</span><br><span class="line"></span><br><span class="line">URI &#x3D; 方案:[&#x2F;&#x2F;授权]路径[?查询][#片段ID]</span><br></pre></td></tr></table></figure><p>权限组件 (authority) 又分为三个子组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authority &#x3D; [userinfo@]host[:port]</span><br></pre></td></tr></table></figure><p>它在语法图表示为：</p><img data-src="/blog/2018/04/06/URL-to-browser/url-example.png" class=""><p>从术语上看好像有点抽象？没有关系，我们通过浏览器内部提供的 <code>location</code> 的接口来辅助理解，该接口表示其链接到的对象的位置（URL）。</p><p>我们另开一个标签页，随便打开一个较为复杂的 URL，如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;anran758&#x2F;Front-End-Lab&#x2F;tree&#x2F;master&#x2F;css?name&#x3D;anran758&amp;uid&#x3D;234098&amp;shareId&#x3D;456#layout</span><br></pre></td></tr></table></figure><p>接着在控制台的 <code>Console</code> 面板中直接输入 <code>location</code> 并敲下回车，它会输出一个对象，该对象内包含当前页面上的 URL 信息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;href&quot;</span>: <span class="string">&quot;https://github.com/anran758/Front-End-Lab/tree/master/css?name=anran758&amp;uid=234098&amp;shareId=456#layout&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ancestorOrigins&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;origin&quot;</span>: <span class="string">&quot;https://github.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;https:&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;github.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;github.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;pathname&quot;</span>: <span class="string">&quot;/anran758/Front-End-Lab/tree/master/css&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;search&quot;</span>: <span class="string">&quot;?name=anran758&amp;uid=234098&amp;shareId=456&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;hash&quot;</span>: <span class="string">&quot;#layout&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们拿这个对象与 URL 的属于一一对应，就可以清晰看出他们之间的对应关系:</p><table><thead><tr><th>URL 术语</th><th>location 对象的 key</th><th>匹配项</th></tr></thead><tbody><tr><td>scheme</td><td>protocol</td><td><code>https</code></td></tr><tr><td>host</td><td>hostname</td><td><code>github.com</code></td></tr><tr><td>path</td><td>pathname</td><td><code>/anran758/Front-End-Lab/tree/master/css</code></td></tr><tr><td>query</td><td>search</td><td><code>?name=anran758&amp;uid=234098&amp;shareId=456</code></td></tr><tr><td>fragment</td><td>hash</td><td><code>#layout</code></td></tr></tbody></table><ul><li><code>scheme</code>(方案)，多时候情况下也称为 <code>protocol</code>(协议)，尾部跟随一个 <code>:</code> 作为分隔</li><li><code>host</code>(主机名), 它可以是一个 IP 或是一个域名(下文会讲解两者的概念)</li><li><code>path</code>(路径)，以 <code>/</code> 区别每一层目录结构的名称。</li><li><code>query</code>(查询)，以 <code>?</code> 为起点，以 <code>&amp;</code> 分隔键值。<br>在上例中 <code>name</code> 就是键，<code>anran758</code> 就是值。在页面上，前端可以通过 <code>URL</code> 来传递参数；在接口上，后端可以根据 <code>GET</code> 请求取得对应查询条件</li><li><code>fragment</code>(片段)，以 <code>#</code> 为起点的部分。我们通常称这部分为哈希，它在浏览器上有特殊的作用。<br>如果页面上存在一个 <code>id=layout</code> 的元素，那么页面就会滚动到该元素之上。就像我们打开上面给出的示例 <code>URL</code> 后，页面加载后自动滚动在标题为 <code>layout</code> 上。</li></ul><p>以上是我们在地址栏中常见的 <code>URL(URI)</code> 格式，但不够全面。比方说我们带上端口后，直接访问 <code>https://github.com:443</code> 会发现地址栏上并没有显示出端口号，这是为什么呢？</p><p>这是因为如果我们访问的 <code>URL</code> 使用的是以 <code>https</code> 开头的协议，那么 <code>HTTPS</code> 协议的默认的端口就是 <code>443</code>。即便我们特意补全这个端口号，浏览器还是默认会将该端口隐去。</p><p>同理，我们访问的是 <code>http</code> 协议，他的默认端口是 <code>80</code> 端口，也会自动隐藏掉。只有当我们访问与该协议默认端口不一致时，浏览器才会显示出来。比如 <code>http://localhost:8000/analysis/project</code> 就能看到它能在地址栏上正确的显示出来(笔者这里是以 <code>chrome</code> 浏览器为例，不同浏览器可能有不同的行为)。</p><p>完整的 <code>URL</code> 例子可以参见维基百科给出的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">        userinfo       host      port</span><br><span class="line">        ┌──┴───┐ ┌──────┴──────┐ ┌┴┐</span><br><span class="line">https:&#x2F;&#x2F;john.doe@www.example.com:123&#x2F;forum&#x2F;questions&#x2F;?tag&#x3D;networking&amp;order&#x3D;newest#top</span><br><span class="line"> └─┬─┘  └───────────┬──────────────┘└───────┬───────┘ └───────────┬─────────────┘ └┬┘</span><br><span class="line">scheme          authority                  path                 query           fragment</span><br><span class="line"></span><br><span class="line">ldap:&#x2F;&#x2F;[2001:db8::7]&#x2F;c&#x3D;GB?objectClass?one</span><br><span class="line">└┬─┘   └─────┬─────┘└─┬─┘ └──────┬──────┘</span><br><span class="line">scheme   authority   path      query</span><br><span class="line"></span><br><span class="line">mailto:John.Doe@example.com</span><br><span class="line">└─┬──┘ └────┬─────────────┘</span><br><span class="line">scheme     path</span><br><span class="line"></span><br><span class="line">news:comp.infosystems.www.servers.unix</span><br><span class="line">└┬─┘ └─────────────┬─────────────────┘</span><br><span class="line">scheme            path</span><br><span class="line"></span><br><span class="line">tel:+1-816-555-1212</span><br><span class="line">└┬┘ └──────┬──────┘</span><br><span class="line">scheme    path</span><br><span class="line"></span><br><span class="line">telnet:&#x2F;&#x2F;192.0.2.16:80&#x2F;</span><br><span class="line">└─┬──┘   └─────┬─────┘│</span><br><span class="line">scheme     authority  path</span><br><span class="line"></span><br><span class="line">urn:oasis:names:specification:docbook:dtd:xml:4.1.2</span><br><span class="line">└┬┘ └──────────────────────┬──────────────────────┘</span><br><span class="line">scheme                    path</span><br></pre></td></tr></table></figure><hr><p>接着浏览器分析 URL 信息后，会从 URL 取出方案(协议类型)。这个方案可以是常见的 <code>http:</code>，也可以像 chrome 内置协议 <code>chrome:</code>。再根据不同的协议进行不同的解析。</p><p>我们在地址栏上输入的是 <code>zhihu.com</code>，没有指定要使用哪个协议，那这个这个判断的权利交给了浏览器，浏览器通过内置的方案来决定对 <code>URL</code> 信息进行补全。比如 <code>chrome</code> 可能会对该链接补全为 <code>https://www.zhihu.com</code>。</p><p>接着浏览器从 <code>URL</code> 中提取出主机名(<code>host</code>)信息。它可能是一个 IP 地址，也可以可能是一个域名地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">              host    port</span><br><span class="line">        ┌──────┴────┐ ┌┴┐</span><br><span class="line">https:&#x2F;&#x2F;www.zhihu.com:443&#x2F;</span><br><span class="line">└─┬─┘ └────────┬────────┘</span><br><span class="line">scheme     authority</span><br><span class="line"></span><br><span class="line">            host     port</span><br><span class="line">       ┌─────┴─────┐ ┌┴─┐</span><br><span class="line">http:&#x2F;&#x2F;192.168.6.106:8000&#x2F;</span><br><span class="line">└─┬─┘ └────────┬────────┘</span><br><span class="line">scheme     authority</span><br></pre></td></tr></table></figure><p>下面来了解一下关于 <code>IP 地址</code>和<code>域名</code>这两个概念。</p><p><strong>本章参考资料:</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/What_is_a_URL">什么是 URL？</a></li><li><a href="https://www.ibm.com/developerworks/cn/xml/x-urlni.html">分清 URI、URL 和 URN</a></li><li><a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">Uniform Resource Identifier(统一资源定位符)</a></li></ul><hr><h2 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h2><p>因特网(Internet)就像个学校，每个资源都有自己的座位。当你获取某个资源时，首先需要确定资源的所在地，就像你要去别人家取货那起码得知道人家的地址。</p><p><strong>IP 地址(Internet Protocol Address)</strong> 就是用于标识网络上设备的数据标签，也可以通俗的理解为住宅门牌号。它主要有 <code>IPv4</code>、<code>IPv6</code> 两个版本。</p><h3 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h3><p><code>IPv4</code> 使用 32 位地址, 地址空间为 <code>4,294,967,296(2^32)</code>。它有 3 种常见的标记法，即：二进制标记法、点分十进制标记法、十六进制标记法，其中最常采用的标记法是方便人们记忆的点分十进制。以下是三者之间的比较:</p><table><thead><tr><th>IPv4 标记法</th><th>表示方式</th></tr></thead><tbody><tr><td>二进制</td><td>11000000 10101000 00000001 00000001</td></tr><tr><td>点分十进制</td><td>192.168.1.1</td></tr><tr><td>十六进制</td><td>0xC0A80101</td></tr></tbody></table><p><code>IPv4</code> 早已在我们身边普及。比方说我们需要重设 WIFI 密码，那得要登录路由器厂商提供的路由器管理后台(Admin)，这个管理后台的登录地址通常是厂商默认设置的本地 IP 地址，如 <code>192.168.1.1</code>。</p><p>在 IPv4 的原始设计中，IP 地址分为两部分，分别是 <strong>8 位网络地址</strong>和 <strong>24 位主机位</strong>。因为局域网早期出现时，只有一些又大又少的网络。这种结构最多允许有 256 个网络，很快就发现这种结构完全不够用。</p><h3 id="分类网络"><a href="#分类网络" class="headerlink" title="分类网络"></a>分类网络</h3><p>为了克服这个限制，1981 年的 <a href="https://tools.ietf.org/html/rfc791">RFC 791</a> 对 IP 地址定义进行了修改，定义了<strong>分类地址结构</strong>。修订后系统定义了五个类，分别是 A、B、C、D、E 五类。以下是分类地址结构的 IPv4 地址空间划分表:</p><table><thead><tr><th>类</th><th>地址范围</th><th>高序位</th><th>用途</th><th>百分比</th><th>网络地址位数</th><th>主机位数</th><th>网络数</th><th>每个网络的主机数</th></tr></thead><tbody><tr><td>A</td><td>0.0.0.0 ~ 127.255.255.255</td><td>0</td><td>单播/特殊</td><td>1/2(128/256)</td><td>8</td><td>24</td><td>128</td><td>16,777,216</td></tr><tr><td>B</td><td>128.0.0.0 ~ 191.255.255.255</td><td>10</td><td>单播/特殊</td><td>1/4</td><td>16</td><td>16</td><td>16384</td><td>65,536</td></tr><tr><td>C</td><td>192.0.0.0 ~ 223.255.255.255</td><td>110</td><td>单播/特殊</td><td>1/8</td><td>24</td><td>8</td><td>2,097,152</td><td>256</td></tr><tr><td>D</td><td>224.0.0.0 ~ 239.255.255.255</td><td>1110</td><td>组播</td><td>1/16</td><td>N/A</td><td>N/A</td><td>N/A</td><td>N/A</td></tr><tr><td>E</td><td>240.0.0.0 ~ 255.255.255.255</td><td>11110</td><td>保留</td><td>1/16</td><td>N/A</td><td>N/A</td><td>N/A</td><td>N/A</td></tr></tbody></table><p>我们从表中可以得知，A、B、C 类用于为因特网(单播地址)中的接口分配地址，还有一些在特殊情况下使用不被分配的 IP。</p><p>单播和组播的概念很好理解。单播是指客户端与服务器之间的点到点连接。就像你跟小姐姐聊天是一对一之间的交流。</p><p>组播则是指在发送和接收者实现点对多点连接。下面二狗子的表情包很精准的阐述出组播的概念：</p><p>二狗子突然站起来对圈子(组播组)里的其他朋友说：”大家听我说，我发现我们都是狗！！”。二狗子发出了一条消息，组播组内的其他狗子同时接收到了这条消息。</p><img data-src="/blog/2018/04/06/URL-to-browser/dog_say.png" class=""><p>使用分类地址划分后，不同类地址可以拥有不同规模的网络数和主机数。比如，A 类地址仅能分配 128 个网络给不同站点用，但一个网络内分配给 <code>16,777,216(2^24)</code> 台主机使用。而 C 类地址虽然能分配 <code>2,097,152(2^21)</code> 个网络，但每个网络只能容纳 256 台主机。这样就可以预先估计规模大小，然后再申请分类分配网络号，解决了早期不够用的问题。</p><h3 id="其他分配方案"><a href="#其他分配方案" class="headerlink" title="其他分配方案"></a>其他分配方案</h3><p>随着互联网发展，分类网络的形式使得很多地址空间没有被合理的利用上，C 类地址不足以承载太大的网站，进而去申请 B 类地址。导致 B 类地址迅速减少。IP 地址不够用的情况又出现了。为了解决这些情况，RFC 在基于 IPv4 地址上提出了以下的方案:</p><blockquote><p>1985 年，随着 <a href="https://tools.ietf.org/html/rfc950">RFC 950</a> 的发布，开始将现有的分类网络划分为子网。随后在 1987 年发布的 <a href="https://tools.ietf.org/html/rfc1109">RFC 1109</a> 中引入可变长度子网掩码(VLSM)，该划分变得更加灵活。</p><p>1993 年，基于可变长度子网掩码 <a href="https://tools.ietf.org/html/rfc1517">RFC 1517</a> 引入了无类域间路由(CIDR), 正式地取代了分类网络，分类网络也因此被称为“有类别”的。</p><p>CIDR 被设计为可以重新划分地址空间，因此小的或大的地址块均可以分配给用户。CIDR 创建的分层架构由互联网号码分配局（IANA）和区域互联网注册管理机构（RIR）进行管理，每个 RIR 均维护着一个公共的 WHOIS 数据库，以此提供 IP 地址分配的详情。</p><p>– 以上 IPv4 地址方案发展历史截取至维基百科</p></blockquote><h3 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h3><p>虽然通过以上几种 IPv4 地址分配方案缓解地址耗盡的问题，但还是治标不治本。为了彻底解决 <code>IPv4</code> 地址耗盡的问题，1998 年对使用 128 位 IP 地址的 IP（IPv6）新版本进行了标准化。</p><p><code>IPv6</code> 地址的出现不仅解决了 IPv4 地址空间不够的问题，还实现了 IPv4 中不存在的功能。</p><p>在 IPv6 中，地址大小从 IPv4 中的 32 位增加到 128 位，从而提供了多达 2128 个（大约 <code>3.403 × 10^38</code>）地址。这个数字什么概念呢？我们以维基百科统计的世界人口来对比。截止至 2019.05，世界人口约为 77 亿人(7.7 × 10^9）。因此在可预见的未来里，这被认为是够用了的。</p><p><code>IPv6</code> 地址为 128 位元长，但通常写作 8 组，每组 4 个<strong>十六进制数</strong>的形式。如果四个数字都是 0，可以被省略。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2001:0db8:85a3:0000:1319:8a2e:0370:7344</span><br><span class="line"></span><br><span class="line"># 上面的 IPv6 等价于下面这条。注意双冒号</span><br><span class="line">2001:0db8:85a3::1319:8a2e:0370:7344</span><br></pre></td></tr></table></figure><p>为避免 <code>IPv6</code> 地址的冒号与方案的冒号冲突，在 <code>IPv6</code> 地址在 URL 上是通过中括号包裹，以百度的 IPv6 地址为例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;[2400:da00:2::29]&#x2F;</span><br><span class="line"></span><br><span class="line"># 等价于</span><br><span class="line">http:&#x2F;&#x2F;ipv6.baidu.com&#x2F;</span><br></pre></td></tr></table></figure><p>目前我们见到更多的是 <code>IPv4</code> 地址。IPv6 是未来的主流，目前仍然在部署中。国内的部署情况可以在百度百科《<a href="https://baike.baidu.com/item/IPv6/172297?fr=aladdin#1">IPv6</a>》的发展历史中能找到相关的描述:</p><blockquote><p>2018 年 6 月，三大运营商联合阿里云宣布，将全面对外提供 IPv6 服务，并计划在 2025 年前助推中国互联网真正实现“IPv6 Only” 。<br>7 月，百度云制定了中国的 IPv6 改造方案。<br>8 月 3 日，工信部通信司在北京召开 IPv6 规模部署及专项督查工作全国电视电话会议，中国将分阶段有序推进规模建设 IPv6 网络，实现下一代互联网在经济社会各领域深度融合。<br>11 月，国家下一代互联网产业技术创新战略联盟在北京发布了中国首份 IPv6 业务用户体验监测报告显示，移动宽带 IPv6 普及率为 6.16%，IPv6 覆盖用户数为 7017 万户，IPv6 活跃用户数仅有 718 万户，与国家规划部署的目标还有较大距离。</p><p>2019 年 4 月 16 日，工业和信息化部发布《关于开展 2019 年 IPv6 网络就绪专项行动的通知》。5 月，中国工信部称计划于 2019 年末，完成 13 个互联网骨干直联点 IPv6 的改造。</p></blockquote><p>好啦，关于 IP 地址的基础概念就讲到这里。关于 IP 地址更深入的知识可以去找相关的专业教材或书籍，本文将不过多赘述。</p><p><strong>本章参考资料:</strong></p><ul><li><a href="https://en.wikipedia.org/wiki/IP_address">IP address | wikipedia(英)</a></li><li><a href="https://en.wikipedia.org/wiki/IPv4">IPv4 | wikipedia(英)</a></li><li><a href="https://en.wikipedia.org/wiki/IPv6">IPv6 | wikipedia(英)</a></li><li><a href="https://baike.baidu.com/item/IPv6/172297?fr=aladdin#1">IPv6 | 百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E4%BA%BA%E5%8F%A3">世界人口 | wikipedia(中)</a></li></ul><hr><h2 id="域名系统-DNS"><a href="#域名系统-DNS" class="headerlink" title="域名系统(DNS)"></a>域名系统(DNS)</h2><p>理论上我们直接使用 IP 地址就可以访问资源了。但直接通过 IP 地址来访问会存在一个问题，那就是 IP 地址不便于人类记忆。考虑以下场景对话:</p><p>“嘿朋友。最近我做了个主页，有空来我留言板踩踩呗？”，”没问题呀，那么地址是什么呢？”。(以下弹出一个选项框)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选项A: http:&#x2F;&#x2F;[2400:da00:2::29]&#x2F;</span><br><span class="line">选项B: http:&#x2F;&#x2F;183.232.231.174&#x2F;</span><br><span class="line">选项C: http:&#x2F;&#x2F;www.baidu.com&#x2F;</span><br></pre></td></tr></table></figure><p>将上面三个选项进行对比就能发现：如果我们十分硬核的选择了 A、B 两项，那你的朋友可能会给你翻个白眼。这样的地址谁想记呀！！即便是朋友愿意记下你的 IP 地址，但把该网站的定位转为商业网站后，显然这就有点为难用户了。</p><blockquote><p>tips: 在命令行使用 <code>nslookup baidu.com</code> 可以获得百度的 ip 地址</p></blockquote><p>因此，为了克服 IP 地址不便于人类记忆和理解的情况，人们设计出<strong>域名</strong>来辅助记忆。</p><p><strong>域名(Domain)</strong> 在术语上定义，是由一串用点分隔的字符组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。它有一定的自然语言含义。所以它相当于是 IP 地址的一个映射。</p><p>你不是 IP 地址记不住吗？那我把 IP 地址映射为人们熟知的拼音语句、英语单词等常见词语。<code>183.232.231.174</code> 我可以映射为 <code>taobao.com</code> 、 <code>baidu.com</code> 、<code>12306.cn</code>。这样是不是好记多了？</p><p>确实，IP 地址被映射为域名后，人们记域名方便方便多了。但问题又来了，底层计算机并不认识域名这种东西、它寻址还是得通过 IP 地址来寻址。发起请求时需要有应用告诉计算机这个域名的 IP 地址是什么。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p><strong>域名系统(Domain Name System, 下文统一简称为 DNS)</strong> 的任务就是负责将域名解析为 IP 地址。这个解析的过程也被称为 **名称解析(name resulution)**。</p><p><code>DNS</code> 是互联网上重要的基础应用程序，它作为一个分布式数据库，域名服务器分布在世界各地，储存着域名与 IP 地址的映射关系，每个域名服务器上值存储了部分域名信息。因此为了完成域名解析，通过需要在多个域名服务器之间进行查询。</p><p><code>DNS</code> 为了实现域名的有效管理与高效的查询，它是按层级结构进行组织的，并且该层次结构与域名的结构( <code>.</code> 分隔)相对应，每个以点分隔的为 标签(<code>label</code>)。它所使用的所有名称集合构成了 DNS **名称空间(name space)**。</p><p>当前的名称空间是一棵域名树结构，位于顶部的树根(<code>root</code>, 通常为我们称之为根域名服务器)为命名。树第一层为**顶级域名(Top level Domian, TDL)**，TDL 再往下就是子域名。域名的层级是从右往左看:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">三级域名.二级域名.顶级域名.根域名</span><br><span class="line"></span><br><span class="line">三级域名    顶级域名</span><br><span class="line">  ┌┴┐       ┌┴┐</span><br><span class="line">  www.zhihu.com</span><br><span class="line">      └─┬─┘</span><br><span class="line">     二级域名</span><br></pre></td></tr></table></figure><p>因此 <code>www.zhihu.com</code> 完整的域名应该是 <code>www.zhihu.com.</code>。后面的 <code>.</code> 相当于 <code>.root</code>，由于每个域名的根节点都是 <code>root</code>，因此 <code>.root</code> 就被省略为 <code>.</code>。我们直接访问 <code>zhihu.com.</code> 是能正确的打开知乎首页的。</p><hr><p>一个服务器所管辖的范围叫做区(zone)。每一个区设置相应的权威域名服务器，用于保存该区中所有的主域名到 IP 地址的映射。其中 DNS 服务器的管辖范围不是以 “域” 为单位，而是以 “区” 为单位。域名服务器根据其主要保存的域名信息以及在域名解析过程中的作用等，可以分为根域名服务器、顶级域名服务器、权威域名服务器。</p><p><strong>根域名服务器</strong>是最重要的域名服务器，因为所有域名解析操作均离不开它们。在因特网上指定了 13 个逻辑根名称服务器，逻辑名称的格式为字母 <code>.root-servers.net</code>，字母范围从 a 到 m。如: <code>a.root-servers.net</code>、<code>d.root-servers.net</code> 等。</p><p><strong>顶级域名服务器</strong>负责管理在该顶级域名服务器注册的所有二级域名。顶级域名服务器的名称对应着域名的最后一个名称。如 <code>www.zhihu.com</code> 的顶级域名服务器名称是 <code>com</code>。</p><p><strong>权威域名服务器</strong>，负责一个区的域名服务器，保存该区中的所有主机的域名到 IP 地址的映射。任何一个拥有域名的主机，其域名与 IP 地址的映射关系等信息都存储在所在网络的权威域名服务器上。在进行域名解析时，只要找到被查询域名主机注册的权威域名服务器，就可以获得该域名对应的 IP 地址信息。</p><h3 id="本地-DNS"><a href="#本地-DNS" class="headerlink" title="本地 DNS"></a>本地 DNS</h3><p>任何一台主机(PC、手机等)在网络地址配置时，都会配置一个 DNS 服务器作为默认域名服务器，这样这台主机在任何时候需要进行域名解析，都会将域名查询发送给该服务器，这个默认服务器我们称之为本地域名服务器。在 MacOS 环境下可以输入以下命令来查看 DNS 的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">➜  blog git:(master) ✗ scutil --dns</span><br><span class="line">DNS configuration</span><br><span class="line"></span><br><span class="line">resolver #1</span><br><span class="line">  nameserver[0] : 172.20.10.1</span><br><span class="line">  if_index : 5 (en0)</span><br><span class="line">  flags    : Request A records</span><br><span class="line">  reach    : 0x00020002 (Reachable,Directly Reachable Address)</span><br><span class="line"></span><br><span class="line">resolver #2</span><br><span class="line">  domain   : local</span><br><span class="line">  options  : mdns</span><br><span class="line">  timeout  : 5</span><br><span class="line">  flags    : Request A records</span><br><span class="line">  reach    : 0x00000000 (Not Reachable)</span><br><span class="line">  order    : 300000</span><br><span class="line"></span><br><span class="line">resolver #3</span><br><span class="line">  domain   : 254.169.in-addr.arpa</span><br><span class="line">  options  : mdns</span><br><span class="line">  timeout  : 5</span><br><span class="line">  flags    : Request A records</span><br><span class="line">  reach    : 0x00000000 (Not Reachable)</span><br><span class="line">  order    : 300200</span><br><span class="line"></span><br><span class="line">resolver #4</span><br><span class="line">  domain   : 8.e.f.ip6.arpa</span><br><span class="line">  options  : mdns</span><br><span class="line">  timeout  : 5</span><br><span class="line">  flags    : Request A records</span><br><span class="line">  reach    : 0x00000000 (Not Reachable)</span><br><span class="line">  order    : 300400</span><br><span class="line"></span><br><span class="line"># 省略其他配置信息..</span><br><span class="line"></span><br><span class="line">DNS configuration (for scoped queries)</span><br><span class="line"></span><br><span class="line">resolver #1</span><br><span class="line">  nameserver[0] : 172.20.10.1</span><br><span class="line">  if_index : 5 (en0)</span><br><span class="line">  flags    : Scoped, Request A records</span><br><span class="line">  reach    : 0x00020002 (Reachable,Directly Reachable Address)</span><br></pre></td></tr></table></figure><p>从缓存的角度来看，有分 DNS 服务器缓存和应用级 DNS 缓存。</p><p>浏览器向 DNS 服务器发起请求，DNS 会从自己的缓存中读取记录，如没有结果才向上一层请求，这是属于应用级缓存。<code>chrome</code> 早期可以通过访问 <code>chrome://net-internals/#dns</code> 来查看浏览器缓存的 DNS 记录，但不知什么原因现在把查看 DNS 信息的页面给砍掉了，只留清除 DNS 缓存的功能。而 <code>Firefox</code> 可以直接访问 <code>about:networking#dns</code> 查看对应的域名映射。</p><img data-src="/blog/2018/04/06/URL-to-browser/firefox-dns.png" class=""><h3 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h3><p>除了 DNS 服务器与 DNS 缓存外，其实还有一种途径能读取域名映射，那就是 <code>hosts</code> 文件。</p><p><code>hosts</code> 文件是纯文本文件。从历史的角度看，<code>hosts</code> 文件出现的比 DNS 服务器还早。最初在 Internet 的前身 ARPANET 中，其成员 SRI International 手动维护并分享的一个名为 HOSTS.TXT 的文件。它负责将主机名称映射到相应的 IP 地址。</p><p>由于个人网络不断庞大之后，对 hosts 文件进行管理的难度也越来越大，于是在 1983 年 DNS 系统开始开发，1984 年得到了发展。并且随着网络的发展，DNS 可以自动提供动态的主机名解析，因此 <code>hosts</code> 成为了一个可以作为备用手段的名称解析机制。</p><p>与 DNS 不同的是，hosts 文件是可以由用户改写的，是属于操作系统级别的 IP 地址映射。同时在一些操作系统上，hosts 文件可能会比其他域名解析器(如 DNS 服务器)会具有更高的优先级。</p><p>hosts 文件在不同操作系统下路径是不一样的。以下给出常见的操作系统路径：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># win7 +, %SystemRoot%\ 系统根路径默认为 c 盘，也就是 c:\</span><br><span class="line">%SystemRoot%\System32\drivers\etc\hosts</span><br><span class="line"></span><br><span class="line"># Unix、类Unix系统（例如 Linux、MacOs 等）</span><br><span class="line">/etc/hosts</span><br></pre></td></tr></table></figure><p>hosts 文件内容由第一行文本字段中的 IP 地址和<strong>一个或多个主机名</strong>组成的文本行。每个字段都用空格隔开(出于历史原因，通常首选使用 Linux 上的 hosts 直接复制到 window 上可能不会生效)。井号(#) 后文字为注释信息，文件中的完全空白行将被忽略。典型的主机文件可能包含以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       localhost</span><br><span class="line">::1             localhost</span><br></pre></td></tr></table></figure><p>除此之外，hosts 文件还可以做其他用途。</p><p>比如原本我们开发环境的 URL 可能是 <code>192.168.6.106:8000</code>, 现在页面上有一个强依赖于当前 URL 域名的功能或校验。但我们得要完成测试开发，这怎么办呢？总不能先部署上线再测试吧，这多麻烦呀..</p><p>这里就可以通过修改本地的 hosts 文件，将 <code>192.168.6.106</code> 映射 <code>www.example.com</code>，然后我们直接访问 <code>www.example.com:8000</code> 进行测试即可。</p><p>再比如，我们浏览器可能会装有广告拦截插件，但总有一些漏网之鱼怎么办？没有关系，我们直接在浏览器控制台打开 <code>Network</code>, 找到广告的地址，将该域名映射为本地专用网络 <code>127.0.0.1</code> 上。那该页面发起的广告请求将不能正常的获取到资源，也是一种屏蔽广告的好方法。</p><p>可以做一个简单的测试。打开 <code>hosts</code> 文件，修改以下映射(需要管理员权限)，再打开匿名模式访问百度首页，然后会发现浏览器提示: <code>无法访问此网站 baidu.com 拒绝了我们的连接请求。</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       localhost baidu.com</span><br><span class="line">::1             localhost</span><br></pre></td></tr></table></figure><p>修改 hosts 文件能我们提供一些便利，但同时也要防止有人恶意篡改我们的 hosts 文件(通过病毒等途径)，引导至诈骗网站。</p><p>hosts 文件是系统文件，直接通过路径找 hosts 文件对于一些朋友来说感觉会有点繁琐。因此在不同操作系统下有开发者开发了这方面的便捷工具，如 MacOS 上可以下载 <a href="https://oldj.github.io/SwitchHosts/">SwitchHosts</a> 来辅助修改，也可以在其官网上查看它提供了哪些功能。</p><p><img data-src="https://oldj.github.io/SwitchHosts/images/sh_light.png" alt="SwitchHosts Preview"></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>现在我们回归主线，对以上本地 DNS 解析的优先级做一个梳理：</p><p>在地址栏输入 URL 的主机名是域名的话，那么浏览器将会调用域名解析器。这个域名解析器的优先级可能根据操作系统的不同会有所差异：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器 DNS 缓存 &gt; hosts 文件(或 hosts 文件 &gt; 浏览器 DNS 缓存) &gt; 本地 DNS 服务器 &gt; ISP(因特网提供商) DNS 服务器</span><br></pre></td></tr></table></figure><p>现在我们假设浏览器缓存会被最先查找，正式来了解域名解析的过程:</p><p><strong>一、</strong> 首先浏览器从 URL 提取出主机名，从浏览器 DNS 缓存中查找是否有对应的记录。</p><p><strong>二、</strong> 应用缓存中没有找到记录的话，会进一步查找 hosts 文件是否有记录映射关系，有则停止下一步查找，并返回结果。</p><p><strong>三、</strong> 如果前两步骤都没有找到对应的映射地址的话，将会向本地 DNS 服务器发送请求。以下对本步骤进行详细讲解：</p><p>要了解 DNS 查询细节的话，那得先学习一下 DNS 的信息格式，然后我们可以安装 <a href="https://www.wireshark.org/">Wireshark</a> 捕获请求分组来辅助学习：</p><img data-src="/blog/2018/04/06/URL-to-browser/dns-message.jpg" class="" title="dns message"><p>安装该软件后，点击<strong>开始捕获分组</strong>并在过滤器上输入 <code>dns</code> 后敲回车。接着在浏览器上访问 <code>zhihu.com</code> 捕获到如下数据：</p><img data-src="/blog/2018/04/06/URL-to-browser/dns-capture-1.png" class=""><p>从上图选中数据报的头部可以看出，这是是一个 <code>UDP/IPv4</code> 数据报，同时数据报带有 DNS 头部信息。</p><p>这是一个标准的 DNS 查询，发送端 IP 地址是 <code>172.20.10.7</code>, 端口号为临时分配的 <code>49246</code>。这个数据报发往本地 DNS 服务器 <code>172.20.10.1</code>，端口号为知名 DNS 端口 <code>53</code>.</p><p>把 DNS 头部信息与 DNS message 格式进行对比就能得知，<code>Transaction ID</code> 就是 占 16 个比特位(以下单位简称为位)的 <code>ID</code>，其值为 <code>0x420a</code>。</p><p><code>flags</code> 的标记可以得知该 DNS 消息的状态与类型。<code>flags</code> 占 16 位，是标志(或者说属性)的集合，总共有十个标记。下面再补上 DNS 响应来一并讲解 <code>flags</code>:</p><blockquote><p>Tips: DNS 协议分请求报文和响应报文。在面板上的 <code>No.</code> 一栏中两个箭头代表着查询发出与响应返回，具有对应关系。<br>在 Wireshark 面板下，Flags 内每一行代表着一个属性说明，看上去还是挺工整的。</p></blockquote><img data-src="/blog/2018/04/06/URL-to-browser/dns-res.png" class=""><ul><li>第一个标志 <code>QR(Query / Response)</code> 占 1 个位，代表本条消息是查询(query, 0), 还是响应(response, 1)。</li><li>第二个标志是操作码(<code>OpCode</code>)占 4 位。不管是响应和查询，全零都代表是标准查询。</li><li>第三个标志 <code>AA(Authoritative Answer)</code> 占 1 位，代表着授权回答。这个标志在上图的查询中没有显示出来是因为该标志只对响应有用。</li><li>第四个标志<code>TC(TrunCation)</code>占 1 位，代表该消息是不是“可截断的”。<code>1</code> 代表可截断，<code>0</code> 为不可截断。</li><li>第五个标志位 <code>RD(Recursion desired)</code> 表示“期望递归”，占 1 位，它告诉服务器执行递归执行。图中查询和响应的标志位被设为 <code>1</code>, 意味着以递归方式进行查询。</li><li>第六个标志位 <code>RA(Recursion available)</code> 占 1 位，如果服务器支持递归查询，将会在响应中设置该标志。本地 DNS 服务器一般是使用迭代方式进行查询，而根服务器仅支持迭代查询。</li><li>第七个标志位 <code>Z</code> 占 1 个比特位，该标志是保留字段，以供未来使用。</li><li>第八个标志位 <code>AD(Answer authenticated)</code> 占 1 位。如果包含的消息已授权，则该标志位会被设为 <code>1</code>。如果禁用安全检查，则下一个标志位 <code>CD</code> 会被设置为 <code>1</code>.</li><li>第九个标志位 <code>CD(Checking Disabled)</code> 占 1 位，该指示发送查询的解析器是否可以接受未经身份验证的数据。设置 <code>1</code> 为禁用安全检查接受未经身份验证的数据，设置 <code>0</code> 则不接受未经验证的数据，</li><li>第十个标志位 <code>RCODE(Response Code)</code> 占 4 位，表示响应的状态码，全零意味着没有错误(Not Error)。</li></ul><p>除了 <code>flags</code> 外，下面还有请求数(<code>Questions</code>)、回答记录数(DNS 消息格式示意图中的 <code>ANCOUNT</code>，Wireshark 上的 <code>Answer RRs</code>。其中 <code>RRs</code> 全称为 <code>Resource Records</code>，也就是资源记录)、授权记录数(<code>Authority RRs</code>)、其他额外信息数(<code>Additional RRs</code>)，这些都是字面意思，不过多解释。</p><img data-src="/blog/2018/04/06/URL-to-browser/dns-other-info.png" class=""><p>在查询与响应中，我们可以看到有相同的 <code>Queries</code>，<code>Queries</code> 中有一个询问(<code>Querie</code>)。对于 DNS 查询意味着 DNS 客户端问 DNS 服务端问题，期望从它那边得到 <code>www.zhihu.com</code> 的 IP 地址。要求去 <code>IN(互联网)</code> 类中找到 <code>A 类型(IPv4 地址记录)</code> 的信息。对于 DNS 响应来说，这只是从查询那里拷贝过来的副本。</p><img data-src="/blog/2018/04/06/URL-to-browser/dns-queries.png" class=""><p>关于 <code>class</code> 可以在下表中找到对应的含义。<code>type</code> 类型略庞大，笔者仅从维基百科截取其中一部分:</p><img data-src="/blog/2018/04/06/URL-to-browser/dns-table-class.png" class=""><img data-src="/blog/2018/04/06/URL-to-browser/dns-table-type.png" class=""><p>DNS 响应中还会有 <code>Answers</code> 这个属性，代表着它对 <code>Queries</code> 给出的答案:</p><img data-src="/blog/2018/04/06/URL-to-browser/dns-res-answers.png" class=""><p>在 <code>Answers</code> 中有三个域名、多条记录。</p><ul><li>域名 1 是 <code>www.zhihu.com</code>, 它设置了 CNAME，通过别名映射到了 <code>www.zhihu.com.dsa.dnsv1.com</code> 中。</li><li>域名 2 是 <code>www.zhihu.com.dsa.dnsv1.com</code>，从该域名的后缀可以得知知乎使用了腾讯云的动态加速域名(<code>*.dsa.dnsv1.com</code>)。知乎在腾讯云 DSA 控制台接入加速域名后，系统会为加速域名分配一个 “CNAME 域名”。随后该域名又通过 CNAME 映射到 <code>1442234.dsa.p23.tc.cdntip.com</code>。</li><li>(<code>.dsa.p23.tc.cdntip.com</code>)。</li><li>域名 3 是 <code>1442234.dsa.p23.tc.cdntip.com</code>，该域名下配置有多个 IPv4 地址，这些 IP 地址都是腾讯云为知乎提供的加速节点。这些 IP 地址会根据接入网络不同而动态变化。</li></ul><p>通过上面一系列的小步骤客户端得到了其中一个节点的 IP 地址，也就是 <code>183.232.152.114</code>。浏览器拿到 IP 地址后可以进行下一步的处理。</p><p>下面来对本地 DNS 查询做一个简单的总结:</p><ul><li>浏览器发起查询请求。浏览器所在的主机作为 DNS 客户端向本地 DNS 服务器发送查询请求。</li><li>本地 DNS 服务器找缓存。在该步骤上找到了 <code>www.zhihu.com</code> 的记录，于是将记录作为响应返回主机。</li></ul><p><strong>四、</strong> 能走到步骤四意味着在本地 DNS 服务器上也没有找到相应的记录。这时本地 DNS 服务器不会立即反馈给客户端它没货，而是将该查询转发至 ISP 提供的 DNS 服务器(缓存/转发服务器。笔者使用的是移动的网络，那就在移动的 DNS 服务器上找缓存)上查询。</p><p>下例将通过 <code>dig</code> 命令来查找 DNS，使用 <code>+trace</code> 参数指定从根名称服务器的委派路径到 <code>www.zhihu.com</code> 的跟踪。此例中发起查询请求的是本地 DNS 服务器(<code>172.20.10.1</code>)，但在实际域名解析中可能是由本地 DNS 服务器发送给 ISP DNS 服务器，再由 ISP DNS 服务器去向外查找。</p><p>顺带一提，<code>dig</code> 命令还可以使用 <code>@DNS服务器</code> 指定 DNS 服务器来做进行查询解析，如指定 google 的 DNS 服务器可以添加参数 <code>@8.8.8.8</code>。</p><p>下面还是以默认的 DNS 服务器进行解析，<code>dig</code> 命令在 unix 上是读取 <code>/etc/resolv.conf</code> 上的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 若想指定谷歌的 DNS 服务器，那就在命令行输入:</span><br><span class="line"># dig @8.8.8.8 +trace www.zhihu.com</span><br><span class="line"></span><br><span class="line">➜  blog git:(master) ✗ dig +trace www.zhihu.com</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; +trace www.zhihu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.                       2364    IN      NS      k.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      l.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      c.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      m.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      i.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      j.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      h.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      b.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      f.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      g.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      e.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      a.root-servers.net.</span><br><span class="line">.                       2364    IN      NS      d.root-servers.net.</span><br><span class="line">;; Received 239 bytes from 172.20.10.1#53(172.20.10.1) in 5 ms</span><br><span class="line"></span><br><span class="line">com.                    172800  IN      NS      l.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      b.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      c.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      d.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      e.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      f.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      g.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      a.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      h.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      i.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      j.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      k.gtld-servers.net.</span><br><span class="line">com.                    172800  IN      NS      m.gtld-servers.net.</span><br><span class="line">com.                    86400   IN      DS      30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766</span><br><span class="line">com.                    86400   IN      RRSIG   DS 8 1 86400 20191213050000 20191130040000 22545 . BIozVERNebmR+7eHRoc&#x2F;OdIMRMWX54unL5wW9wP6t16pfJ+CKswMl8cv YFVeJv0wBBDEbh9mKan5iJqDaWzEm&#x2F;ovgHWTJpP5EIuWJiV+Mi+LIhCI nw0zKYEL5QcPTIB3p6lxC5U7ngakgj4LX7eJZ8kIYocyBTZBKZHSCQh6 GCXAX6zJihuRDiFoC3OtXdhVGlrEIYeRX8FY+CUsPMLbGg4&#x2F;JSeTNMH8 cFFFqw&#x2F;4fbcKxq8xstRO5H40TKfFl7DtESDBahf2mjC9byjdpU5vteoH rIez3APISqKq2HJ9fBqDTkkjwkFMDy264MnGQjSSyZ3kvL&#x2F;DYvV0qios 6pQVLw&#x3D;&#x3D;</span><br><span class="line">;; Received 1173 bytes from 192.5.5.241#53(f.root-servers.net) in 91 ms</span><br><span class="line"></span><br><span class="line">zhihu.com.              172800  IN      NS      ns3.dnsv5.com.</span><br><span class="line">zhihu.com.              172800  IN      NS      ns4.dnsv5.com.</span><br><span class="line">CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN NSEC3 1 1 0 - CK0Q1GIN43N1ARRC9OSM6QPQR81H5M9A  NS SOA RRSIG DNSKEY NSEC3PARAM</span><br><span class="line">CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN RRSIG NSEC3 8 2 86400 20191205054917 20191128043917 12163 com. ieaNZWBhpQYmsLR87RZURry7wNE+u9MlGQCA0q70qKsEWyDZ9QLQeB5f YO+KOK5xFOs6wKSYBAOg+rM+E4xKQZpg3&#x2F;bBy5JSJVz1Pb6vfR1KHipW Zpqe5j0ehBJHOzTiLCauoSztU02rMIEr857hOWRzqapxZ0HKri8nm62l 1LRCrw&#x2F;NMajpndWovkdqb9tMkibas&#x2F;REg5yGShiFf&#x2F;H3fw&#x3D;&#x3D;</span><br><span class="line">5NHJE6K0NQHV1589FOR75DMTDH32O109.com. 86400 IN NSEC3 1 1 0 - 5NHJVBH070QGDCJIE8E8GBT5KO0AER7R  NS DS RRSIG</span><br><span class="line">5NHJE6K0NQHV1589FOR75DMTDH32O109.com. 86400 IN RRSIG NSEC3 8 2 86400 20191204062552 20191127051552 12163 com. bS8kkx0QB2FpCHxscssiDYzIOgwj1ff1mN3+whV9CR1hWZnBWiZ51NW1 vVVBrkdOipkAkqS1mBXqQ&#x2F;3FMzjhyS7BJxu3VTv83IPCh5VHi3GahGsQ xpRaMJy07bJ94jnL85U260Etzqwp6Lh&#x2F;uk2lIaa39searrlHj7mz1dvr zB8zW+yfnIN3cQYVSPc+7CToo4ALJg0i9KC8aanCnHc38g&#x3D;&#x3D;</span><br><span class="line">;; Received 969 bytes from 192.12.94.30#53(e.gtld-servers.net) in 568 ms</span><br><span class="line"></span><br><span class="line">www.zhihu.com.          600     IN      CNAME   www.zhihu.com.dsa.dnsv1.com.</span><br><span class="line">zhihu.com.              86400   IN      NS      ns3.dnsv5.com.</span><br><span class="line">zhihu.com.              86400   IN      NS      ns4.dnsv5.com.</span><br><span class="line">;; Received 137 bytes from 182.254.20.44#53(ns4.dnsv5.com) in 68 ms</span><br></pre></td></tr></table></figure><p>在上面的日志可以看出，名称解析是从右向左进行解析的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now location: www.zhihu.com.</span><br><span class="line">                           ^</span><br></pre></td></tr></table></figure><p>最先查找的是根名称服务器。<code>172.20.10.1</code> (本地 DNS 服务器)逐个询问根域名服务器(根名称服务器地址全球只有 13 个)：“朋友，你知道 <code>www.zhihu.com</code> 的 IP 地址是什么？”。根名称服务器收到该询问后，若它自己不知道关于 <code>www.zhihu.com</code> 的相关信息，它直接告诉发起查询请求的 <code>172.20.10.1</code> 说它不清楚。那 <code>172.20.10.1</code> 就会询问下一个根名称服务器。这一个查询过程就由递归解析变为了迭代解析。</p><p>在不断的根域名迭代查询后，终于有根域名服务器知道我们想要查询域名的信息：</p><ul><li><code>172.20.10.1</code>: “朋友，你知道 <code>www.zhihu.com</code> 的 IP 地址是什么？”</li><li><code>f.root-servers.net</code>: “虽然我不知道具体地址映射，但你可以从 <code>COM TLD</code> 找到相关的线索。我有 <code>COM TLD</code> 的地址，你可以去问问他们”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now location: www.zhihu.com.</span><br><span class="line">                        ^^^^</span><br></pre></td></tr></table></figure><p><code>172.20.10.1</code> 在跟域名服务器(<code>f.root-servers.net</code>)上拿到了 <code>gTLD</code> 服务器信息，这些服务器的名称都是像 <code>l.gtld-servers.net.</code>、<code>b.gtld-servers.net.</code> 的格式。</p><p><code>172.20.10.1</code> 为了得到满足我们的需求还是得逐个拜访这些顶级域名服务器(os: 没办法，托人办事就是这样的)。询问的方式跟上面访问根域名服务器类似，直到问到了合适的人(<code>e.gtld-servers.net</code>)。</p><ul><li><code>172.20.10.1</code>: “朋友，你知道 <code>www.zhihu.com</code> 的 IP 地址是什么？”</li><li><code>e.gtld-servers.net</code> : “我这边有 <code>zhihu.com.</code> 的记录，我把它的联系方式给你，你问问它”。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now location: www.zhihu.com.</span><br><span class="line">                  ^^^^^^^^^^</span><br></pre></td></tr></table></figure><p>从 <code>e.gtld-servers.net</code> 返回了 <code>zhihu.com.</code> 的相关消息。但还得继续迭代查询 <code>www.zhihu.com.</code> 的消息，最终在 <code>ns4.dnsv5.com</code> 找到了我们的目标信息。</p><p>虽然 <code>172.20.10.1</code> 拿到了 <code>www.zhihu.com.</code> 的信息，但它发现这是一条 <code>CNAME</code> 记录，它被映射到了 <code>www.zhihu.com.dsa.dnsv1.com.</code> 域名上。这意味着如果 <code>www.zhihu.com.dsa.dnsv1.com.</code> 没有再通过 CNAME 映射到别的域名上的话，那 <code>172.20.10.1</code> 想要找的 IP 地址就是 <code>www.zhihu.com.dsa.dnsv1.com.</code> 的 IP 地址。若有再映射，就继续查找，直到找到没有再被映射的域名，最后再将该结果返回。</p><p>至于为什么会映射到 <code>www.zhihu.com.dsa.dnsv1.com.</code>，前文已经讲解过，此处就不再重复赘述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now location: www.zhihu.com.</span><br><span class="line">              ^^^^^^^^^^^^^^</span><br></pre></td></tr></table></figure><p>从上面的几个大步骤可以看出：从客户端与本地 DNS 服务器的查询是属于递归查询，而 ISP DNS 服务器与外部 DNS 服务器之间的查询一般都是迭代查询。</p><p><strong>本章参考资料:</strong></p><ul><li><a href="https://en.wikipedia.org/wiki/Hosts_(file)">hosts | wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Dig_(command)">dig</a></li><li><a href="https://www.inacon.de/ph/data/DNS/Header_fields/index.php">DNS Header Section Format</a></li><li><a href="https://mc.qcloudimg.com/static/qc_doc/492628ec6c21cec4a33f3274e11be31c/doc-Dynamic+Site+Accelerator-Glossary.pdf">腾讯云动态加速网络</a></li><li>《TCP/IP 详解 卷一: 协议》第十一章</li></ul><hr><h2 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h2><blockquote><p>世界上几乎所有的 HTPP 通信都是由 TCP/IP 承载的，TCP/IP 是全球计算机及网络设备都在使用的一种常用的分组交换网络分层。 HTTP 的连接实际上就是 TCP 连接以及其使用规则。 –《HTTP 权威指南》</p></blockquote><p>紧接着，浏览器拿到知乎的 IP 地址(<code>183.232.171.254</code>) 后， 浏览器取出 URL 的端口(HTTPS 的默认端口为 <code>443</code>)。</p><p>随即浏览器会创建新的套接字（socket）向 <code>183.232.171.254:443</code> 发起 <code>TCP</code> 连接请求:</p><p>建立 TCP 连接时会经历<strong>三次握手</strong>：</p><img data-src="/blog/2018/04/06/URL-to-browser/tcp-1.png" class="" title="TCP 三次握手"><ol><li>首先浏览器作为客户端会发送一个小的 TCP 分组，这个分组设置了一个特殊的 <code>SYN</code> 标记，用来表示这是一条连接请求。同时设置初始序列号为 <code>x</code> 赋值给 <code>Seq</code>(这次捕获组的数据为: SYN=1, Seq=0)。</li><li>服务器接受到客户端的 <code>SYN</code> 连接后，会选择服务器初始序号 <code>y</code>。同时向客户端发送含有连接确认(<code>SYN+ACK</code>)、<code>Seq=0</code> (本例中的服务器初始序号)、<code>Ack=1</code> (客户端的序号 x + 1) 等信息的 TCP 分组。</li><li>客户端收到了服务器的确定字段后，向服务器发送带有 <code>ACK=1</code>、<code>Seq=1</code> (x+1)、<code>Ack=1</code> (服务器 Ack 信息的拷贝)等字段的 TCP 分组给服务器。</li></ol><p>以上每一个步骤相当于是一次握手。为了确保连接双方彼此完全清除对方的状况(初始序列号等)，那么三次握手缺一不可。</p><p>若在第二次握手时，服务器发送的 TCP 分组由于某些原因导致客户端没有正确的接受到，此时客户端没有接受到第二次握手的控制信息，而服务器认为已经正常连接了。这时双方对丢失数据这一情况是无法感知的，连接就无法建立。因此三次握手还是必要的。</p><p><strong>本章扩展资料:</strong></p><ul><li>《TCP/IP 详解 卷一: 协议》</li></ul><hr><h2 id="HTTPS-SSL-TSL"><a href="#HTTPS-SSL-TSL" class="headerlink" title="HTTPS (SSL/TSL)"></a>HTTPS (SSL/TSL)</h2><p>建立起连接后理论上就通过 HTTP 传输数据啦。但由于 <code>HTTP</code> 传输数据时报文是完全透明的，因此知乎使用了 <code>HTTPS</code> (HTTP Secure)，也就是在 TCP 与 HTTP 之间多添加一层协议做加密及认证的服务。</p><p><code>HTTPS</code> 使用 <code>SSL(Secure Socket Layer)</code> 和 <code>TLS(Transport Layer Security)</code> 协议，TCP 直接与 <code>SSL/TSL</code> 进行通信，<code>SSL/TSL</code> 再与 <code>HTTP</code> 协议进行通信，保障了信息的安全。</p><p><code>HTTPS</code> 建立通信需要一些过程，我们配通过捕获组可以看到使用 <code>TLSv1.2</code> 的连接过程：</p><ol><li><p>首先客户端发送 <code>Client Hello</code> 报文开始通信，该消息包括密码套件列表以及客户端随机数。</p><img data-src="/blog/2018/04/06/URL-to-browser/tls-1.png" class=""></li><li><p>服务器接收到报文后返回 <code>Server Hello</code> 作为应答，该消息包括其选定的密码套件和服务器随机数</p></li><li><p>接着发送包含公开密匙证书的 <code>Certificate</code>。</p></li><li><p>服务器使用 <code>Diffie-Hellman</code> 密钥交换。获取客户端和服务器的随机数以及将用于计算会话密钥的 <code>DH</code> 参数，并使用其私钥对其进行加密，发送<code>Server Key Exchange</code>。</p></li><li><p>服务器发送 <code>Server Hello Done</code> 等待客户端响应。</p><img data-src="/blog/2018/04/06/URL-to-browser/tls-2.png" class=""></li><li><p>客户端使用之前交换的 DH 参数来获取 <code>Pre-master Secret</code>，发送 <code>Client Key Exchange</code>。</p></li><li><p>客户端发送 <code>Change Cipher Spec</code> 指示服务器使用后续的密钥和算法加密发送后续消息。</p></li><li><p>客户端使用刚刚由 <code>DH</code> 协商出来的对称密钥加密通信报文，发送 <code>Encrypted Handshake Message</code> (finish message)，如果这个报文加解密校验成功，那么就说明对称秘钥是正确的。</p><img data-src="/blog/2018/04/06/URL-to-browser/tls-3.png" class=""></li><li><p>服务器验证客户端的信息后，会发送 <code>New Session Ticket</code> 来更新客户端的 <code>session ticket</code>。<code>session ticket</code> 是对话密钥(session key)和加密方法经过加密后的信息，它由服务器生成，由客户端储存。</p></li><li><p>服务器发送 <code>Change Cipher Spec</code> 消息，通知客户端已更改加密规范。</p></li><li><p>发送 <code>Encrypted Handshake Message</code>，完成服务器握手。</p></li><li><p>接着就可以发送应用数据了。</p></li></ol><img data-src="/blog/2018/04/06/URL-to-browser/tls-4.png" class=""><p><strong>本章参考资料:</strong></p><ul><li><a href="https://tools.ietf.org/html/rfc5246">RFC 5246</a></li><li><a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Diffie-Hellman 密钥交换</a></li><li>《图解 HTTP》</li></ul><!-- - [](http://www.onem2m.org/tr-0038/examples/sae-flows/certificate-based-sae)- [Keyless SSL: The Nitty Gritty Technical Details](https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/)- [Taking a Closer Look at the SSL/TLS Handshake](https://www.thesslstore.com/blog/explaining-ssl-handshake/#the-tls-12-handshake-diffie-hellman-edition) --><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>通过 <code>SSL/TSL</code> 进行安全传输后，客户端发起了 <code>HTTP</code> <code>GET</code> 请求。服务器读取请求后，对 HTTP 请求进行处理。</p><p>服务器会判断请求是否合法，比如检查 <code>cookie</code> 信息，看用户是否有权访问这个资源。再根据请求类型做相应处理，最终会将处理结果以及 <code>HTTP</code> 状态码返回给客户端。</p><p><code>www.zhihu.com</code> 是需要登录后才能访问的，登录过程大致如下:</p><ol><li>用户在页面输入账号密码点击登录，浏览器会通过 <code>HTTP POST</code> 提交用户信息给服务端。</li><li>服务端接收到用户提交的登录请求后，会验证账号密码是否正确，若正确会在 HTTP 头部通过 <code>set-cookie</code> 设置 <code>sessionID</code> 来标识用户是否登录。下次客户端请求服务器资源时，会自动携带这些 <code>cookie</code> 信息，服务器再通过 <code>sessionID</code> 来判断请求的人是谁。注意，<code>sessionID</code> 这字段是业界公认用于标识用户信息的字段，具体实现时也可以换一个字段名。</li><li>浏览器根据服务端返回的结果做相应的反应，如若登录成功，一般会通过重定向将用户带到指定的页面上。</li></ol><p>以上是比较通用的登录流程，笔者没有去抓包来验证知乎具体的登录方案。</p><p>我们可以打开浏览器匿名模式(此时匿名模式没有 cookie 缓存)，直接访问 <code>www.zhihu.com</code> 没有登录信息浏览器会返回 <code>302</code> (临时重定向) 会被重定向 <code>https://www.zhihu.com/signin?next=%2F</code> 这个登录页上。</p><img data-src="/blog/2018/04/06/URL-to-browser/http-1.png" class="" title="被重定向前"><img data-src="/blog/2018/04/06/URL-to-browser/http-2.png" class="" title="被重定向后"><p>由此可以看出 <code>HTTP</code> 状态码与 <code>HTTP</code> 方法在浏览器与服务器通信之间的重要作用，下面介绍些常用的状态码与方法:</p><table><thead><tr><th>HTTP Method(方法)</th><th>解释</th></tr></thead><tbody><tr><td>GET</td><td>该方法用来请求访问已被 URI 识别的资源。我们直接在浏览器地址上输入合法的 URL 后，浏览器就会发出一个 <code>GET</code> 请求。</td></tr><tr><td>HEAD</td><td>与 <code>GET</code> 方法类似，只不过 <code>HEAD</code> 只会返回头部信息，不带回资源实体。</td></tr><tr><td>POST</td><td>向指定资源提交数据，请求服务器进行处理。比如提交 <code>form</code> 表单，提交较为复杂的参数的。</td></tr><tr><td>PUT</td><td>向指定资源位置上传其最新内容。</td></tr><tr><td>DELETE</td><td>请求服务器删除指定资源。</td></tr><tr><td>OPTIONS</td><td>预检请求，该方法可使服务器传会资源所支持的所有请求方法。</td></tr></tbody></table><p><code>HTTP</code> 状态码可以通过首位数字区分状态码大致是属于什么类型的：</p><table><thead><tr><th>HTTP status(状态码)</th><th>解释</th></tr></thead><tbody><tr><td>1xx</td><td>消息</td></tr><tr><td>2xx</td><td>成功</td></tr><tr><td>3xx</td><td>除了 <code>304</code> 状态码，其他大多与重定向相关</td></tr><tr><td>4xx</td><td>客户端错误</td></tr><tr><td>5xx</td><td>服务端错误</td></tr></tbody></table><p>日常工作中常见状态码：</p><table><thead><tr><th>HTTP status(状态码)</th><th>解释</th></tr></thead><tbody><tr><td>200 (ok)</td><td>请求成功</td></tr><tr><td>301 (Move Permanently)</td><td>永久重定向，表示这资源搬家了，你去 <code>location: //xxx.com</code> 可以找到它</td></tr><tr><td>302 (Found)</td><td>临时重定向。该资源可能临时出门旅游了，你可以先去 <code>location: //xxx.com</code> 看看情况。晚些时候它也可能会回来，也可能跑路了</td></tr><tr><td>304 (Not Modified)</td><td>客户端发送 <code>GET</code> 请求时，服务器通过请求头部信息发现请求的资源跟以前请求的那份一样，没有发生改变。然后服务端会返回 <code>304</code> 状态码并对客户端说：<code>你想要的资源跟以前一样，你直接用缓存的文件吧，货我就不给你，毕竟寄东西是需要邮费</code></td></tr><tr><td>400 (Bad Request)</td><td>客户端向服务器发送的请求报文中存在语法错误，服务器看不懂就会返回 <code>400</code> 状态码并对客户端说: “朋友，现在我再给你一次组织语言的机会，你仔细瞧瞧是不是漏了点啥”</td></tr><tr><td>401 (Unauthorized)</td><td>未认证，客户端向服务器请求的资源需要认证信息，客户端没有认证信息</td></tr><tr><td>403 (Forbidden)</td><td>服务器已经理解请求，但是拒绝执行它。(大灰狼: “小白兔开门，我给你叔叔的妹夫的堂兄呀！我跟你爹可是熟人”；小白兔：”大坏蛋，你休想骗我开门！“)</td></tr><tr><td>404 (Not Found)</td><td>请求失败，请求所希望得到的资源未被在服务器上发现。也有可能是资源存在，但服务器不想给你就假装不在。(某天你想拜访旧友，发现人家拆迁了，甚至楼都被铲平了)</td></tr><tr><td>500 (Internal Server Error)</td><td>服务器抛错，无法正常完成请求的处理。有可能有 bug、也可能是其他原因</td></tr><tr><td>503 (Service Unavailable)</td><td>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。访问页面遇到此错误多数情况下是正在部署页面</td></tr><tr><td>504 (Service Unavailable)</td><td>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器或者辅助服务器收到响应。</td></tr></tbody></table><p>由于笔者目前的环境上没有屏幕录制工具，这里就直接用笔者以前录制的旧图来演示。下面是调整网络速度后访问掘金首页的所发起 <code>HTTP</code> 加载过程:</p><img data-src="/blog/2018/04/06/URL-to-browser/anima-2.gif" class="" title="访问掘金首页"><p>在输入网址后，浏览器向服务端发起请求，服务端会将目标资源通过 <code>HTTP</code> 返回，浏览器解析文档时，再一次根据文档里的(link 或者 script 标签)进一步请求外部资源（详情放在下面再说）.</p><p>我们可以在<strong>Network</strong>上看到，浏览器将请求发出去后，请求的<code>status</code>会变为<code>pending</code>，这也是上面说到开始建立连接请求的第一步，正在等待服务器的回应。随即我们点进请求详情内，可以发现请求头只有少量的字段。</p><p>我们再打开一个请求状态（status）为 200 的请求，就能看到完整的请求头以及服务端传回来的响应了.</p><p><strong>扩展资料:</strong></p><ul><li>《图解 HTTP》</li><li>《HTTP 权威指南》</li></ul><hr><h2 id="渲染文档"><a href="#渲染文档" class="headerlink" title="渲染文档"></a>渲染文档</h2><p>浏览器开始解析页面，不同的浏览器引擎渲染过程都不太一样，这里以 <code>webkit内核</code> 的渲染方式为例：</p><ol><li><p>首先浏览器的 HTML 解释器（HTML Parser）先工作，它将 HTML 的标签解析为 DOM 树。（DOM 树构建）.</p><p>如果遇到了<code>&lt;script&gt;</code>标签则会停止解析文档，这是因为 JavaScript 中可能会带有<code>document.write</code>方法，可能会重写页面的结构，因此浏览器会等待<code>script</code>标签下载完毕并执行后才会继续解析文档。</p><p>这也是著名的 web 开发最佳实践的规则之一的由来————将<code>&lt;script&gt;</code>放在<code>&lt;body/&gt;</code>之上，这样就不会阻塞文档解析了。</p></li><li><p>接着 css 解析器（CSS Parser）会在 DOM 树构建完毕后开始解析 css，它和 DOM 树一样最后解析出来的是树形结构的<strong>CSSOM</strong>（css object module，别名也要 StyleRules），浏览器将解析后的样式信息保存到新建的<code>RenderStyle</code>对象中。</p></li><li><p><code>RenderStyle</code>对象被<code>RenderObject</code>类所管理和使用.</p></li><li><p>当创建 RenderObject 对象之后，每个对象是不知道自己的位置、大小等信息的，webkit 根据盒模型来计算他们的位置、大小等信息，这个过程也被称之为回流与重绘（reflow and reflow）.</p></li><li><p>页面呈现.</p></li></ol><p>下图是 <code>Mozilla</code> 官网的页面渲染的过程:</p><img data-src="/blog/2018/04/06/URL-to-browser/Mozilla.gif" class=""><hr><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work">渲染页面：浏览器的工作原理</a></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本篇文章是笔者去年初写的了。由于最近几个月都在研究计算机底层的知识，因此想借此机会重构本篇文章。</p><p>由于现实工作的缘故，目前只来得及对大部分内容进行重写，本篇后期一些内容讲的比较简单，如果之后还有空的话会继续重构。</p><p>本文主要是通过笔者现有的知识体系进行概括性科普，若有内容表达得不对，欢迎在评论区或私信指正~如果想更深入的学习计算机底层的知识，建议通过专业的教材进行系统的学习。本文各章下都有参考资源与推荐阅读，有兴趣的朋友可以去了解一下。</p><p>最后欢迎读者朋友们订阅笔者博客。整理学习笔记不易，不点个赞鼓励一下笔者再走吗~</p><ul><li><a href="https://anran758.github.io/blog/atom.xml">Blog RSS</a> 笔者博客的 rss 订阅链接</li><li><a href="https://github.com/anran758/Front-End-Lab">Front-End-Lab</a> 笔者的知识碎片库</li></ul><p><img data-src="https://pic1.zhimg.com/80/v2-7c35091abc2379395b66118e9740d024_hd.png" alt="耶!"></p><hr><p><strong>更新日志:</strong></p><ul><li>2019.12.07: 重构大纲</li><li>2021.05.06: 补充简短版与扩展阅读</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> TCP </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你可能不了解的图片加载方式</title>
      <link href="/blog/2018/03/24/loading-pictures/"/>
      <url>/blog/2018/03/24/loading-pictures/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/03/24/loading-pictures/banner.png" class=""><p>[大图预警，流量慎入！] 我们在浏览页面、获取信息时，细心的你可能会留意到，不同网页的图片可能有不同的加载表现。那么究竟是由什么决定图片的加载方式的呢? 然后不由的陷入了沉思(.jpg)，接着来了解一下关于图片加载的小知识吧、</p><span id="more"></span><h2 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h2><p>目前所知的图片加载方式主要有两种: 一种是<strong>线性加载</strong>，而另一种则是<strong>渐进式加载</strong>。</p><p><strong>线性加载</strong>其实就是在我们浏览网页时常看见的那种 —— 网速足够慢或者图片尺寸过大时，可以看到图片的加载方式由上至下，一点一点的加载。比如我们随便去一个壁纸库点开一个壁纸，就很明显的看到这种加载方式:</p><img data-src="/blog/2018/03/24/loading-pictures/anima-1.gif" class=""><p><strong>渐进式</strong> 则如同名字一般, 它会先显示低分辨率的近似图像，再逐步的增加图片分辨率(模糊到清晰)。这里容笔者卖个关子，不上示例图。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>那么到底是什么决定了图片的加载方式呢? 事实上，加载方式在作图的时候就已经被定下来了。</p><p>在 <code>photoshop</code> 中，我们按下快捷键<code>ctrl + shift + alt + s</code>（弹出储存为 Web 所用格式），再选择 <code>jpeg</code> 格式后可以看到下面有一个<strong>连续</strong>的选项(悬浮提示以多条路径下载)，这个选项调用的是<code>离散小波变换</code>算法(该算法也作为 <code>JPEG2000</code> 的內部架构)，选项默认是不勾选的。而默认的 <code>线性加载</code> 则是 <code>离散余弦变化算法</code>。</p><img data-src="/blog/2018/03/24/loading-pictures/img-1.jpg" class="" title="Photoshop 界面"><p>浏览器在加载页面的时候，会读取图片的压缩算法，再根据不同的压缩算法来选择相应的渲染算法。</p><h2 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h2><p>接着来动手试试实际效果吧: 笔者准备了两张相同内容但不同加载方式的 <code>jpg</code> 格式的图片，并且起了一个本地服务器。将控制台打开，设置一个较差的网速来对比两张图片的加载情况.</p><img data-src="/blog/2018/03/24/loading-pictures/diff-1.gif" class="" title="jpg格式下, 两张图片加载对比"><p>what? 似乎跟想象中的有所出入? 仔细一瞧，图一虽然先是从上至下的加载, 但同时它的清晰度也跟着变化。而图二则没有这种的效果。</p><p>由于图片尺寸的问题，使对比的效果不够明显，接着笔者再准备了两张 <code>png</code> 格式的图片( <code>photoshop</code> 上 <code>png</code> 格式需要勾选的选项变成是<strong>交错</strong>)，然后再次进行试验:</p><img data-src="/blog/2018/03/24/loading-pictures/diff-2.gif" class="" title="png格式下, 两张图片加载对比"><p>更换的 demo 图片后，可以很直观的看到 —— 渐进式图片前期会有一个结构的构建过程，但很快就完成了基础框架的渲染，我们从 Network 上还可以看到，虽然图一最先渲染出了样子但此时并不是并不是最完整的图片。</p><p>安静的等待渲染完毕后，你可能会惊讶的发现: 什么? 图一竟然比图二还加载的时间还长一点?</p><p>是的，得益于渐进式逐步加载的算法，人们在视觉上会感觉渐进式相比线性加载更快一些，这是一种视觉的效果。虽然实际加载的时间可能还会长点，但从用户体验的确不一样了.</p><p>然而并非所有浏览器都支持渐进式加载, 翻阅了一下资料, 发现早期张鑫旭 dalao 也写过类似的内容, 也可以参考一看: <a href="http://www.zhangxinxu.com/wordpress/2013/01/progressive-jpeg-image-and-so-on/">渐进式 jpeg(progressive jpeg)图片及其相关</a></p><h2 id="JavaScript-的渐进式"><a href="#JavaScript-的渐进式" class="headerlink" title="JavaScript 的渐进式"></a>JavaScript 的渐进式</h2><p>前文介绍渐进式的时候卖了个关子，没上示例图是为啥呢?</p><p>这是因为此物非彼物, 我们常看到的渐进式加载可能不是由图片本身算法的效果, 为了避免混淆才暂时不上。文章看到这里，有过开发经验的朋友就会明白，从实际出发若真有这种需求，我们总不能祈祷全部用户上传图片都是渐进式的吧，这也够不现实。</p><p>google 图片就是使用 <code>javascript</code> 来实现图片的渐进式加载。我们来分析一下它实现方式：</p><p>在点击查看大图的时，它会预先加载一个缩略图，同时图片底部有一条 loading 的效果，等加载完毕后就显示清晰的图片且将 loading 隐藏起来。笔者在控制台研究一下没有找到实现的源码。知道的朋友也不妨留言交流一下~</p><img data-src="/blog/2018/03/24/loading-pictures/google-1.gif" class="" title="google 图片加载方式"><p>知乎也有使用渐进式加载图片，已经有知友分析过了，实现方式跟我<a href="https://anran758.github.io/blog/2018/03/11/%E5%85%B3%E4%BA%8E%E5%89%8D%E5%8F%B0GIF%E5%8A%A8%E5%9B%BE%E9%80%90%E4%B8%AA%E6%92%AD%E6%94%BE%E7%9A%84%E6%80%9D%E8%B7%AF/">上一篇文章</a>讲的东西思路也有相似之处，只不过是针对方向不同~</p><p> 有兴趣的可以移步知友的回答: <a href="https://www.zhihu.com/question/55622930/answer/145475243">新版知乎加载图片时从模糊到清晰的这个效果是如何做出来的？ - Tw93 的回答</a></p>]]></content>
      
      
      <categories>
          
          <category> 原理解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理解析 </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于移动端GIF动图逐个播放的思路</title>
      <link href="/blog/2018/03/11/%E5%85%B3%E4%BA%8E%E5%89%8D%E5%8F%B0GIF%E5%8A%A8%E5%9B%BE%E9%80%90%E4%B8%AA%E6%92%AD%E6%94%BE%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
      <url>/blog/2018/03/11/%E5%85%B3%E4%BA%8E%E5%89%8D%E5%8F%B0GIF%E5%8A%A8%E5%9B%BE%E9%80%90%E4%B8%AA%E6%92%AD%E6%94%BE%E7%9A%84%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/03/11/%E5%85%B3%E4%BA%8E%E5%89%8D%E5%8F%B0GIF%E5%8A%A8%E5%9B%BE%E9%80%90%E4%B8%AA%E6%92%AD%E6%94%BE%E7%9A%84%E6%80%9D%E8%B7%AF/banner.png" class="lazy"><p>最近碰到了一个需求, 大致是移动端有一个提示页, 在页面中会四个GIF图, 连起来像一个”小视频”一样, 用来展示商品的步骤.</p><p>但是四个GIF一起播放的话, 那么用户体验就自然没有那么好啦. 我仔细的想了想, 想到了微博的GIF图好像就是一张一张播放的, 那么我们前端有没有办法也实现这个逐个播放的功能呢…</p><span id="more"></span><hr><p>事实上, 浏览器并没有给我们提供控制GIF的API(据说曾经好像有, 但因为用户体验的问题被废除了, 关于这点我没有去考证过), 我们无法得知这个动画是否已经结束了, 或者控制它的播放和停止.</p><p>网上并没有太多关于这方面的资料, 不过张鑫旭dalao的<a href="http://www.zhangxinxu.com/wordpress/2015/12/css3-animation-js-canvas-gif-pause-stop-play/">这篇文章</a>. 其中一个方法给我一个思路 —— 虽然<code>img</code>并没有这种事件, 但是我们可以使用canvas做替换呀.</p><p>说干就干, 这里借鉴dalao的代码, 对<code>HTMLImageElement</code>(可以用来操纵<code>&lt;img&gt;</code>元素的布局和图像)的原型作扩展, 增加两个方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;getContext&#x27;</span> <span class="keyword">in</span> <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 扩展播放功能</span></span><br><span class="line">  HTMLImageElement.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.storeCanvas) &#123;</span><br><span class="line">      <span class="comment">// 移除存储的canvas</span></span><br><span class="line">      <span class="built_in">this</span>.storeCanvas.parentElement.removeChild(<span class="built_in">this</span>.storeCanvas);</span><br><span class="line">      <span class="built_in">this</span>.storeCanvas = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 透明度还原</span></span><br><span class="line">      <span class="built_in">this</span>.style.opacity = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.storeUrl) &#123;</span><br><span class="line">      <span class="built_in">this</span>.src = <span class="built_in">this</span>.storeUrl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 扩展停止功能</span></span><br><span class="line">  HTMLImageElement.prototype.stop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> width = <span class="built_in">this</span>.width;</span><br><span class="line">    <span class="keyword">let</span> height = <span class="built_in">this</span>.height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (width &amp;&amp; height) &#123;</span><br><span class="line">      <span class="comment">// 存储图片链接</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.storeUrl) &#123;</span><br><span class="line">        <span class="built_in">this</span>.storeUrl = <span class="built_in">this</span>.src;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// canvas 和图片相同宽高</span></span><br><span class="line">      canvas.width = width;</span><br><span class="line">      canvas.height = height;</span><br><span class="line">      canvas.getContext(<span class="string">&#x27;2d&#x27;</span>).drawImage(<span class="built_in">this</span>, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 重置当前图片</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.src = canvas.toDataURL(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// 跨域, 这时画布被污染</span></span><br><span class="line">        <span class="built_in">this</span>.removeAttribute(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line">        canvas.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入图片</span></span><br><span class="line">        <span class="built_in">this</span>.parentElement.insertBefore(canvas, <span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">this</span>.style.opacity = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.storeCanvas = canvas;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为前台并没有我们想要操作图片的事件, 因此无法得知gif能持续多少秒, 这点只能由服务端来判断. 所幸这次情况没有那么复杂, 我们不需要适配随机的GIF. 就根据我们手头的动图计算有多少帧, 查看得知每个GIF播放时间都为3s. 再使用定时器的方式去调用方法, 为了防止用户没看清GIF的动作, 因此在定时器时间上再翻了一倍.</p><p>页面代码大致如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .split-line End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;body-title&quot;</span>&gt;</span>观影指南<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body-tips&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips-line clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips-img&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./tips-1.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;tips-1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tips-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>1.坐上座椅，系好安全带<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- .tips-group End --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips-img&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./tips-2.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;tips-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tips-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>2.于右手边取眼镜佩戴，并带上耳机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- .tips-group End --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- .tips-line End --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips-line clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips-img&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./tips-3.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;tips-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tips-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>3.按下扶手上的按钮，开始观影<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tips-img&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./tips-4.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;tips-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;tips-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>4.如感不适，长按按钮停止观 影<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- .tips-line End --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .body-tips End --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先选择全部目标GIF, 使其暂停(初始化). 紧接着包装一下定时器用函数调用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意这里是 ES6 的写法</span></span><br><span class="line"><span class="keyword">const</span> images = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.tips-img img&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> palyTimer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palyGif</span> (<span class="params">num = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">clearTimeout</span>(palyTimer)</span><br><span class="line">  images[num].play()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  palyTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    images[num].stop()</span><br><span class="line">    num = (images.length - <span class="number">1</span> &lt;= num) ? <span class="number">0</span> : ++num</span><br><span class="line">    images[num].play()</span><br><span class="line">    <span class="keyword">return</span> palyGif(num)</span><br><span class="line">  &#125;, <span class="number">6000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">images.forEach(<span class="function"><span class="params">img</span> =&gt;</span> img.addEventListener(<span class="string">&#x27;load&#x27;</span>, img.stop, &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;))</span><br><span class="line"><span class="comment">// 函数提升, 将其推向下一队列</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> palyGif(), <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>仅仅几行代码留实现我们想要的效果啦(图片压了下):</p><img data-src="/blog/2018/03/11/%E5%85%B3%E4%BA%8E%E5%89%8D%E5%8F%B0GIF%E5%8A%A8%E5%9B%BE%E9%80%90%E4%B8%AA%E6%92%AD%E6%94%BE%E7%9A%84%E6%80%9D%E8%B7%AF/anima-1.gif" class=""><hr><p>至于微博那种逐个播放的效果, 我原本想在控制台研究一下它实现的原理. 但仔细一看, 发现微博动图在手机客户端和非客户端上的效果是不一样的. 也就是说在安卓客户端上的确逐个播放, 但是在手机网页上却是一起播放, 并没有实现这个功能, PC页面同理, 因此推测并不是使用js实现的.</p><p>最后各位看官如果有什么好的想法的话, 可以留个言一起交流一下呗~</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 移动端 </tag>
            
            <tag> GIF </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊常见的跨域问题</title>
      <link href="/blog/2018/03/04/%E8%81%8A%E8%81%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2018/03/04/%E8%81%8A%E8%81%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/03/04/%E8%81%8A%E8%81%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/banner.jpg" class=""><p>跨域是前端工程中一个很常见的问题啦. 今天就来聊一聊跨域, 以及常见的处理方式和原理.</p><span id="more"></span><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域?"></a>什么是跨域?</h2><p>跨域实际上源于浏览器对javascript的一种安全限制(也被称之为同源策略). 默认情况下, 我们只能访问同一协议、同一域名、同一端口下的资源. 如今都是提倡前后分离的情况下, 前端更是需要调用大量后台接口的场景, 因此解决跨域的问题就摆在了面前.</p><h2 id="产生跨域的原因"><a href="#产生跨域的原因" class="headerlink" title="产生跨域的原因"></a>产生跨域的原因</h2><p>产生跨域的原因我们主要归为这两点:</p><ol><li>浏览器安全限制(不能读取不同域、端口、协议下的内容)</li><li>使用的是XHR(XMLHttpRequest)请求</li></ol><p>同源策略这个原因是众所周知了, 它作为一个安全策略, 的确有效预防了某些安全上的问题. 但同时又阻止了大量适合使用的跨域请求. 而 XHR 也受同源策略影响: 浏览器不允许 javascript 查找跨域文档的内容. 使用 XHR, 文档内容都是通过<code>responseText</code>属性暴露, 因此同源策略不允许 XHR 进行跨域请求.</p><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><p>跨域很多情况下都需要后端的配合, 因此主要先来谈谈前端的跨域方案.</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>前文我们说过, 产生跨域的原因之一XHR请求, 但是<code>script</code>发出的请求类型(type)并不是<code>xhr</code>, 因此可以解决跨域的问题.</p><p>JSONP 由回调函数和数据组成的, 实现方式就是动态创建一个<code>&lt;script&gt;</code>标签, 然后设置<code>src</code>属性指向的跨域的URL(包涵请求参数). 来向服务端请求数据.</p><p>比如我们要查询小明的信息, 这时我们得知它的<code>userID</code>为 1150, 同时我们都知道GET请求可以通过url进行传参, 因此我们向服务器发起请求:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">script.src = <span class="string">&quot;https://www.example.com/users?user_id=1150&quot;</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script)</span><br></pre></td></tr></table></figure><p>在插入<code>&lt;script&gt;</code>标签到<code>&lt;body&gt;</code>后, 浏览器立马就去请求服务器的资源. 值得注意的是, 使用<code>jsonp</code>也需要服务端的配合. 因此必须通过某种方式来告知服务端, 我们正在通过<code>&lt;script&gt;</code>标签调用请求, 必须返回一个JSONP响应, 而不应该是普通JSON响应.</p><p>至于什么叫<code>jsonp</code>响应呢? 这里其实很好理解.. 假设后端发回来的是<code>json</code>格式的数据, 我们也用不了呀, 数据还是数据, 不会做任何变化.. 为了让浏览器可以在<code>&lt;script&gt;</code>标签里直接使用, 我们需要让服务端返回一段js代码 —— 用函数包装的json的形式(这也jsonp中”P(padding)”的含义). 这个函数名前后端可约定. 如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端返回 js 代码到 &lt;script&gt;里</span></span><br><span class="line">userData(&#123;<span class="string">&#x27;naem&#x27;</span>:<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;id&#x27;</span>:<span class="number">1150</span>,<span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;中等&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当 jsonp 请求成功后, 将json传入函数并调用, 我们拿到 json 后就可以做一些其他的事</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来拿B站为例. 打开chrome下的network, 上图就是<code>jsonp</code>的应用, 服务端返回的js脚本. 下图可以发现, 我们发出去的请求类型是<code>script</code>,  验证了前文所说的<code>&lt;script&gt;</code>不受同源策略影响的.</p><img data-src="/blog/2018/03/04/%E8%81%8A%E8%81%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/img-1.jpg" class=""><p>目前主流的类库都对<code>jsonp</code>进行了封装, 如<code>JQuery</code>的<code>getJSON</code>和<code>ajax</code>, 这里就不深入讲解了. 最后对<code>jsonp</code>总结一下:</p><p><code>jsonp</code>实际上是一个非正式传输协议, 或者说是一种”投机取巧”的方式. 我们可以利用<code>&lt;script&gt;</code>的特性从而进行数据交互解决跨域的问题. 相对来说, 它也有一定的局限性: 只能应用在GET请求上, 除此之外还有安全性的问题 —— 只能用在我们信任的服务端, 因为你不能保证对方未来会给你传些什么…</p><h3 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享(CORS)"></a>跨域资源共享(CORS)</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>说完了”不正规”的<code>jsonp</code>, 紧接着我们再说说原生的<code>CORS</code>规范. 我们先来看看官方的定义:</p><p><strong>CORS(Cross-origin resource Sharing, 跨资源共享)</strong>, 定义了访问跨域资源时, 浏览器和服务器应该如何沟通. 其背后主要思想就是<strong>使用自定义的HTTP头部</strong>来让浏览器与服务器进行沟通, 从而决定请求或相应是否成功, 还是应该失败.</p><p>目前主流的浏览器都已经对CORS有着良好的支持, 而IE8 ~ 9则还需要使用专用的<code>XDomainRequest</code>这里我们抛开不谈.</p><img data-src="/blog/2018/03/04/%E8%81%8A%E8%81%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/img-2.png" class=""><p>这个功能实际上是由浏览器自动完成的, 我们并不需要做什么额外的工作. 对于开发者来说, 也就需要了解一些安全细节的问题, 这一点我们放在后面讲.</p><h4 id="两种请求"><a href="#两种请求" class="headerlink" title="两种请求"></a>两种请求</h4><p>浏览器发送CORS请求时, 会将请求分为<strong>简单请求</strong>与<strong>非简单请求</strong>.</p><p>在我们日常工作中, 常用的<strong>简单请求</strong>可以将其归为以下几点:</p><ul><li>使用的方法(Methods)为<code>HEAD</code>、<code>GET</code>、<code>POST</code></li><li>请求头无自定义头</li><li><code>Content-Type</code>只能是以下几种<ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li></ul><p><strong>非简单请求:</strong></p><ul><li><code>PUT</code>, <code>Delete</code> 方法的 ajax 请求</li><li>发送 JSON 格式的 ajax 请求(比如post数据)</li><li>带自定义头的 ajax 请求</li></ul><p>如果是简单请求, 则会<strong>先执行, 后判断</strong>。执行的过程大致如下:</p><p>浏览器发起请求检测到是 CORS 请求, 然后添加一个<code>origin</code>字段(其中包含页面源信息: 协议、域名、端口) =&gt; 服务端收到后作相应的处理(对比<code>origin</code>, 服务端判断这个源是否接受)返回结果给浏览器 =&gt; 浏览器检查响应头是否允许跨域信息 =&gt; 允许, 那就当做没事发生. 不允许, 浏览器抛出相应的错误信息(值得一提的是, 这时状态码也还有可能是200).</p><p>非简单请求执行顺序又有些不同. 在发生 CORS 请求时, 浏览器预先发送一个<code>option</code>请求. 浏览器这种行为被称之为<strong>预检请求(Preflighted request)</strong>. 其中包含如下的请求头:</p><ul><li>origin: 同上，包含页面源信息.</li><li>Access-Control-Request-Methods: 请求方法</li><li>Access-Control-Request-Header: 自定义头部信息, 多个头部以逗号分隔(可选, 看请求时有没有定义请求头)</li></ul><p>举个栗子, 我们用JQuery发送一段JSON格式的请求做演示:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  type : <span class="string">&quot;post&quot;</span>,</span><br><span class="line">  url: <span class="string">&quot;https://www.example/api/rank&quot;</span>,</span><br><span class="line">  contentType : <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span><br><span class="line">  data: <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">&quot;something&quot;</span>&#125;),</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">    result = json;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时请求头(Request Headers)信息如下:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Access-Control-Request-Header</span><span class="punctuation">: </span>content-type</span><br><span class="line"><span class="attribute">Access-Control-Request-Methods</span><span class="punctuation">: </span>POST</span><br><span class="line">Connection:keep-alive</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>https://www.example.com</span><br><span class="line"><span class="attribute">origin</span><span class="punctuation">: </span>localhost:8080</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1</span><br></pre></td></tr></table></figure><p>服务端接收到预检请求后, 判断是否允许这种类型的请求. 在响应头(Response Header)上返回如下头部与浏览器进行交流:</p><ul><li>Access-Control-Allow-Origin: 服务端允许的源信息</li><li>Access-Control-Allow-Methods: 服务端允许的方法, 多个方法可以使用顿号分隔</li><li>Access-Control-Allow-Headrs: 服务端允许的头部, 多个头部可以使用顿号分隔</li></ul><p>当预检请求被通过后, 我们原本想要发送的请求才会发送出去.</p><p>另外, 细心的你或许已经注意到了, 非简单请求这一来一回需要发送两次请求, 如果频率高的情况下岂不是很费性能又影响效率? 所幸的是HTTP协议新增(IE10+)了一个响应头用于缓存预检请求. 服务端在响应头添加如下字段:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Max-Age</span><span class="punctuation">: </span>3600</span><br></pre></td></tr></table></figure><p>这个响应头表示这个预检请求可以缓存多长时间, 单位为秒. 这里3600s = 1h, 也就是说一个小时内可以不用再发预检命令了.</p><h4 id="带-cookie-的跨域请求"><a href="#带-cookie-的跨域请求" class="headerlink" title="带 cookie 的跨域请求"></a>带 cookie 的跨域请求</h4><p>默认情况下, 跨域请求是不带上 cookie 的. 前端需要将<code>withCredentials</code>属性设置为<code>true</code>, 同时还需要服务端设置<code>Access-Control-Allow-Credentials</code>为<code>true</code>启动 cookie. 如果在发送 cookie 的时候, 浏览器检测到服务端响应头没有这个头部, 那么就会在控制台抛出一个错误.</p><p>另外, 还有一个值得注意的是. 服务端响应头设置了<code>Access-Control-Allow-Origin: *</code>的话, 是不能满足带 cookie 的跨域请求的. 因此有这种场景不能使用通配符, 需要全匹配字段.</p><h4 id="CORS-总结"><a href="#CORS-总结" class="headerlink" title="CORS 总结"></a>CORS 总结</h4><p>简单总结一下 CORS. CORS的出现也是为了解决跨域的问题. 只不过和<code>JSONP</code>不同, 它是纳入规范的一部分, 它几乎支持所有的类型的HTTP请求(JSONP只能使用GET). 唯一美中不足的也就是兼容性的问题, 因此可以使用JSONP作向下的兼容</p><p>事实上前端在 CORS 上并没有多少可操作的余地, 主要的还是浏览器来处理、服务端在设置, 但是并不代表我们就不需要了解这些知识啦.</p><hr><p>嗯, 其他的跨域方法先挖个坑..</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[环境搭建] 从零开始配置 vscode</title>
      <link href="/blog/2018/02/06/dev-zero-configuration-vscode/"/>
      <url>/blog/2018/02/06/dev-zero-configuration-vscode/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/banner.png" class=""><p>我们在进行开发工作时，选择一个顺手好用的编辑器是必不可免的, 其中 <code>vscode</code> 就是一个很好的选择。它能让你大部分的工作都在编辑器内完成, 大大的提高开发效率~</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>vscode</code> 内置了前端相关的基础环境，如<code>emmet</code>扩展。另外的环境则可以通过它自己的插件商城来找到对应的插件。比如常见的预处理器的语法高亮。同时它有良好成熟的生态圈, 足够满足我们日常开发的所需的东西.</p><p>它提供了很多便捷的自定义配置，并且贴心的给每行设置都加上了备注，告诉你是有什么作用。</p><p>同时 <code>vscode</code> 对中文的支持很好，对于啃英语有些吃力的朋友会比较友善(虽然英语是程序员的基本功之一~</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/img-1.jpg" class=""><p><code>vscode</code> 还内置 <code>git</code> 源代码管理系统, 也就是说我们在写完代码后无需离开编辑器再另开一个<code>bash</code>来提交代码，直接在编辑器上完成对比代码差异后，确定无误后再提交相关的工作。还可以直接在编辑器上进行代码调试, 不过这些不在本文的讨论中。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=azemoh.one-monokai">One Monokai Theme</a></p><p>程序员的日常生活就是在<code>coding</code>, 可以说每天都在跟编辑器打交道, 因此编辑器的颜值能影响到咱们的心情，进而影响开发效率~</p><p>在扩展商城里, 我们可以去挑选一些自己喜欢的主题, 来提高编程体验。这里笔者推荐使用<code>One Monokai</code>的主题, 它的配色对阅读代码还是挺舒服的，当然也可以去尝试其他的主题~</p><p>下载主题后还需要<code>用户设置</code>上设置使用的主题.</p><h2 id="关于快捷键"><a href="#关于快捷键" class="headerlink" title="关于快捷键"></a>关于快捷键</h2><p>如果你是某个编辑器的用户，你已经习惯了原先编辑器的快捷键，现在切换过来的话怕又要重新设置自己熟悉的快捷键觉得很麻烦的话，没有关系~</p><p><code>vscode</code>贴心的准备了其他编辑器快捷键插件，节省你重新学习的时间成本。笔者就是从<code>sublime</code>转向<code>vscode</code>从此一去不复返~</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/img.png" class=""><h2 id="同步配置"><a href="#同步配置" class="headerlink" title="同步配置"></a>同步配置</h2><p>假设你现在配置了让自己很舒服的一个开发环境，这时你因为硬件故障导致电脑重装或者电脑迁移等因素，要需要重新配置环境，那肯定会挺苦恼的。</p><p>因此强烈推荐安装一个<a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync">settings sync</a>的插件！</p><p>它需要一个<code>Github</code>账号以及<code>gits</code>的<code>token</code>，它将你<code>vscode</code>相关的配置相关全部提交上<code>gits</code>上。这样不管你因为什么缘故导致重新安装开发环境，恢复<code>vscode</code>的环境只需三步：下载并安装<code>vscode</code>、下载<code>settings sync</code>、校验<code>token</code>并从远程下载配置。</p><h2 id="扩展插件"><a href="#扩展插件" class="headerlink" title="扩展插件"></a>扩展插件</h2><p>善用插件的力量可以很大的提升我们的开发效率. 下面是一些常用插件跟大家分享一下.</p><h3 id="编辑器扩展"><a href="#编辑器扩展" class="headerlink" title="编辑器扩展"></a>编辑器扩展</h3><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=coderfee.open-html-in-browser">Open-In-Browser</a></strong><br>由于<code>VSCode</code>没有提供直接在浏览器中打开文件的内置界面，所以此插件在快捷菜单中添加了在默认浏览器查看文件选项. 在 windows 下, 可以使用快捷键<code>Alt + b</code>快速的打开.</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-1.gif" class=""><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.minify">Minify</a></strong><br>这是一款用于压缩合并<code>JavaScript</code>和<code>CSS</code>文件的应用程序。它提供了大量自定义的设置，以及自动压缩保存并导出为<code>.min</code>文件的选项。它能够分别通过<code>uglify-js</code>、<code>clean-css</code>和 html-minifier，与<code>JavaScript</code>、<code>CSS</code>和<code>HTML</code>协同工作。是一个可以不通过脚手架编译就进行压缩的办法，在特定场景下会很方便但平时工程化项目还是不能仅依赖这种方式进行压缩。</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-5.gif" class=""><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight">TODO Highlight</a></strong><br>开发中一些没有做完的事，一般会习惯性的打上<code>TODO</code>备注，但再要找的时候就很难显目的找到了。<code>TODO Highlight</code>顾名思义就是让<code>TODO</code>高亮的插件。</p><p><img data-src="https://github.com/wayou/vscode-todo-highlight/raw/master/assets/material-night.png" alt="TODO Highlight"></p><h3 id="前端类增强"><a href="#前端类增强" class="headerlink" title="前端类增强"></a>前端类增强</h3><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag</a></strong><br>自动重命名配对的<code>HTML / XML</code>标记, 这在修改标签名上一点挺便捷的.</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-7.gif" class=""><!-- **[Auto Close Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag)**这个扩展是为 XML，PHP，Vue，JavaScript，TypeScript，JSX，TSX 等其他语言启用的。同时它是可配置的。输入标签的右括号后，结束标签将被自动插入。<img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-6.gif" class=""> --><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek">CSS Peek</a></strong><br>使用此插件，你可以追踪至样式表中<code>CSS</code>类和<code>ids</code>定义的地方。当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-2.gif" class=""><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets">JavaScript (ES6) code snippets</a></strong><br><code>es6</code>已经是经常运用在我们的项目中了, 该扩展包含用于 Vscode 编辑器的 ES6 语法的 JavaScript 代码片段.（同时支持 JavaScript 和 TypeScript）。</p><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a></strong><br><code>vue</code>开发必备, 可以格式化<code>.vue</code>文件, 由官方维护.</p><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets">Vue 2 Snippets</a></strong><br><code>vue</code>开发必备, 这个插件基于最新的<code>Vue</code>官方语法高亮文件添加了 Syntax Highlight<code>, 并且依据</code>Vue 2<code>的 API 添加了</code>Code Snippets`.</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/img-3.png" class=""><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime">WakaTime</a></strong><br>统计开发时间和效率，只需注册一个账号即可~</p><h3 id="代码规范化"><a href="#代码规范化" class="headerlink" title="代码规范化"></a>代码规范化</h3><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></strong><br>要养成一个良好的编程习惯, <code>ESLint</code>就是一个不错的选择. 它能适应项目中的规则来纠正你的不好的习惯。</p><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier</a></strong><br>Prettier 是目前 Web 开发中最受欢迎的代码格式化程序。安装了这个插件，它就能够自动应用 Prettier，并将整个 JS 和 CSS 文档快速格式化为统一的代码样式。</p><img data-src="/blog/2018/02/06/dev-zero-configuration-vscode/anima-3.gif" class=""><p><strong><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig</a></strong><br><code>Editor Config</code>可以让团队开发时统一约定好一种规范. 这个主流的编辑器都支持.</p><h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><p>如果你经常使用 Markdown 的话，还可以使用安装<code>markdownlint</code>和<code>Markdown All in One</code>这两个插件，前者可以约束编写的格式，后者提供方便的键盘快捷方式，目录，自动预览等。</p><h2 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h2><p>分享一下自己目前的配置, 可以根据项目所需或者自己的习惯进行调整.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 工作台</span></span><br><span class="line">    <span class="attr">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;One Monokai&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;workbench.settings.editor&quot;</span>: <span class="string">&quot;ui&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文本编辑器</span></span><br><span class="line">    <span class="attr">&quot;editor.suggestSelection&quot;</span>: <span class="string">&quot;first&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.renderControlCharacters&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;editor.multiCursorModifier&quot;</span>: <span class="string">&quot;ctrlCmd&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.snippetSuggestions&quot;</span>: <span class="string">&quot;top&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.renderWhitespace&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.formatOnPaste&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;editor.wordWrap&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// For ESLint</span></span><br><span class="line">        <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// For TSLint</span></span><br><span class="line">        <span class="attr">&quot;source.fixAll.tslint&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// For Stylelint</span></span><br><span class="line">        <span class="attr">&quot;source.fixAll.stylelint&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;diffEditor.ignoreTrimWhitespace&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 窗口</span></span><br><span class="line">    <span class="attr">&quot;window.zoomLevel&quot;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件资源管理</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;explorer.confirmDelete&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 终端</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorBlinking&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.rendererType&quot;</span>: <span class="string">&quot;dom&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorStyle&quot;</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件</span></span><br><span class="line">    <span class="attr">&quot;files.insertFinalNewline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;files.eol&quot;</span>: <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;*.vue&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;*.wxss&quot;</span>: <span class="string">&quot;css&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;*.cjson&quot;</span>: <span class="string">&quot;jsonc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;*.wxs&quot;</span>: <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;*.js&quot;</span>: <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;*.wxml&quot;</span>: <span class="string">&quot;html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语言相关配置</span></span><br><span class="line">    <span class="attr">&quot;html.format.extraLiners&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;javascript.referencesCodeLens.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 针对某种语言，配置替代编辑器设置。</span></span><br><span class="line">    <span class="comment">// 以下配置大多是设置默认格式化程序</span></span><br><span class="line">    <span class="attr">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.html-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[vue]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;octref.vetur&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[css]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[less]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[scss]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.typescript-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[javascriptreact]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[typescript]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[typescriptreact]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[json]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[markdown]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;yzhang.markdown-all-in-one&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============= plugin config begin =============</span></span><br><span class="line">    <span class="comment">// sublime 按 tab 自动补全 tag</span></span><br><span class="line">    <span class="attr">&quot;auto-close-tag.SublimeText3Mode&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// emmet</span></span><br><span class="line">    <span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;emmet.includeLanguages&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;vue-html&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;wxml&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;javascript&quot;</span>: <span class="string">&quot;javascriptreact&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;emmet.syntaxProfiles&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;vue-html&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码格式</span></span><br><span class="line">    <span class="attr">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;prettier.requireConfig&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sync github 同步模块</span></span><br><span class="line">    <span class="attr">&quot;sync.gist&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sync.autoDownload&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;sync.autoUpload&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;sync.forceDownload&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;sync.removeExtensions&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;sync.syncExtensions&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;sync.forceUpload&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gitlens, git 可视化功能增强</span></span><br><span class="line">    <span class="attr">&quot;gitlens.advanced.messages&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;suppressCommitHasNoPreviousCommitWarning&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;suppressCommitNotFoundWarning&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;suppressFileNotUnderSourceControlWarning&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;suppressGitVersionWarning&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;suppressLineUncommittedWarning&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;suppressNoRepositoryWarning&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;suppressResultsExplorerNotice&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;suppressShowKeyBindingsNotice&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;gitlens.views.fileHistory.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;gitlens.views.lineHistory.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// markdown</span></span><br><span class="line">    <span class="attr">&quot;markdownlint.config&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;MD033&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;allowed_elements&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;iframe&quot;</span>,</span><br><span class="line">                <span class="string">&quot;details&quot;</span>,</span><br><span class="line">                <span class="string">&quot;summary&quot;</span>,</span><br><span class="line">                <span class="string">&quot;div&quot;</span>,</span><br><span class="line">                <span class="string">&quot;hr&quot;</span>,</span><br><span class="line">                <span class="string">&quot;br&quot;</span>,</span><br><span class="line">                <span class="string">&quot;a&quot;</span>,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> vscode </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你可能不知道的 console</title>
      <link href="/blog/2018/01/30/js-console-may-not-kown/"/>
      <url>/blog/2018/01/30/js-console-may-not-kown/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/30/js-console-may-not-kown/banner.jpg" class=""><p>浏览器控制台是前端调试中使用最频繁的调试工具，没有之一。但它实际上还有很多不为人所知的功能~</p><span id="more"></span><h2 id="console"><a href="#console" class="headerlink" title="console"></a>console</h2><p><code>console</code> 是浏览器提供的接口。它是一个对象，在控制台中可以查看当前浏览器支持哪一些方法。下面介绍一些比较实用的 <code>api</code>:</p><img data-src="/blog/2018/01/30/js-console-may-not-kown/console.png" class=""><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><p><code>console.log</code> 这可能是学习前端调试技术最基础的第一步了吧，你还记得最开始是从什么地方学习到使用这个方法来调试吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj1 [, obj2, ..., objN);</span><br><span class="line"><span class="built_in">console</span>.log(msg [, subst1, ..., substN);</span><br></pre></td></tr></table></figure><p><code>console.log</code> 的功能就是向控制台输出一条信息。它可以传入多个参数，输出的行为取决于第一个参数是否是一个代替字符串。</p><p>如果是替换字符串，则后面的参数会依次替换掉字符串里的占位符; 如果不是替换字符串，则输出每一个参数的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;anran758&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规使用方式，输出原始值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// Hello</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// anran758</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>); <span class="comment">// Hello, anran758</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是替换字符串，后面是替换的规则</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hi, %s. what are you doing&#x27;</span>, name); <span class="comment">// Hi, anran758. what are you doing</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%c I am some great text&#x27;</span>, <span class="string">&#x27;font-size: 50px;&#x27;</span>); <span class="comment">// 假装 50px: Hi, anran758. what are you doing</span></span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/js-console-may-not-kown/console-2.png" class=""><p>下面是替换字符串所支持的参数, 学习过 C 语言的同学是不是有种熟悉的感觉呀~</p><table><thead><tr><th align="left">占位符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>%s</code></td><td align="left">字符串</td></tr><tr><td align="left"><code>%d</code> or <code>%i</code></td><td align="left">整数</td></tr><tr><td align="left"><code>%o</code> or <code>%O</code></td><td align="left">对象</td></tr><tr><td align="left"><code>%f</code></td><td align="left">浮点数</td></tr><tr><td align="left"><code>%c</code></td><td align="left">样式代码</td></tr></tbody></table><p>在使用时需要注意的一点是：不同占位符在传入值时会预先针对类型的不同而进行格式化，比如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们在使用了数字占位符，却传入字符串. 内部进行格式化时进行了类似 parseInt(&#x27;anran758&#x27;, 10) 的数据转换</span></span><br><span class="line"><span class="comment">// 因此替换结果为 NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: %d&#x27;</span>, <span class="string">&#x27;anran758&#x27;</span>); <span class="comment">// result: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再比如，我们传入一个浮点数，经过数据格式化为 3。这一种是符合预期，因为我们要的就是整数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;result: %d&#x27;</span>, <span class="number">3.25</span>); <span class="comment">// result: 3</span></span><br></pre></td></tr></table></figure><p>了解了这些扩展方式后，我们可以来做一些有意思的事~</p><p>比如，如果你打开控制台去访问知乎、百度等网站时，可能会发现控制台有一些开发者留下的彩蛋~ 如招聘信息或者自家公司的立体 logo：</p><img data-src="/blog/2018/01/30/js-console-may-not-kown/console-3.png" class="" title="Bilibili 主页"><img data-src="/blog/2018/01/30/js-console-may-not-kown/zhihu.png" class="" title="知乎"><p>不过值得一提的是，<code>js</code> 规范中并没有规定 <code>console</code> 该如何实现，不同的浏览器调用 <code>console</code> 后的表现也会不一致。</p><p>这导致有一个常见的问题发生: 在调用接口时，明明请求的数据还没回来，打印出来却是有值的。实际上原因可能就是你所使用的浏览器，在实现时该 API 是异步的，它提前给你显示了出来。这个问题我在 segmentfault 的问答区中看到有很多朋友问了这样的问题，特意提一提这事。</p><p>解决的方法也很简单，如果你觉得这个值不对劲的话，你可以先将对象转为 json 字符串，然后再解析为对象, 这样就能将原始值输出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onsole.log(<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj)));</span><br></pre></td></tr></table></figure><h3 id="info-warn-error"><a href="#info-warn-error" class="headerlink" title="info, warn, error"></a>info, warn, error</h3><p>如果你使用过一些脚手架来搭建项目或者是使用过 SDK 的话，那么在控制台中你能看到以下相关的使用信息。</p><p>比如在载入程序时会发出一些运行信息会通过 <code>log</code> 或者 <code>info</code> 来输出信息。</p><p>或者你使用的框架中检测到你使用了一些将来可能会被废弃的 API，这时它可能会在控制抛出一个 <code>warn</code> 来警告你。</p><p>再或者你使用人家 SDK 的姿势不对，程序内部检测到压根不是这么用的，那么 SDK 内部会抛出错误信息，我们可以通过错误信息来进行排查错误。</p><p>这三个 API 更多的是给开发人员提供额外的信息，来查看页面的运行情况，更多用于被封装过后的组件或框架中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Info</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">&#x27;Hi, This is message&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// warning 警告</span></span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">&#x27;On, Your operation may cause a security breach!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error 报错</span></span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">&#x27;Shit! Variable does not exist!&#x27;</span>)</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/js-console-may-not-kown/console-info.png" class=""><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p><code>console.table</code>只接受一个数组或者对象, 可以接受<strong>一个</strong>额外的参数来描述表格的列数。它会把数据通过表格的形式打印出来, 这样我们看数据的时候就能直观了很多:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Tome&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;baka&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(array);</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/js-console-may-not-kown/console-table.png" class=""><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><p><code>console.group</code> 和 <code>console.groupEnd</code> 是成对出现的，就像我们使用的标签一样。<code>group</code>在控制台创建一个新的分组, 输出到控制台上的内容都会被添加一个缩进, 表示该内容属于当前分组, 直到调用 <code>console.groupEnd()</code> 之后, 当前分组才结束。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boys = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Tome&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;baka&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">boys.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.group(<span class="string">`<span class="subst">$&#123;item.name&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`This is <span class="subst">$&#123;item.name&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;item.name&#125;</span> is <span class="subst">$&#123;item.age&#125;</span> years old`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;item.name&#125;</span> is <span class="subst">$&#123;item.age * <span class="number">7</span>&#125;</span> years old`</span>);</span><br><span class="line">  <span class="built_in">console</span>.groupEnd(<span class="string">`<span class="subst">$&#123;item.name&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/js-console-may-not-kown/console-group.png" class=""><h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><blockquote><p>console.dir，在控制台中显示指定 JavaScript 对象的属性，并通过类似文件树样式的交互列表</p></blockquote><p>我们知道<code>console.log</code>实际上是可以输出 <code>DOM</code> 节点的, 但很多时候我们想查看的不是 <code>DOM</code> 节点，而是该 <code>DOM</code> 节点下的属性，这里就可以使用 <code>dir</code> 来代替 <code>log</code> 来输出 <code>DOM</code> 节点对象.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;head&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(head);</span><br><span class="line"><span class="built_in">console</span>.dir(head);</span><br></pre></td></tr></table></figure><p>但值得注意的是，这个特性是非标准，尽量不要在生产模式下使用。</p><img data-src="/blog/2018/01/30/js-console-may-not-kown/console-dir.png" class=""><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>count, 如同字面意思一样. <code>count()</code>会输出每一次被调用的次数. 该方法的兼容性也需要注意, 不适用于生产模式.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.count(<span class="string">&#x27;anran758&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">&#x27;anran758&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">&#x27;zero&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">&#x27;anran758&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">&#x27;zero&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">&#x27;anran758&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">&#x27;zero&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">&#x27;anran758&#x27;</span>)</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/js-console-may-not-kown/console-count.png" class=""><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><code>clear</code>可以清楚调用这个 API 之前的所有 <code>log</code> 信息，这在一个 <code>log</code> 很多很乱的情况下进行某个功能调试会很有作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// something info</span></span><br><span class="line"><span class="built_in">console</span>.clear();</span><br></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>启动一个计时器（timer）来跟踪某一个操作的占用时长。每一个计时器必须拥有唯一的名字。页面中最多能同时运行 <code>10,000</code> 个计时器。跟 <code>group</code> 一样, <code>time</code> 也是配套的。</p><p>当以此计时器名字为参数调用 console.timeEnd() 时，浏览器将以毫秒为单位，输出对应计时器所经过的时间.</p><p>比如我们统计一下请求接口的时间:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;fetching data&#x27;</span>);</span><br><span class="line">fetch(<span class="string">&#x27;https://api.github.com/users/anran758&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> data.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">&#x27;fetching data&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>这样我们就轻易的知道了这次我们请求花费了多少时间啦~ 但值得注意的是，该方法的统计时间在微观下不够精准，更多时候我们还是需要使用更专业的测试工具后者网站来完成测试性能的工作。</p><img data-src="/blog/2018/01/30/js-console-may-not-kown/console-time.png" class=""><h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p><code>console.assert()</code>还是蛮有意思的. 它第一个参数接受一个断言(声明), 第二个参数是一个<strong>message</strong>. 如果断言为 <code>false</code>，则将一个错误消息写入控制台。如果断言是 true，就当做没发生。语法如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(assertion, message [, subst1, ..., substN]);</span><br></pre></td></tr></table></figure><p>这里的断言不一定是<code>false</code>才会触发错误. 我特意去测试了一下, 触发的规则也跟<code>if</code>的判断里的逻辑相反. 只要是断言是<code>0</code>, <code>NaN</code>, <code>undefined</code>, <code>false</code>, <code>null</code>, 空字符串<code>&#39;&#39;</code>就会激活报错.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assertion failed: Here is the &quot;name&quot; can not be empty</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.assert(str, <span class="string">&#x27;Here is the &quot;str&quot; can not be empty&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assertion failed: 0 is not allowed!</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.assert(<span class="number">0</span>, <span class="string">&#x27;0 is not allowed!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assertion failed: That is wrong!</span></span><br><span class="line"><span class="built_in">console</span>.assert(<span class="number">1</span> === <span class="number">2</span>, <span class="string">&#x27;That is wrong!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 什么都不会发生</span></span><br><span class="line"><span class="built_in">console</span>.assert(<span class="number">1</span> === <span class="number">1</span>, <span class="string">&#x27;That is wrong!&#x27;</span>);</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/js-console-may-not-kown/console-assert.png" class=""><hr><p>以上是 18.01.30 分享出来的内容，分享至今又发现了一些好用的功能，如果你跟笔者使用的都是 chrome 浏览器的话，可以继续往下看，笔者将逐一进行介绍：</p><h2 id="chrome-devtools"><a href="#chrome-devtools" class="headerlink" title="chrome devtools"></a>chrome devtools</h2><p>下面介绍 <code>chrome devtools</code> 在控制台提供的一些语法糖，这些方法只能控制台使用，而不能直接在代码里使用。区分是浏览器提供的还是我们自己代码中定义的方法可以使用<code>console.log(method)</code>，如果打印出来的是 <code>[Command Line API]</code> 就是内置方法。</p><h3 id="selector-startNode"><a href="#selector-startNode" class="headerlink" title="$(selector, [startNode])"></a>$(selector, [startNode])</h3><p>我相信做过前端的朋友都了解 <code>jqeury</code> 的 <code>$</code> 选择器，乃至于我们看到这个符号就能联想到 <code>DOM</code> 相关的东西。</p><p>IE9+ 引入了 <code>document.querySelector()</code>，可以让我们很方便找到对应的 <code>DOM</code> 元素，但该 API 拼写起来确实有点麻烦，并且该方法的使用频率还不低。因此 <code>chrome</code> 开发工具提供一个<code>$</code>的别名给我们使用。</p><p><code>$</code> 接受两个参数，第一个参数接受一个选择器，第二个参数接受一个 <code>DOM</code> 元素表示从该元素下开始搜索，不传默认为 <code>document</code>.</p><p>我们可以简单做一个 demo 实验一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个简单的嵌套结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main main.container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;start&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;end&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将上面的 demo 保存至 html 中后，在 chrome 浏览器中打开该文件。输入以下代码查看实际效果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看是否是 Command Line API，如果不是的话那就意味着你在全局中引入了第三方库，它会覆盖浏览器默认的 API</span></span><br><span class="line">$;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 document 中获取第一个 main 元素，</span></span><br><span class="line"><span class="keyword">var</span> container = $(<span class="string">&#x27;.main&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们将上面获取到的节点作为 startNode, 从该节点往下找可以找到 content</span></span><br><span class="line"><span class="keyword">var</span> content = $(<span class="string">&#x27;.main&#x27;</span>, container);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;container: &#x27;</span>, container, <span class="string">&#x27;\n\n&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;content: &#x27;</span>, content, <span class="string">&#x27;\n\n&#x27;</span>);</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/js-console-may-not-kown/demo-1.png" class=""><h3 id="selector-startNode-1"><a href="#selector-startNode-1" class="headerlink" title="$$(selector, [startNode])"></a>$$(selector, [startNode])</h3><p><code>$$</code> 相当于 <code>document.querySelectorAll</code>，但细节上看会有些不同。<code>$$</code> 调用后会返回一个数组，而后者调用后返回的是一个 <code>NodeList</code>，缺少一些数组的方法。</p><p><code>$$</code> 与 <code>$</code> 接受的参数的功能是一致的，就不过多介绍：</p><img data-src="/blog/2018/01/30/js-console-may-not-kown/demo-2.png" class=""><h3 id=""><a href="#" class="headerlink" title="$_"></a>$_</h3><p>说这个方法之前需要先科普一下返回值这个概念：<code>js</code> 每一个表达式都会有返回值，比如你定义一个函数，但是没有 <code>return</code> 任何东西，那么调用这个函数后的返回值就是 <code>undefined</code>。这个知识点可以在 <code>你不知道的 JavaScript</code> 系列中了解更详细的解析。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 返回值是 undefined</span></span><br><span class="line">fn(); <span class="comment">// 返回值是 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>; <span class="comment">// 返回值是 undefined</span></span><br><span class="line">n += <span class="number">1</span>; <span class="comment">// 返回值是 1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><p>好啦，话归正题~有时候为了方便，我们会直接在控制台进行运算，此时我们可以使用 <code>$_</code> 获取上一个表达式的值。在某些时候可以提供便利性。</p><img data-src="/blog/2018/01/30/js-console-may-not-kown/demo-3.png" class=""><p><code>clear</code>、<code>dir</code> 分别是 <code>console.clear</code>、<code>console.clear、dir</code> 的别名。</p><h3 id="copy-obj"><a href="#copy-obj" class="headerlink" title="copy(obj)"></a>copy(obj)</h3><p>该方法可以将数据 copy 至粘贴板。</p><p>当初发现这个 API 时还是挺意外的。当时需要将城市映射表数据改造为另一种结构，就直接在控制台中处理好了。接着就在想如何将数据弄出来，数据量很大，不好拷贝下来。然后突发奇想，看看控制台有没有支持复制数据的功能，随便尝试了以下，然后就成功了。</p><p>这就意味着以后我们做一些数据处理可以直接在控制台中进行处理，在某些方面上会挺方便的，比如快速生成一个长度为 20 的数组，数组内有 0 ~ 19 的数字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要检查一下有没有全局变量覆盖了默认的 API</span></span><br><span class="line"><span class="comment">// ƒ copy(value) &#123; [Command Line API] &#125;</span></span><br><span class="line">copy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">  arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时可以检查是否复制成功</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line">copy(arr);</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/js-console-may-not-kown/demo-copy.png" class=""><h3 id="inspect-object-function"><a href="#inspect-object-function" class="headerlink" title="inspect(object/function)"></a>inspect(object/function)</h3><p><code>inspect</code> 接受一个对象或者函数。</p><p>如果这个参数是一个 <code>DOM</code> 元素的话，并且它是存在 <code>DOM</code> 树中的，那么它会切换到 <code>Elements</code> 这个 tab。如果这个 <code>DOM</code> 元素没有被插入 <code>DOM</code> 树种的话，那仅仅会切换 tab。</p><p>如果传入的是一个函数，会将这个函数传入 <code>source</code> 面板，用以检查函数(比起查看 <code>DOM</code> 的功能, 传递函数后的功能除了格式代码外并没有想到好的用处)</p><img data-src="/blog/2018/01/30/js-console-may-not-kown/demo-inspect-1.png" class="" title="代码格式化前"><img data-src="/blog/2018/01/30/js-console-may-not-kown/demo-inspect-2.png" class="" title="代码格式化后"><h3 id="getEventListeners-obj"><a href="#getEventListeners-obj" class="headerlink" title="getEventListeners(obj)"></a>getEventListeners(obj)</h3><p><code>getEventListeners(obj)</code> 返回指定 <code>DOM</code> 绑定的事件监听器，有时候调试 DOM 时会挺方便的。以知乎首页为例，这样可以很清晰的看到 <code>document.body</code> 绑定的事件：</p><img data-src="/blog/2018/01/30/js-console-may-not-kown/demo-getEventListeners.png" class="" title="知乎首页"><h3 id="monitor-unmonitor-function"><a href="#monitor-unmonitor-function" class="headerlink" title="monitor/unmonitor(function)"></a>monitor/unmonitor(function)</h3><p>调用指定的函数时，会向控制台记录一条消息，指示函数名称以及调用时传递给函数的参数。使用<code>unmonitor(function)</code>停止监控。</p><p>相当于在这个函数的头部添加了一个 <code>console.info</code> 的信息，算是语法糖吧~ 主要是调试时使用。当</p><img data-src="/blog/2018/01/30/js-console-may-not-kown/demo-monitor.png" class=""><h3 id="monitorEvents-unmonitorEvents-object-events"><a href="#monitorEvents-unmonitorEvents-object-events" class="headerlink" title="monitorEvents/unmonitorEvents(object[, events])"></a>monitorEvents/unmonitorEvents(object[, events])</h3><p><code>monitorEvents</code> 监控指定 <code>DOM</code> 的事件，如果不传第二个参数，就监听所有事件的发生。</p><p>相对应的是使用<code>unmonitorEvents(object[, events])</code>停止监控事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监控/停止监控 window 中触发的所有事件</span></span><br><span class="line">monitorEvents(<span class="built_in">window</span>);</span><br><span class="line">unmonitorEvents(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or 监控/停止监控 window 中触发的 mouseover 事件</span></span><br><span class="line">monitorEvents(<span class="built_in">window</span>, <span class="string">&#x27;mouseover&#x27;</span>);</span><br><span class="line">unmonitorEvents(<span class="built_in">window</span>, <span class="string">&#x27;mouseover&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or 监控/停止监控 window 中触发的指定多个事件</span></span><br><span class="line">monitorEvents(<span class="built_in">window</span>, [<span class="string">&#x27;mouseover&#x27;</span>, <span class="string">&#x27;mouseout&#x27;</span>]);</span><br><span class="line">unmonitorEvents(<span class="built_in">window</span>, [<span class="string">&#x27;mouseover&#x27;</span>, <span class="string">&#x27;mouseout&#x27;</span>]);</span><br></pre></td></tr></table></figure><img data-src="/blog/2018/01/30/js-console-may-not-kown/demo-monitor.png" class=""><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>对于一些常用的方法， chrome tools 提供了别名以供我们快速使用：</p><table><thead><tr><th>缩短前</th><th>缩短后</th></tr></thead><tbody><tr><td>console.clear</td><td>clear</td></tr><tr><td>console.dir</td><td>dir</td></tr><tr><td>console.table</td><td>table</td></tr><tr><td>Object.keys</td><td>keys</td></tr><tr><td>Object.values</td><td>values</td></tr></tbody></table><p>参考资料:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Console">Console</a></li><li><a href="http://www.alloyteam.com/2013/11/console-log/">从 console.log 说起（上）</a></li><li><a href="https://developers.google.com/web/tools/chrome-devtools/console/utilities">Console Utilities API Reference</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> debug </tag>
            
            <tag> chrome </tag>
            
            <tag> tools </tag>
            
            <tag> console </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走进 web 移动端开发</title>
      <link href="/blog/2018/01/25/web-%E8%B5%B0%E8%BF%9Bweb%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
      <url>/blog/2018/01/25/web-%E8%B5%B0%E8%BF%9Bweb%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/25/web-%E8%B5%B0%E8%BF%9Bweb%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/banner.jpg" class=""><p>近年来, 人们逐渐倾向移动端的使用. 越来越多的人使用手机/平板来上网. 既然有需求, 那就自然会有市场~ 作为一个身在一线的前端工程师在工作中也难免会遇到这种场景/需求. 下面就分享一下对于移动端的一些学习笔记~</p><span id="more"></span><h2 id="移动端基础的知识"><a href="#移动端基础的知识" class="headerlink" title="移动端基础的知识"></a>移动端基础的知识</h2><p>移动端的屏幕相比 PC 来说多的太多了, 因此我们不能只是使用传统的 px, 首先来认识一下我们常用的单位吧.</p><ul><li><strong>px</strong>: css pixels 逻辑像素, 浏览器使用的抽象单位</li><li><strong>dp</strong>, pt: device independent pixels 设备无关像素</li><li><strong>dpr</strong> devicePixelRatio 设备像素缩放比</li></ul><p>它们之间的计算公式是: <code>1px = (dpr)² * dp</code></p><p>这里我们用 IPhone 5 为例, 我们知道, iPhone 5 的<code>dpr</code>为 2, 根据上面的公式, 我们能得出:</p><p>平面上: <code>1px = (2)² * dp</code> =&gt; <code>1px = 4dp(四个物理像素)</code></p><p>但我们在实际的开发中, 更多的是按照长度(维度)来换算:</p><p>维度上: <code>1px = dpr * dp</code> =&gt; <code>1px = 2 * dp</code></p><p>因此在移动端开发的时候. 我们拿到 UI 的设计图, 设计图(IPhone5)的尺寸是<code>640 * 1136</code>. 这是因为<code>dpr</code>的缘故. 因此我们需要在开发时, 将原先的宽度除于 2 才行.</p><p>还有我们常说的<code>Retina</code>屏又是什么? <code>Retina屏(高清屏幕)</code>就是<code>dpr &lt;= 2</code>.</p><h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>viewport, 就是视图窗口. 其中它在手机上又分为一下两个窗口.</p><ul><li>Visual viewport (可视窗口)</li><li>Layout viewport (布局窗口)</li></ul><p>最下面一层就是<code>layout viewport</code>, 上面一层就是<code>visual viewport</code>, <code>visual viewport</code>可以控制窗口的缩放(salce), 能看得到更多底层的<code>layout viewport</code>的东西.</p><img data-src="/blog/2018/01/25/web-%E8%B5%B0%E8%BF%9Bweb%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/viewport.png" class="" title="两者的关系"><p>这里值得注意的是, <code>layout viewport</code>的宽度是大于浏览器可视区域的宽度的.</p><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><p>如果我们没有限制<code>viewport</code>的缩放比的话. 我们通过获取<code>window.innerWidth(布局窗口) / document.body.clientWidth</code>的缩放比得知, 设备会根据页面的大小, 自动的去调整缩放比. 这就会不符合我们的预期.</p><p>这时我们可以通过<code>Meta</code>标签来控制<code>viewport</code>. 它的语法如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;name=value,name=value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>参数如下:</p><ul><li><code>width</code>: 设置布局 viewport 的特定值(“device-width”)</li><li><code>initial-scale</code>: 设置页面的初始缩放</li><li><code>minimum-sacle</code>: 最少缩放</li><li><code>maximum-scale</code>: 最大缩放</li><li><code>user-scalable</code>: 用户能否缩放</li></ul><p>目前主流的编辑器在使用<code>emmet</code>生成基本<code>HTML</code>模板时都会自带插入一句</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>而有时候我们不希望用户能控制页面的搜索，那我们就可以设置<code>user-scalable</code>为<code>no</code>, 百度就是如下的做法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta</span><br><span class="line">  name=&quot;viewport&quot;</span><br><span class="line">  content=&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="移动端布局"><a href="#移动端布局" class="headerlink" title="移动端布局"></a>移动端布局</h2><p>移动端的布局就能不像 PC 端一样用固定宽度了, 因为移动端有太多不同的屏幕分辨率了.. 因此现在主流的布局方式还是响应式布局和 flex 布局. 未来还有 Grid 布局, 不过现在普及度不够高暂时放放, 以后有机会单独开一篇.</p><h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p><em>响应式布局</em>实际上是一个设计理念, 它是多项技术的综合体. 其核心就是<em>媒体查询(@media)</em>.</p><p>响应式网站的优点主要有:</p><ul><li>减少工作量: 代码, 设计, 内容只需要一份. 多出的工作也仅仅是 js 和 css 样式的调整.</li><li>相对来说会节省时间</li><li>每个设备都能得到正确的设计</li></ul><p>相反, 它也带有一些副作用(缺点):</p><ul><li>由于我们是响应式布局, 需要加载更多的样式和脚本资源</li><li>设计比较难精准定位和控制</li><li><em>media</em>实际上是 css3 的玩意, 对老版本浏览器兼容不好(特指 IE)</li></ul><p>接着我们继续看看响应式设计着重的几个点吧:</p><ol><li><p>关于响应式设计中<em>针对不同分辨率</em>的媒体查询设计, 可以看我 Repo 中的<a href="https://github.com/anran758/Front-End-Lab/tree/master/Page%20design">这一块</a>.</p></li><li><p><em>百分比布局</em><br>仅仅使用媒体查询来适应不同的固定宽度设计, 只会从一组 css 到另一组 css 的切换. 两组之间没有任何平滑渐变. 当没有命中媒体查询时, 表现就会不可控.</p><p>就比如说 iPhone 又出了个 iPad mini, 这个设备的宽度介于 iphone 和 ipad 之间. 这样就有可能会导致布局的错乱, 我们应该要尽量避免这种情况发生.</p></li><li><p>弹性图片  </p><p>很简单也很常见的思路. 图片设置宽度 100%, 外层一个 div 包裹着, div 设置宽度, 可以随着媒体查询改变宽度 从而实现自适应</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当页面达到手机屏幕宽度的时候, 我们可以考虑放弃一些传统页面的设计思想. 力求页面简单, 简洁(手机屏幕小). 因此需要作出以下处理:</p><ul><li>同比例缩减元素尺寸</li><li>调整页面结构布局</li><li>隐藏冗余的元素<br>除此之外, 应该将经常需要切换位置元素使用「绝对定位」, 减少重绘提高渲染性能.</li></ul></li></ol><p>一般我们根据屏幕的尺寸进行响应式设计:</p><ul><li>0~480: 小屏幕</li><li>481~800: 中屏幕</li><li>801~1400: 大屏幕</li><li>1400+: 巨屏幕</li></ul><h3 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h3><p><code>Flexbox</code>的出现是为了解决复杂的 web 布局，因为这种布局方式很灵活。容器的子元素可以任意方向进行排列. 有效的针对不同屏幕宽度大小的情况下，让元素自动有效合理处理布局结构。</p><p><code>Flex</code>在移动布局上已经运用的很广泛了. 比如我们常见的垂直居中, 原先需要好几行代码的效果, 现在就一行<code>align-items: center</code>就能解决了, 十分便利.</p><p><code>Flex</code>网上已经有太多的详细教程了. 考虑到篇幅限制, 这边也就不再过多的赘述了. 不过值得一提的是, <code>Flexbox</code>是有新旧两个版本的, 新的是<code>display: flex</code>, 旧的(2009 年的语法)是<code>display: box</code>; 两者作用都差不多, 只是使用的属性名有些差异, 如果要兼容低版本的浏览器的话可以考虑后者.</p><p><strong>扩展阅读:</strong><br>[张鑫旭]CSS box-flex 属性，然后弹性盒子模型简介: <a href="http://www.zhangxinxu.com/wordpress/?p=1338">http://www.zhangxinxu.com/wordpress/?p=1338</a><br>Flex 入门: <a href="http://ife.baidu.com/note/detail/id/952">http://ife.baidu.com/note/detail/id/952</a><br>Flexbox 详解: <a href="https://segmentfault.com/a/1190000002910324">https://segmentfault.com/a/1190000002910324</a></p><h2 id="移动端一些常见的坑"><a href="#移动端一些常见的坑" class="headerlink" title="移动端一些常见的坑"></a>移动端一些常见的坑</h2><h3 id="1px-border"><a href="#1px-border" class="headerlink" title="1px border"></a>1px border</h3><p>这个问题常出现在 ios 下, 其根本原因还是<code>retina屏</code>的问题. <code>1px</code>使用了<code>2dp</code>渲染, 因此看上去就会粗一点.</p><p>常见的解决方案有以下几个:</p><p><strong>背景渐变</strong>  </p><p>CSS3 有了渐变背景，可以通过渐变背景实现 1px 的 border，实现原理是设置 1px 的渐变背景，50% 有颜色，50% 是透明的。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> commonStyle() &#123;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>, <span class="number">1px</span> <span class="number">100%</span>, <span class="number">100%</span> <span class="number">1px</span>, <span class="number">1px</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: top, right top, bottom, left top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> border(<span class="variable">$border-color</span>) &#123;</span><br><span class="line">  <span class="keyword">@include</span> commonStyle();</span><br><span class="line">  <span class="attribute">background-image</span>: linear-gradient(</span><br><span class="line">      <span class="number">180deg</span>,</span><br><span class="line">      <span class="variable">$border-color</span>,</span><br><span class="line">      <span class="variable">$border-color</span> <span class="number">50%</span>,</span><br><span class="line">      transparent <span class="number">50%</span></span><br><span class="line">    ), linear-gradient(</span><br><span class="line">      <span class="number">270deg</span>,</span><br><span class="line">      <span class="variable">$border-color</span>,</span><br><span class="line">      <span class="variable">$border-color</span> <span class="number">50%</span>,</span><br><span class="line">      transparent <span class="number">50%</span></span><br><span class="line">    ), linear-gradient(<span class="number">0deg</span>, <span class="variable">$border-color</span>, <span class="variable">$border-color</span> <span class="number">50%</span>, transparent <span class="number">50%</span>),</span><br><span class="line">    linear-gradient(<span class="number">90deg</span>, <span class="variable">$border-color</span>, <span class="variable">$border-color</span> <span class="number">50%</span>, transparent <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点就是没办法实现圆角.</p><p><strong>使用 scale 缩放 0.5 倍:</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> <span class="selector-class">.folder</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#7c7c7c</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.folder</span> + <span class="selector-tag">li</span>:before &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行文本溢出"><a href="#多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h3><p>webkit 内核的浏览器可以尝试使用<code>-webkit-line-clamp</code>, 可惜兼容性不高.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.intwoline</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="终端交互优化"><a href="#终端交互优化" class="headerlink" title="终端交互优化"></a>终端交互优化</h2><p>最近几年，爆炸式的移动 Web 浏览器的使用打破了这个途径。低带宽，高延迟，小内存，低处理器性能的移动设备环境，迫使开发者不得不想办法通过优化前端页面的性能来满足用户的性能预期。</p><h3 id="300-毫秒的故事"><a href="#300-毫秒的故事" class="headerlink" title="300 毫秒的故事"></a>300 毫秒的故事</h3><blockquote><p>移动 web 页面上的 click 事件响应都要慢上 300ms</p></blockquote><p>移动设备访问的 web 页面都是 pc 上的页面. 在默认的 <code>viewport(980px)</code> 的页面往往都是需要”双击”或”捏开”放大页面, 来看清页面. 正是为了确定用户是”双击”还是”单击”. sofari 需要个 300ms 的延迟来判断. 而后来的 Iphone 也一直沿用这样的设计, 没借鉴成功 iPhone 的 android 也沿用了这样的设计. 于是”300ms 的延迟”就成为了一道规范.</p><p>因此针对这个延迟, 出现了使用 tap 基础事件去代替 click 事件. 已经有成熟的类库去帮我们实现了, 这也不展开讲.</p><h3 id="移动端的事件"><a href="#移动端的事件" class="headerlink" title="移动端的事件"></a>移动端的事件</h3><p>现在智能手机的普及, 触摸成为了移动设备的交互的核心事件, 主要有这几种常用的事件<br>• Touchstart: 手指触摸屏幕触发(只有第一下才会触发)<br>• Touchmove: 手指在屏幕滑动, 连续触发<br>• Touchend: 手指离开屏幕时触发<br>• Touchcanel: 系统取消 touch 时候触发(不常用)</p><p>除了常见的事件属性外, 触摸事件也有自己专有的触摸属性:</p><ul><li>touches: 跟踪触摸操作的 touch 对象数组</li><li>targetTouches: 特定时间目标的 touch 对象数组</li><li>changeTouches: 上次触摸改变的 touch 对象数组</li></ul><p>其中<code>touches</code>是最为常用的. 它是一个数组, 包含着几个 touch 对象, 每个 touch 对象包含如下属性:<br>• clientX: 触摸目标在视口中的 x 坐标<br>• clientY: 触摸目标在视口中的 y 坐标<br>• Identifier: 标识触摸的唯一 ID<br>• pageX: 触摸目标在页面中的 x 坐标.<br>• pageY: 触摸目标在页面中的 y 坐标.<br>• screenX: 触摸目标在屏幕中的 x 坐标<br>• screenY: 触摸目标在屏幕中的 y 坐标<br>• target: 触摸的 DOM 节点目标</p><p>不过值得注意的是 Android 下可能会有 touchend 不触发的 bug, 已知 Android 4.0, 4.1, 4.4 ~ 5.0 都有这个 bug.</p><h3 id="弹性滚动"><a href="#弹性滚动" class="headerlink" title="弹性滚动"></a>弹性滚动</h3><p>当客户端的页面滚动到底部或顶部的时候, 滚动条会允许我们再向上(下)拖, 松开就会有缓冲反弹的效果, 能有一个良好的用户体验.</p><p>移动 web 页面也有这样的能力. 但是滚动有几种情况需要考虑(副作用):</p><ul><li>body 层滚动: (系统特殊化处理)<br>自带弹性滚动, overflow:hidden 失效, GIF 和定时器暂停</li><li>局部滚动: 没有弹性滚动, 没有滚动惯性, 不流畅</li></ul><p>而局部滚动开启弹性滚动的方式也很简单, 只需要在 body 上添加如下的代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* android 不支持, 但是有类库支持*/</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上拉刷新-下拉加载"><a href="#上拉刷新-下拉加载" class="headerlink" title="上拉刷新, 下拉加载"></a>上拉刷新, 下拉加载</h3><p>在移动端, 我们常常能看到这种 —— 顶部会允许下拉一小点距离, 松开时页会有弹性的滚动向下, 并且加载数据. 这是一种良好的交互. 多数类库或者插件都能实现这种效果. 可惜本人移动端的经验不足, 没有自己去实现过一次. (再占一个坑吧~</p><img data-src="/blog/2018/01/25/web-%E8%B5%B0%E8%BF%9Bweb%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/img-1.jpg" class="" title="上拉刷新, 下拉加载"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>移动端与 PC 端的开发主要还是着重点不同吧. 比如在移动开发时, 我们必须要考虑用户的流量, 并不是所有人都在用着好的 WIFi 来上网.<br>其中如何在这个小屏幕下给用户带来良好的体验也是另外一门学问. 本文只是总结一些常见的东西, 比如移动端适配也还没有讲. 如果以后自己的工作重心倾向移动端的话, 就会继续再更新相关的内容吧~</p><p><strong>参考资料:</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/26141351">移动端 Web 开发踩坑之旅 | 饿了么</a></li><li><a href="https://www.imooc.com/learn/494">Hello, 移动 WEB</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> css </tag>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么我们要选用 Vue/React/Angular 进行开发</title>
      <link href="/blog/2018/01/23/JavaScript-%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%BE%E5%BC%83JQuery%E8%80%8C%E9%80%89%E7%94%A8Vue-React-Angular%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/"/>
      <url>/blog/2018/01/23/JavaScript-%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%BE%E5%BC%83JQuery%E8%80%8C%E9%80%89%E7%94%A8Vue-React-Angular%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/23/JavaScript-%E4%BD%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%BE%E5%BC%83JQuery%E8%80%8C%E9%80%89%E7%94%A8Vue-React-Angular%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/banner.png" class=""><p>本篇文章是笔者早期写的，现在回顾来看其实是有一些片面的。<code>jquery</code>的语法封装确实不错</p><span id="more"></span><p>JQuery, 曾经从事网页工作者的标配, 以前还没有前端的概念, 但不懂JQuery几乎是会被嘲讽的. 而当下的使用量却逐年降低, 更多的用户转向新兴的 React/Angular/Vue . 今天我们来聊聊, 相比JQuery成熟庞大生态圈, 为什么我们现在开始逐步的放弃 JQuery.</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>截止至笔者写这篇文章为止(2018.1), 前端开发的大趋势主要是以下几点:</p><ul><li>旧浏览器逐渐被淘汰(比如IE8及以下, 主流框架已经放弃了支持)</li><li>移动端需求的增加</li><li>用户体验要求变得更高</li><li>前端架构从传统的后台 MVC 向 RESTFul API + 前端 MV* 迁移</li></ul><p>众所周知. JQuery只是一个DOM和ajax的封装库. 现在前端项目的日益发展导致JQuery已经不足以承载太多的复杂项目了. JQuery能兼容各种低版本的浏览器这一大优势也在旧浏览器淘汰的路上逐步减弱. 越来越多的开发者开始拥抱新型框架, 它们使前端不太需要关心DOM了, 只需要关心状态.</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>因为我目前主要使用的是Vue的技术栈, 就来说说为什么要选择 Vue 吧.<br>首先, Vue.js是一个库, 并不是一个真正框架(或者说是一个UI层面的框架). 它相比其他两个主流框架 (React/Angular) 来说 Vue 的学习成本相对来说会比较低. 其次 vue 的作者是国人<a href="https://weibo.com/arttechdesign?topnav=1&wvr=6&topsug=1" rel="nofollow">尤雨溪</a>, 因此它对中文的支持会更友好一点(说句题外话, 偶尔能看到有老外吐槽. Vue.js的源码偶尔能看到中文的注释2333).</p><p>Vue是渐进式框架, 它主要关注的是视图管理. 其核心思想主要是数据驱动和组件化. vue的优势主要有以下几点:</p><ol><li><p>侵入性低<br>不对整体构架做过多约束, 方便与其他库或是已有的前端技术栈整合. 比如说当前的项目就是在使用JQuery, 我们也可以将项目移入vue里, 然后逐步的进行改良.</p></li><li><p>vue鼓励模块化<br>因为组件系统是 Vue 的另一个重要概念, 因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用. 这将有利于将界面代码自然分割成更容易维护的模块. 简而言之就是模块化开发, 减少代码的重复性和提高复用性.<br>vue.js比较推荐的是基于commonJs的一个模块方案. 通过webpack这样的模块构建工具, 将一个组件的模块, css和js都写在同一个文件里. Vue本身也有自己脚手架叫做<code>vue-cli</code>, 通过脚手架来帮助我们自动构建项目, 再使用npm进行包管理也是使项目模块化的一种.</p></li><li><p>Vue的语法糖和各种修饰符使得编写JS变得更加的容易. 同时使用一些依赖库, 比如<code>babel</code>使我们能大胆的使用ES6的语法糖. 原先需要封装一个函数的命令, 现在只用一句代码就能解决了. 大大的提高效率.</p></li><li><p>Vue也有自己的生态系统和一个活跃的社区.</p></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>JQuery作为曾经的霸主, 现在市场使用的份额仍然不小. 原因主要是一些老旧的项目仍然在使用着. 其次, 有些时候我们也会遇到需要频繁操作DOM的场景, 再加上JQuery庞大的生态圈. 有很多完善的插件仍然可以使用. 因此, JQuery虽然过时了, 但在未来几年中, 也必然还会有它的份额存在.</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> vue </tag>
            
            <tag> 框架 </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化 - 回流与重绘的调试与优化</title>
      <link href="/blog/2018/01/15/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E6%B1%87/"/>
      <url>/blog/2018/01/15/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E6%B1%87/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/15/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E6%B1%87/banner.png" class=""><p>回流与重绘已经是个老生常谈的问题啦, 但谈起性能优化上它又占有一席之地。今天来谈一谈什么是回流与重绘, 我们该如何去测试并针对性的去优化。</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在<code>HTML</code>中, 每一个标签都有自己的盒子模型. 浏览器在解析<code>HTML</code>的过程中会通过一个叫<code>frame</code>的对象对盒子进行操作. 它主要有三个动作:</p><ol><li>构建 <code>frame</code>, 以建立<code>DOM树</code>.</li><li>回流(<code>reflow</code>), 布局引擎为<code>frame</code>计算图形, 以确定对象位置, 浏览器根据各种样式来计算结果放在它该出现的位置.</li><li>重绘(<code>repaint</code>), 当计算好盒子模型的位置, 大小以及其他属性后, 浏览器就根据各自的特性进行绘制一遍, 显现出来给用户看.</li></ol><img data-src="/blog/2018/01/15/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E6%B1%87/Mozilla.gif" class="" title="Mozilla 页面绘制"><h2 id="代价"><a href="#代价" class="headerlink" title="代价"></a>代价</h2><p>**回流(reflow)**就是布局引擎为<code>frame</code> 计算图形的过程。但是这里需要我们注意的是, 回流并不仅仅只是在渲染页面的时候会触发, 实际上当我们动态修改某个 <code>css</code> 属性或者操作 <code>DOM</code> 时, 都有可能会触发回流和重绘。</p><p>也就是说, 我们操作 <code>DOM</code> 实际上是有代价的。因为 <code>DOM</code> 的改变会导致浏览器重新计算的它的位置和渲染的样式。</p><p>假设有这么一个场景：用户打开了一个很长的页面，就比如 <a href="http://www.ecma-international.org/ecma-262/6.0/">ecma-262 规格文档</a>，同时右键点击了翻译，这时下拉滚动条页面, 在一些配置比较差的电脑可能会导致网页卡死。</p><p>我们知道浏览器的翻译功能是将当前页面的文字翻译至另一种语言，这其中需要替换 <code>DOM</code> 元素，同时用户打开的这个文档内容没有按章分隔，因此用户每滚动一次就需要重新替换内容、计算元素位置，频繁地触发回流的后果将导致网页占有性能徒然增大，配置较差的电脑顶不住这么大的压力，从而会引发页面卡死。这就是回流的代价。</p><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><p>回流是必不可免的，甚至很多时候我们不需要过分的关注回流的发生。但过于频繁的触发的话还是可能成为渲染性能瓶颈，因此我们需要知道回流是如何触发的。</p><p>YaHoo!性能小组总结了一些导致回流发生的一些因素:</p><ol><li>调整窗口大小</li><li>改变字体</li><li>增加或者移除样式表</li><li>内容变化，比如用户在 input 框中输入文字, CSS3 动画等</li><li>激活 <code>CSS</code> 伪类，比如 <code>:hover</code></li><li>操作<code>class</code>属性</li><li>脚本操作<code>DOM</code></li><li>计算<code>offsetWidth</code>和<code>offsetHeight</code>属性</li><li>设置 style 属性的值</li></ol><p>而重绘则是视觉效果变化引起的重新绘制。比如 <code>color</code> 或者 <code>background</code> 发生了变化，那就该给触发重绘的元素化化妆，化成它想要的样子。</p><p>回流与重绘两者之间的联系在于: <strong>触发回流一定会触发重绘, 而触发重绘却不一定会触发回流</strong>。</p><p>我们可以把页面理解为一个黑板，黑板上有一朵画好的小花。现在我们要把这朵从左边(left)移到了右边(right)，那我们是不是要先确定好右边的具体位置，画好形状（回流），再画上它原有的颜色（重绘）。</p><p>但如果我们仅仅是想换给花朵换一个颜色，那么只需擦掉花朵上的颜色，再重新涂上自己期望的颜色(重绘)就可以了。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>我们光是用联想当然是不行的呀，我们需要一个工具来辅助查看页面渲染的情况。<code>chrome devtools</code> 就可以做到这件事。接下来我们先找个页面测试一下, 看看该如何去调试回流与重绘。</p><p>首先打开天猫官网, 然后 <code>chrome devtools</code> 上打开 <code>Rendering</code> 面板，打开方式有两种：</p><ol><li>点击 <code>More tools</code> 下的 <code>Rendering</code> 面板</li><li>按 <code>Command+ Shift+ P（Mac</code> 或 <code>Control+ Shift+ P（Windows，Linux，Chrome OS）</code> 打开命令菜单，输入<code>rendering</code> 并回车。</li></ol><p>接着我们可以在面板上看到有以下几个选项:</p><ol><li><code>Paint flashing</code>: 高亮(绿色)显示重绘的页面区域</li><li><code>Layer boders</code>: 显示图层边框（橙色/实时）和图块（青色。我们知道页面是由多个”图层”组合的, 最终显示给用户看的就是多图层叠加在一起的效果,<code>css</code> 的 <code>z-index</code>机制就可以很好的体现着一点。</li><li><code>FPS meter</code>: 显示绘制每秒帧数，帧速率分布和GPU内存。或许玩游戏的朋友对这些参数会比较熟悉，该选项更多的是用来分析页面交互和动画性能.</li><li><code>Scrolling performance issues</code>: 突出显示可以减慢滚动的元素（蓝绿色），包括touch＆whell事件处理程序和其他主线程滚动情况。主要用来分析滚动性能问题。</li></ol><img data-src="/blog/2018/01/15/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E6%B1%87/img-1.png" class="" title="Paint flashing"><p>勾上 <code>Paint flashing</code>、<code>Layer boders</code>、<code>Scrolling performance issues</code> 等选项后刷新天猫首页，开始分析页面的渲染情况。</p><p>首先能看到天猫的 Logo 是一个 GIF 的动态图，浏览器需要绘制 gif 的每一帧展示给用户看，因此 logo 区域上不断闪烁的绿色高亮表示浏览器正在勤恳的绘制的图形。轮播图组件也同理, 内容的不断变化触发着回流与重绘。</p><p>紧接着我们往下滚, 发现左下角的工具栏会随着滚动而发生回流。很显然, 这是使用了 <code>fixed</code> 定位。<code>fixed</code> 是相对浏览器窗口进行定位的，我们每滚动一点，元素会随着滚动的变化而重新计算位置，进而导致触发回流。值得一提的是，<code>fixed</code> 定位只会对自身元素进行渲染, 而不会影响身边的DOM。</p><p>接着我们继续往下分析。然后发现商品模块似乎不符合预期呀? 怎么停止滚动了，还是会不断的触发重绘? 打开审查元素一看，发现模块中有一个 gif 的背景图片。将属性关闭，发现几个模块的重绘都消失了，果然是这东西作祟呀。</p><p>紧接着来检查一下这 gif 是有什么特殊的作用，打开 <code>background</code> 属性的 url 发现是一个加载的 loading。父元素加一个 loading 动图, 在子元素还没加载出来时显示 loading，当加载完毕后由于层级的关系自然就覆盖了上去, 用户自然就看不到了。</p><p>但这样的效果需要额外的重绘代价，当该商品模块多到一定地步后，叠加起来的渲染可能还是会造成一定的浪费。但如果你说这是 bug 吗，其实也不算是。只能说是一种比较偷懒的方案，笔者并不推荐使用这样的方案。</p><img data-src="/blog/2018/01/15/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E6%B1%87/repaint.gif" class="" title="天猫"><h2 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h2><p>好啦，到这里为止我们知道了回流重绘的触发与调试，那么就可以在编写代码时合理的去避开回流的影响来减少页面的开销。</p><p>就比如 <code>display:none</code> 这个属性，该属性的作用就如同它名字一样直观，就是用来控制显示的状态嘛… 因此很多人喜欢拿它来做隐藏某个元素。而却忽略了(或者说不知道)它本身所带的回流性能开销(因为会影响节点的位置从而触发回流和重绘).</p><p>有一些前辈帮我们总结了避免回流的经验以供我们借鉴：</p><ol><li>如果想设定元素的样式，通过改变元素的 <code>class</code> 类名 (尽可能在 DOM 树的最里层)</li><li>避免设置多项内联样式</li><li>应用元素的动画，使用 <code>position</code> 属性的 <code>fixed</code> 值或 <code>absolute</code> 值(如前文示例所提)</li><li>权衡平滑和速度</li><li>避免使用 <code>table</code> 布局</li><li>避免使用 CSS 的 <code>JavaScript</code> 表达式 (仅 IE 浏览器)</li></ol><p>在 <a href="https://csstriggers.com/">csstriggers</a> 可以查看 css 属性在不同引擎下的渲染影响。</p><p>除此之外, 使用 <code>JavaScript</code> 动态插入多个节点时, 可以使用<code>DocumentFragment</code>. 创建后一次插入. 就能避免多次的渲染性能.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后总结一下所学的概念:</p><ol><li>回流(reflow), 就是布局引擎为 <code>frame</code> 计算图形, 确定节点位置的一个动作。其中触发回流的原因主要是 DOM 节点大小或位置的改变才会触发回流。</li><li>重绘则是表面的视觉效果的改变从而引发重绘。</li><li>其中触发回流就必定会触发重绘, 而触发重绘不一定会触发回流。</li><li>可以在编写代码时根据触发回流重绘的特点有意的控制代码的编写。</li><li>可以通过 chrome devtools 的 rendering 面板进行渲染性能分析</li></ol><div class="note primary"><p><strong>参考资料:</strong></p><ul><li><a href="http://www.aoao.org.cn/blog/2008/05/reflow/">形象化的reflow</a></li><li><a href="http://www.planabc.net/2009/04/13/reflow/">影响 reflow 的因素及其优化</a></li><li><a href="https://www.youtube.com/watch?v=ZTnIxIA5KGw">Gecko Reflow Visualization - mozilla.org</a></li><li><a href="http://www.zhangxinxu.com/wordpress/2010/01/%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%EF%BC%9Acss%E6%80%A7%E8%83%BD%E8%AE%A9javascript%E5%8F%98%E6%85%A2%EF%BC%9F/">回流与重绘: CSS性能让JavaScript变慢?</a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> HTML </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化 - 基础的性能优化</title>
      <link href="/blog/2018/01/13/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/blog/2018/01/13/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/13/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/banner.png" class=""><p>其实很多性能方面的问题, 很多都是从基础就开始影响. 既然如此我们也从最底层逐步分析, 切入每一点小细节~</p><span id="more"></span><h2 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h2><p>web早期, 人们有很多想要实现的设计效果出于css或兼容性的限制, 不得不由图片来去实现这种效果. 以现在时代的眼光来说, 无疑是很不优雅的. 撇开图片本身所占用的空间大小外, 本身代码结构就不够语义化. 那么现在这个CSS3都已经普及的年代, 来试着让<code>HTML</code>, <code>CSS</code>属性或<code>SVG</code>用寥寥数行的代码来代替图片来实现效果吧~ 比如一个圆角, 一个渐变的海浪线等.</p><h3 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h3><p>每一种图片格式都有着自己的特点和优势, 下面来了解一下现在常见的图片格式来”对症下药”.</p><p>主流的图片格式</p><ul><li><code>jpg</code> 全名是JPEG. JPEG图片以24位颜色存储单个位图.</li><li><code>png</code> 可移植网络图形格式. 使用<code>png</code>格式的图片更多的是看中它有透明图层, 因为它是256色, 每一色都可以作为透明像素. 但相对的代价就是体积较大(这个可想而知嘛, 图片里面的信息装的多了, 体积自然就大了).</li><li><code>GIF</code> 这个稍微有点网络常识的对会知道, 常用于做动画.</li><li><code>SVG</code> 可缩放矢量图形. 它能很好的处理图形大小的改变, 放大缩小都不会失真, 适合静态图片展示，高保真文档查看和打印的应用场景. 如今主流浏览器都对它有着很好兼容性支持.</li></ul><p>没有被Web标准采纳的格式, 但还是值得关注图片格式<br><strong>APNG</strong> APNG 是出自 Mozilla 公司下的两位程序员之手, APNG 的出现是为了代替 GIF. 它相较GIF来说有着更好的图片质量, 还支持着透明图层, 同时图片的大小都比 GIF 格式要小.  </p><p>可惜由于出现的较晚, 没有被Web标准给采纳. 截止到笔者写这篇文章的时间(2018.1), Edge这个不合群的家伙在最新版本 Edge 17 仍然还没有支持这个格式, 而chrome 59才开始支持. 因此兼容性不高, 平时也很少能看到这种格式的出现.  </p><p><strong>Webp</strong>是出自Google之手, WebP 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。</p><p>同上面的 APNG 一样, 同样没有被Web标准所采纳. 不过在 caniuse 上能发现, 如今国内大半的用户已经支持了 WebP , 这个未来还是可以小小的期待一下.</p><h3 id="正确的使用图片格式"><a href="#正确的使用图片格式" class="headerlink" title="正确的使用图片格式"></a>正确的使用图片格式</h3><p>话归正题, 下面针对不同的使用场景, 来选择正确的图片格式.</p><ul><li>首先是jpg, 一般不需要透明图层的图片一律使用jpg, 它相对png来说两者的体积之差能有几倍之差.</li><li>如果需要比较通用的动画的话, GIF是唯一的选择. 如果是相对简单的GIF动画的话, 也可以考虑使用CSS3来实现.</li><li>如果需要清晰显示颜色丰富的图片或者需要用到透明图层的话, png是一个比较好的选择</li></ul><h3 id="页面中图片加载方式"><a href="#页面中图片加载方式" class="headerlink" title="页面中图片加载方式"></a>页面中图片加载方式</h3><p>细心的你或许会发现, 有时在网络慢的情况下, 能看到图片一点一点从上到下的加载. 或者是先模糊, 再清晰的加载方式.<br>实际上这是图片的压缩算法呈现的效果, 逐行显示是<em>离散余弦变化</em>. 而模糊到清晰的是<em>小波算法</em>. 浏览器先读取图片的压缩算法, 再根据算法来选择不同的渲染算法. 下面是某图站的一张大的壁纸加载过程(没有找到小波算法的图, 以后留意到了再回来补)</p><img data-src="/blog/2018/01/13/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/anima-1.gif" class="" title="离散余弦变化"><p><strong>参考资料</strong><br><a href="https://aotu.io/notes/2016/11/07/apng/index.html" rel="nofollow">APNG 那些事</a></p><h3 id="常见的图片优化方案"><a href="#常见的图片优化方案" class="headerlink" title="常见的图片优化方案"></a>常见的图片优化方案</h3><p><strong>CSS-Sprite</strong></p><p>在页面中, 我们经常能看到一些icon图标. 这些icon实际上占用并不大, 但奈不住多呀. 100个icon的话就要发送一百个HTTP请求. CSS Sprite(精灵). 利用CSS的<code>background-position</code>和<code>background-image</code>属性, 只需要引用一张图片即可. 这极大的节省了HTTP请求量.</p><p><strong>iconfont</strong><br><code>iconfont</code> 和上面所提的<code>css-sprite</code>方法类似, 不同的是这个方法是通过引入字体图标的形式. 好处是设置字体图标的颜色或者可以通过设置<code>font-size</code>来改变尺寸, 并且不容易失真.</p><p>当然, 现在都是使用自动化工具, 都不需要自己手动去调整</p><p><strong><code>&lt;picture&gt;</code>标签</strong><br>HTML5新出了一个<code>&lt;picture&gt;</code>标签, 它是一个容器, 用来为其内部特定的<code>&lt;img&gt;</code>提供多样的<code>&lt;source&gt;</code>元素. 浏览器会根据当前页面（即图片所在的盒子的容器）的布局以及当前浏览的设备（比如普通的屏幕和高清屏幕）去从中选择最合适的资源. 也就是所谓的响应式图片. 由于兼容性所限, 因此当下并没有广泛使用.</p><p><code>media</code>属性允许你提供一个用于给用户代理作为选择<code>&lt;source&gt;</code>元素的依据的媒体查询。如果这个媒体查询匹配结果为<code>false</code>，那么这个<code>&lt;source&gt;</code>元素会被跳过, 使用如下.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;mdn-logo-smaller.png&quot;</span> <span class="attr">media</span>=<span class="string">&quot;(max-width: 768px)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;mdn-logo-big.png&quot;</span> <span class="attr">media</span>=<span class="string">&quot;(min-width: 1000px)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;mdn-logo-narrow.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;MDN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>构建自动化工具实现优化</strong><br>这个一句话说不完, 以后单独拎出来说这东西吧.</p><h2 id="视频优化"><a href="#视频优化" class="headerlink" title="视频优化"></a>视频优化</h2><p>当下视频播放器分为两大流派, 一个是HTML5新进入的<code>video</code>标签, 使用方式简洁. 也是现在主流播放方案. 另一个是<code>Flash</code>播放器, 也是过去常用的播放方案. 虽然技术成熟, 插件多, 但也是逐步的将被淘汰. chrome浏览器默认禁止Flash播放器的使用, 就连Edge都要手动开启才能使用.</p><blockquote><p>来对比一下两者的优缺点</p></blockquote><table><thead><tr><th align="left"></th><th align="left">优点</th><th align="left">缺点</th></tr></thead><tbody><tr><td align="left">video</td><td align="left">不需要下载额外的资源(如插件什么的)</td><td align="left">不同浏览器<code>video</code>标签的外观都不一样. 如果要统一的话需要自己写UI来实现</td></tr><tr><td align="left">Flash</td><td align="left">兼容性好, 只需要有 Flash player 播放器插件都可以进行播放</td><td align="left">1. 需要下载额外的 swf 播放文件才可以播放, 浏览器必须要有Flash player插件(回想以前网页老是让你下载Flash的场景)<br>2. Flash player 版本的碎片化<br>3. UI定制需要 as(带有学习成本)</td></tr></tbody></table><p><strong>当下主流的方案</strong><br>Flash 和 HTML5 两个方案相结合, 组成一个完整的方案. 当下就有几个成熟稳定的库, 如<code>Flowplayer</code>和<code>VideoJs</code>等.</p><p><strong>视频优化需要的解决问题</strong></p><ol><li>由于各浏览器UI不同, 设计师会要求我们按照设计图做播放器.</li><li>在一些视频网站中, 可能产品经理就会让我们实现, 让用户一进来就最先看到视频.<br>浏览器会将所有的多媒体文件放在最后面加载, 无论标签位置放置在什么位置. 解决的方案就是将<code>&lt;link&gt;</code>代替<code>&lt;script&gt;</code>标签引用.</li></ol><h2 id="常用的前端缓存技术"><a href="#常用的前端缓存技术" class="headerlink" title="常用的前端缓存技术"></a>常用的前端缓存技术</h2><p><code>SessionStorage</code> 临时性存储, 数据仅仅在当前的页面生效, 关闭页面后数据就自动清除了. 同时刷新页面不属于”离开页面”的范围, 数据仍然会存在. 现在微信公众号开发常用这种方法来记录用户信息.</p><p><code>Cookie</code>, 兼容性最好的本地存储. 缺点是有大小的限制, 而且每次发送请求时, 请求头会带着Cookie一起发送过去.(这里有个问题, 如果在cookie中存储了1M的数据, 那么在请求的时候, 1M的数据也会跟着请求发送到服务端. 这就很大的影响带宽了) 现在基本大多数登录的合法性验证都是用cookie验证的.</p><p>LocalStorage 特点是持久储存, 操作方法和 SessionStorage 乐视, 也都是操作key-value的形式. 几乎所有现代浏览器都已经支持了. 值得注意的是, LocalStorage 虽然可以永久储存, 但是无法跨浏览器的获取数据的, 还需要注意储存上限.</p><h2 id="高性能DOM"><a href="#高性能DOM" class="headerlink" title="高性能DOM"></a>高性能DOM</h2><p>说到高性能的<code>DOM</code>, 就不得不提回流与重绘这个概念. 为此我又专门的写了一篇<a href="https://anran758.github.io/blog/2018/01/15/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E6%B1%87/">回流与重绘</a>. 有兴趣的同学可以去看一下.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上文都只是在基础上的优化. 还有更多项目内工程化的优化就再等咱有时间再更新相关的内容吧~</p><div class="note primary"><p><strong>参考资料</strong><br>前端性能优化-通用的缓存SDK: <a href="https://www.imooc.com/learn/866">https://www.imooc.com/learn/866</a></p></div>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解之排序二叉树</title>
      <link href="/blog/2018/01/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/blog/2018/01/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91/banner.png" class=""><p>二叉树是一种具有层级特性的的数据结构. 这些知识虽说在日常工作中不常使用, 但还是有必要让我们去学习一下, 研究其原理是如何运作. 下面将分享自己的一些理解和学习笔记, 来谈一谈什么是排序二叉树.</p><span id="more"></span><h2 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h2><p>树(Tree), 是(n&gt;=0)个节点的有限集. 其中 n=0 时, 我们称之为空树. 在一棵非空树中, 只有一个根节点. 在二叉树中, 每个节点最多有两个子节点. 一般称为左节点和右节点(左、右子树).</p><h2 id="排序二叉树"><a href="#排序二叉树" class="headerlink" title="排序二叉树"></a>排序二叉树</h2><p>二叉排序树(Binary Sort Tree)又称二叉查找树，它是一种特殊的二叉树，它或为空树，或具有以下性质的二叉树:</p><ol><li>它的右子树非空，则右子树上所有节点的值都大于根节点的值。</li><li>它的左子树非空，则左子树上所有节点的值都小于根节点的值。</li><li>左右子树各是一颗二叉排序树。</li></ol><h2 id="构建排序二叉树"><a href="#构建排序二叉树" class="headerlink" title="构建排序二叉树"></a>构建排序二叉树</h2><p>二叉树大多也是递归定义的. 下面根据排序二叉树的特性来创建一个二叉树.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> root = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.key = key;</span><br><span class="line">    <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> insertNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对比新旧节点</span></span><br><span class="line">    <span class="keyword">if</span> (newNode.key &lt; node.key) &#123;</span><br><span class="line">      <span class="comment">// 左节点是否存在</span></span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.left = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.left, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 右节点是否存在</span></span><br><span class="line">      <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.right = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.right, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暴露方法, 插入节点</span></span><br><span class="line">  <span class="built_in">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(key);</span><br><span class="line">    <span class="comment">// 根节点是不是空的</span></span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">      root = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      insertNode(root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> nodes = [<span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>];</span><br><span class="line"><span class="keyword">var</span> binaryTree = <span class="keyword">new</span> BinaryTree();</span><br><span class="line"></span><br><span class="line">nodes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  binaryTree.insert(key);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h2><p>我们已经构建好了一个排序二叉树, 现在想要获取二叉树每一个节点的信息, 因此我们需要<em>遍历</em>节点, 对它做一些操作. </p><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>二叉树有<em>三种遍历</em>的方法, 分别是<em>中序遍历</em>, <em>前序遍历</em>, <em>后序遍历</em>. 其中中序遍历的顺序是: <strong>左子树 -&gt; 根元素 -&gt; 右子树.</strong></p><p>对于二叉排序树来说，中序遍历得到的序列是<em>一个从小到大排序好的序列</em>. 百闻不如一见, 我们先看看图中的路线图, 整理一下思路先. </p><img data-src="/blog/2018/01/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91/img-2.png" class=""><p>这里我们需要加入中序遍历的接口, 因此我们在原先代码上继续扩展并运行.<br>控制台会依次输出”1 3 4 6 7 8 10 13 14”</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">  function BinaryTree(key) &#123;</span><br><span class="line">    var root = null;</span><br><span class="line">    var Node = function (key) &#123;</span><br><span class="line">      this.key = key;</span><br><span class="line">      this.left = null;</span><br><span class="line">      this.right = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var insertNode = function (node, newNode) &#123;</span><br><span class="line">      // 对比新旧节点</span><br><span class="line">      if (newNode.key &lt; node.key) &#123;</span><br><span class="line">        // 左节点是否存在</span><br><span class="line">        if (node.left <span class="comment">=== null) &#123;</span></span><br><span class="line">          node.left = newNode;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          insertNode(node.left, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        if (node.right <span class="comment">=== null) &#123;</span></span><br><span class="line">          node.right = newNode;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          insertNode(node.right, newNode);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+    // 中序遍历</span></span><br><span class="line"><span class="addition">+    var inOrderTraverseNode = function (node, callback) &#123;</span></span><br><span class="line"><span class="addition">+      // 递归遍历, 当到最后叶子节点时, 下面没有节点就会直接返回</span></span><br><span class="line"><span class="addition">+      if (node !== null) &#123;</span></span><br><span class="line"><span class="addition">+        inOrderTraverseNode(node.left, callback);</span></span><br><span class="line"><span class="addition">+        callback(node.key);</span></span><br><span class="line"><span class="addition">+        inOrderTraverseNode(node.right, callback);</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"></span><br><span class="line">    // 插入节点</span><br><span class="line">    this.insert = function (key) &#123;</span><br><span class="line">      var newNode = new Node(key)</span><br><span class="line">      if (root <span class="comment">=== null) &#123;</span></span><br><span class="line">        root = newNode;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        insertNode(root, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+    /**</span></span><br><span class="line"><span class="addition">+     * 中序遍历</span></span><br><span class="line"><span class="addition">+     * @param &#123;Function&#125; callback - 决定如何处理节点</span></span><br><span class="line"><span class="addition">+     */</span></span><br><span class="line"><span class="addition">+    this.inOrderTraverse = function (callback) &#123;</span></span><br><span class="line"><span class="addition">+      inOrderTraverseNode(root, callback);</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"></span><br><span class="line">  // 初始化调用</span><br><span class="line">  var nodes = [8, 3, 10, 1, 6, 14, 4, 7, 13]</span><br><span class="line">  var binaryTree = new BinaryTree();</span><br><span class="line">  nodes.forEach(function (key) &#123;</span><br><span class="line">    binaryTree.insert(key)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="addition">+  // 调用成功后输出当前节点</span></span><br><span class="line"><span class="addition">+  var callback = function (key) &#123;</span></span><br><span class="line"><span class="addition">+    console.log(key)</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"></span><br><span class="line">  // 中序调用</span><br><span class="line"><span class="addition">+  binaryTree.inOrderTraverse(callback);</span></span><br></pre></td></tr></table></figure><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>虽然前面已经有了中序遍历可以遍历节点, 为啥还要浪费精力学前序呢? 诶~这是因为每一种遍历都有自己应用优势.</p><p>前序遍历最大的作用, 就是如果我们想把已经有了的二叉树重新复制一遍, 使用前序遍历得到的效率相比重新构造一次来说, 两者的差距能差好几倍.</p><p>前序遍历的顺序与中序遍历有些不同, 前序是以: <strong>根元素 - 左节点 - 右节点</strong>的顺序来遍历. </p><img data-src="/blog/2018/01/10/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91/img-3.png" class="" title="前序遍历路线图"><p>这里将遍历的路线图简化了下, 红色输出, 黄色返回上一级, 而绿色则是右子树遍历. 可以看到这是很典型的递归思想. 紧接着我们继续在代码上进行扩展.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// other code...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 前序排序</span></span><br><span class="line">  <span class="keyword">var</span> preOrderTraverseNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      callback(node.key)</span><br><span class="line">      preOrderTraverseNode(node.left, callback)</span><br><span class="line">      preOrderTraverseNode(node.right, callback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 中序遍历</span></span><br><span class="line"><span class="comment">   * 暴露中序遍历的方法</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> <span class="variable">callback</span></span> - 决定如何处理节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">this</span>.preOrderTraverse = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    inOrderTraverseNode(root, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  binaryTree.preOrderTraverse(callback);</span><br><span class="line">  <span class="comment">// callback会依次打印 8 3 1 6 4 7 10 14 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>看到这里, 大家可能已经意识到了. 不同的遍历方法实际上是对当前的节点访问的顺序不一样. 后序遍历的访问的次序就是: <strong>左节点 - 右节点 - 根元素</strong>. 它的特点是, 当下面的左右孩子都遍历完了后才会触发回调函数(callback). 因此适用于破坏性操作的情况, 比如删除所有的节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// other code...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后序排序</span></span><br><span class="line">  <span class="keyword">var</span> preOrderTraverseNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      preOrderTraverseNode(node.left, callback)</span><br><span class="line">      preOrderTraverseNode(node.right, callback)</span><br><span class="line">      callback(node.key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 后序遍历</span></span><br><span class="line"><span class="comment">   * 暴露后序遍历的方法</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> <span class="variable">callback</span></span> - 决定如何处理节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">this</span>.postOrderTraverseNode = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    inOrderTraverseNode(root, callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  binaryTree.postOrderTraverse(callback);</span><br><span class="line">  <span class="comment">// callback会依次打印 1 4 7 6 3 13 14 10 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树节点查找"><a href="#二叉树节点查找" class="headerlink" title="二叉树节点查找"></a>二叉树节点查找</h2><p>找出排序二叉树的最大节点和最小节点实际上也很简单. 前文提过, 根据排序二叉树的特性, 节点左孩子的值, 一定比节点本身小. 节点右孩子的值一定比节点本身大. 因此我们可以根据这个规则来进行查找:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// other code ...</span></span><br><span class="line">  <span class="keyword">var</span> minNode = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="comment">// 循环逐级向下查找, 直到没有左孩子(最小节点)</span></span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 循环结束后直接反馈 node值</span></span><br><span class="line">      <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> maxNode = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">while</span> (node &amp;&amp; node.right) &#123;</span><br><span class="line">        node = node.right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最小节点</span></span><br><span class="line">  <span class="built_in">this</span>.min = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> minNode(root)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最大节点</span></span><br><span class="line">  <span class="built_in">this</span>.max = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> maxNode(root)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;min node is:&quot;</span> + binaryTree.min())    <span class="comment">// 输出1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;min node is:&quot;</span> + binaryTree.max())    <span class="comment">// 输出 14</span></span><br></pre></td></tr></table></figure><p>查找节点是否存在:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryTree</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// other code</span></span><br><span class="line">  <span class="keyword">var</span> searchNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依旧是递归思想， key值比node.key值小, 就去查询左子树</span></span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">      <span class="keyword">return</span> searchNode(node.left, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">      <span class="keyword">return</span> searchNode(node.right, key)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.search = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> searchNode(root, key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(binaryTree.search(<span class="number">7</span>) ? <span class="string">&quot;key 7 is found&quot;</span> : <span class="string">&quot;key 7 is not found&quot;</span>)</span><br><span class="line"><span class="comment">// key 7 is found</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(binaryTree.search(<span class="number">9</span>) ? <span class="string">&quot;key 9 is found&quot;</span> : <span class="string">&quot;key 9 is not found&quot;</span>)</span><br><span class="line"><span class="comment">// key 9 is not found</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后将上面的知识总结一下. 首先知道了树的实际上是一种具有层级特性的数据结构, 其中排序二叉树又是一种特殊的树. 它的具有以下几种性质:</p><ol><li>如果左(孩子)子树不为空, 那么左子树一定比父节点(根节点)的值小.</li><li>如果右(孩子)子树不为空, 那么右子树一定比父节点(根节点)的值大.</li><li>其中左、右子树也分别是排序二叉树.</li></ol><p>紧接着创建了二叉树节点后, 我们需要去遍历这些节点. 遍历的方法又分前序遍历, 中序遍历, 后序遍历. 三者的区别仅在遍历的顺序不同, 但却有着不同优势.</p><ul><li>前序遍历是唯一一个从根元素开始遍历的, 其顺序为 <em>根 - 左 - 右</em>, 由于它是从根左右开始, 非常适合像复制节点这样的工作.</li><li>中序遍历的顺序是 <em>左 - 根 - 右</em>, 返回的是一个从小到大(从大到小)排序的好序列.</li><li>后序遍历的顺序是 <em>左 - 右 - 根</em>, 其特点是执行操作时，肯定已经遍历过该节点的左右子节点，故适用于要进行破坏性操作的情况，比如删除所有节点.</li></ul><p>后面还讲到了二叉树节点查找, 利用递归找到二叉树中最小(大)的节点值等.<br>数据结构的学习之路还很长, 以后再一点一点慢慢的深入吧~</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 排序二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化Vue项目的构建速度</title>
      <link href="/blog/2018/01/06/%E4%BC%98%E5%8C%96Vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/"/>
      <url>/blog/2018/01/06/%E4%BC%98%E5%8C%96Vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/06/%E4%BC%98%E5%8C%96Vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/banner.png" class=""><p>随着项目依赖的增加, 在配合开发的时候听到后端同学的抱怨 build 时间长, 及其影响开发效率和心情. 然后翻阅了相关的资料开启Vue优化之路~</p><span id="more"></span><h2 id="项目依赖管理"><a href="#项目依赖管理" class="headerlink" title="项目依赖管理"></a>项目依赖管理</h2><p>首先检查一下依赖, 去掉对项目没用的依赖, 然后注意开发依赖跟生产依赖不能弄混. 如<code>scss</code>, <code>scss-loader</code>要放在开发依赖中, 因为编译后就不需要了的.. 这一点我以前也有文章提过<a href="https://anran758.github.io/blog/2017/11/27/%E8%B0%88%E8%B0%88npm%E5%8C%85%E9%87%8C%E7%9A%84%20install%20--save%20%E5%92%8C%20install%20--save-dev%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/">两者的区别</a>, 有兴趣的同学可以去看看.</p><h2 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h2><p>修改<code>config/index.js</code>下的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发环境dev下, 设置为`eval`能提高最快速度, 但是缺点是不能正确显示行号, Debug会有点影响</span></span><br><span class="line">devtool: <span class="string">&#x27;eval&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭生产环境的sourceMap, 不懂是啥的话可以看下面的文章</span></span><br><span class="line"><span class="comment">// 阮一峰 - JavaScript Source Map 详解</span></span><br><span class="line"><span class="comment">// http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html</span></span><br><span class="line">productionSourceMap: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在<code>src/mian.js</code>关闭生产环境下的调试信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭生产环境下的调试信息</span></span><br><span class="line"><span class="keyword">const</span> isDebugMode = process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span>;</span><br><span class="line">Vue.config.debug = isDebugMode;</span><br><span class="line">Vue.config.devtools = isDebugMode;</span><br><span class="line">Vue.config.productionTip = isDebugMode;</span><br></pre></td></tr></table></figure><h2 id="启动-DllPlugin"><a href="#启动-DllPlugin" class="headerlink" title="启动 DllPlugin"></a>启动 DllPlugin</h2><p>在<code>build</code>文件夹中新增<code>webpac.dll.config.js</code>的js文件. 我们将第三方库抽取出来, 打包<code>dll</code>代码.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽取第三方库</span></span><br><span class="line"><span class="keyword">const</span> vendors = [</span><br><span class="line">      <span class="string">&quot;vue/dist/vue.common.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;vue-router&quot;</span>,</span><br><span class="line">      <span class="string">&quot;babel-polyfill&quot;</span>,</span><br><span class="line">      <span class="string">&quot;axios&quot;</span>,</span><br><span class="line">      <span class="string">&quot;element-ui&quot;</span>,</span><br><span class="line">      <span class="string">&quot;mint-ui&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: vendors</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">&quot;../static/js&quot;</span>),</span><br><span class="line">    filename: <span class="string">&quot;[name].dll.js&quot;</span>,</span><br><span class="line">    library: <span class="string">&quot;[name]_[hash]&quot;</span> <span class="comment">// vendor.dll.js中暴露出的全局变量名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.join(__dirname, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;[name]-manifest.json&quot;</span>),</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 此处需要和 output.library 的值一致</span></span><br><span class="line">      name: <span class="string">&quot;[name]_[hash]&quot;</span>,</span><br><span class="line">      context: __dirname</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们写一个快捷的调用方式, 在<code>package.json</code>的<code>script</code>上添加一行代码:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// other code...</span></span><br><span class="line">    <span class="attr">&quot;dll&quot;</span>: <span class="string">&quot;webpack --config ./build/webpack.dll.config.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以直接在命令行使用<code>npm run dll</code>, 生成<code>vendor-manifest.json</code>和<code>vendor.dll.js</code>, 前者是库文件的<code>node_modle</code>路径和<code>webpack</code>打包id的映射. 后者是我们打包后的代码库.</p><p>随后这里我们再安装<code>html-webpack-include-assets-plugin</code>和<code>copy-webpack-plugin</code>这两个插件.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm insatll --save-dev html-webpack-include-assets-plugin copy-webpack-plugin</span><br></pre></td></tr></table></figure><p><code>copy-webpack-plugin</code>是因为项目的需要，我们需要copy到指定的目录下.<code>html-webpack-include-assets-plugin</code>是将<code>vendor.dll.js</code>插入到<code>index.html</code>里.</p><p>这里值得一提的是, 虽然我们可以直接在根目录的<code>index.html</code>里插入<code>script</code>, 但实际上并不妥当的. 当你<code>npm run dev</code>后, 你会发现在控制台那一行红色的报错, 告诉着你东西找不到, 虽然不影响开发, 但你会看得很难受.</p><p>紧接着我们在<code>webpack.prod.conf.js</code>上引用我们添加的依赖, 再添加以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config 是 config/index.js 里的配置</span></span><br><span class="line"><span class="comment">// utils.assetsPath 也是 build/utils.js的配置</span></span><br><span class="line"><span class="comment">// 这里这样写是为了跟项目统一</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    context: __dirname,</span><br><span class="line">    manifest: <span class="built_in">require</span>(<span class="string">&#x27;./vendor-manifest.json&#x27;</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// copy custom static assets</span></span><br><span class="line">  <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">&#x27;../static&#x27;</span>),</span><br><span class="line">      to: config.build.assetsSubDirectory,</span><br><span class="line">      ignore: [<span class="string">&#x27;.*&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]),</span><br><span class="line">  <span class="comment">// 将 vendor.dll.js 插入HTML里</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackIncludeAssetsPlugin(&#123;</span><br><span class="line">    assets: [utils.assetsPath(<span class="string">&#x27;js/vendor.dll.js&#x27;</span>)],</span><br><span class="line">    files: [<span class="string">&#x27;index.html&#x27;</span>],</span><br><span class="line">    append: <span class="literal">false</span></span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在命令行进行打包<code>npm run build</code>, 可以看到构建的速度大大的提高啦, 我们的优化也告一段落了~</p><img data-src="/blog/2018/01/06/%E4%BC%98%E5%8C%96Vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/run-build.png" class=""><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>最后再优化时说说踩的坑, 给后来人一些提示.</p><p><code>Uncaught ReferenceError: vendor_library is not defined</code> - 检查HTML里是否插入<code>vendor.dll.js</code>, 文件是否加载成功, 或者检查是否有路径问题.</p><p>一些打包后hash不变仍然会被清除重新打包 … 这是因为<code>vue-cli</code>默认配置会直接清空<code>dist</code>文件夹里的所有文件, 你提前放一些js文件进去也是没有用的.</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> vue </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈对MVC与MVVM的理解</title>
      <link href="/blog/2018/01/05/%E6%B5%85%E8%B0%88%E5%AF%B9MVC%E4%B8%8EMVVM%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/blog/2018/01/05/%E6%B5%85%E8%B0%88%E5%AF%B9MVC%E4%B8%8EMVVM%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2018/01/05/%E6%B5%85%E8%B0%88%E5%AF%B9MVC%E4%B8%8EMVVM%E7%9A%84%E7%90%86%E8%A7%A3/banner.jpg" class=""><p>开发中我们常听说MVC, MVP, MVVM这些好像很高端的名词, 那么你了解他实际上是什么东西吗? 下面谈谈对它们的理解.</p><span id="more"></span><h3 id="1-MVC"><a href="#1-MVC" class="headerlink" title="1. MVC"></a>1. MVC</h3><p>其实上面所提的三者都是一种软件架构模式(或者说是一种概念), 其中<strong>MVC</strong>的历史最为长远.</p><p>MVC模式可以分成以下三种, 就是模型(module), 界面(View), 控制器(controller). 三者之间的关系.</p><img data-src="/blog/2018/01/05/%E6%B5%85%E8%B0%88%E5%AF%B9MVC%E4%B8%8EMVVM%E7%9A%84%E7%90%86%E8%A7%A3/mvc.jpg" class="" title="各部件通信方式"><p>MVC的好处在于</p><ol><li>视图控制模型分离降低耦合性</li><li>提高代码重用性和可维护性</li><li>因为是单向模块化, 不同层各施其职，互不干涉</li></ol><p>有优点再说说缺点: </p><ol><li>清晰的构架以代码的复杂性为代价, 对小项目优可能反而降低开发效率. </li><li><code>Controller</code>层代码难以复用的, 到后面会变得臃肿.</li><li>运行效率相对较低, 太过于复杂反而不太适合中小型项目</li></ol><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM(Module-View-ViewModule)的出现主要是为了解决在开发过程中<code>Controller</code>越来越庞大的问题, 它将<code>Controller</code>替换成了<code>ViewModule</code>, 同时改变了通讯模式, 这是MVVM相对于MVC改进的核心思想.</p><img data-src="/blog/2018/01/05/%E6%B5%85%E8%B0%88%E5%AF%B9MVC%E4%B8%8EMVVM%E7%9A%84%E7%90%86%E8%A7%A3/mvvm.jpg" class=""><p>其中MVVM的显著特点就是双向绑定. <code>view</code>的变动会自动更新到<code>Model</code>中. 其中当下很流行的Vue框架就是采用了这个模式. 下图的就能很清晰的看的懂ViewModel是如何做的.</p><img data-src="/blog/2018/01/05/%E6%B5%85%E8%B0%88%E5%AF%B9MVC%E4%B8%8EMVVM%E7%9A%84%E7%90%86%E8%A7%A3/vue-1.png" class="">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git emoji使用指南</title>
      <link href="/blog/2017/12/31/Git-emoji%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/blog/2017/12/31/Git-emoji%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/31/Git-emoji%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/banner.jpg" class=""><p>emoji源于日语词汇“絵文字”, 想必大家对它都挺熟悉的吧, 其拟人化的生动形象，已经成为当下流行的表情之一. 接下来讲一下如何规范的在<code>git</code>中使用emoji提高我们项目的可读性吧~<span id="more"></span></p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>在<code>git commit</code>上加入emoji的二进制符号, 格式为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:emoji1: :emoji2: 本次提交的主要内容</span><br></pre></td></tr></table></figure><p>如初次提交:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;:tada: Initialize Repo&quot;</span></span><br></pre></td></tr></table></figure><h4 id="相关规范"><a href="#相关规范" class="headerlink" title="相关规范"></a>相关规范</h4><p>emoji 表情在提交代码的时候也不能乱用，否则容易造成误解. 因此开源项目<a href="https://gitmoji.carloscuesta.me/">gitmoji</a>专门规定了在 github 提交代码时应当遵循的 emoji 规范：</p><table><thead><tr><th align="left">emoji</th><th align="left">emoji代码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">:tada:(喝彩)</td><td align="left"><code>tada</code></td><td align="left">初始提交</td></tr><tr><td align="left">:art:(调色板)</td><td align="left"><code>art</code></td><td align="left">改进代码的结构/格式</td></tr><tr><td align="left">:zap:(闪电)</td><td align="left"><code>zap</code></td><td align="left">提高性能</td></tr><tr><td align="left">:fire:(火焰)</td><td align="left"><code>fire</code></td><td align="left">删除代码或文件</td></tr><tr><td align="left">:bug:(bug)</td><td align="left"><code>bug</code></td><td align="left">修复一个错误</td></tr><tr><td align="left">:ambulance:(紧急救护车)</td><td align="left"><code>ambulance</code></td><td align="left">关键修补程序</td></tr><tr><td align="left">:sparkles:(闪亮)</td><td align="left"><code>sparkles</code></td><td align="left">引用新功能</td></tr><tr><td align="left">:memo:(备忘录)</td><td align="left"><code>memo</code></td><td align="left">编写文档</td></tr><tr><td align="left">:rocket:(火箭)</td><td align="left"><code>rocket</code></td><td align="left">部署新功能</td></tr><tr><td align="left">:recycle:(重构)</td><td align="left"><code>recycle</code></td><td align="left">代码重构</td></tr><tr><td align="left">:lipstick:(口红)</td><td align="left"><code>lipstick</code></td><td align="left">更新UI和样式文件</td></tr><tr><td align="left">:white_check_mark:(复选框)</td><td align="left"><code>white_check_mark</code></td><td align="left">添加测试</td></tr><tr><td align="left">:apple:(苹果)</td><td align="left"><code>apple</code></td><td align="left">修复MacOS上的问题</td></tr><tr><td align="left">:penguin:(企鹅)</td><td align="left"><code>penguin</code></td><td align="left">修复Linux上的问题</td></tr><tr><td align="left">:checkered_flag:(旗子)</td><td align="left"><code>checkered_flag</code></td><td align="left">修复Windows上的问题</td></tr><tr><td align="left">:robot:(机器人)</td><td align="left"><code>robot</code></td><td align="left">解决Android上的问题</td></tr><tr><td align="left">:green_apple:(绿苹果)</td><td align="left"><code>green_apple</code></td><td align="left">解决iOS上的问题</td></tr><tr><td align="left">:bookmark:(书签)</td><td align="left"><code>bookmark</code></td><td align="left">发布/版本标签</td></tr><tr><td align="left">:rotating_light:(警告灯)</td><td align="left"><code>rotating_light</code></td><td align="left">移除 linter 警告</td></tr><tr><td align="left">:construction:(施工)</td><td align="left"><code>construction</code></td><td align="left">工作正在进行中</td></tr><tr><td align="left">:green_heart:(绿心)</td><td align="left"><code>green_heart</code></td><td align="left">修复CI构建</td></tr><tr><td align="left">:arrow_down:(下降)</td><td align="left"><code>arrow_down</code></td><td align="left">降级依赖关系</td></tr><tr><td align="left">:arrow_up:(上升)</td><td align="left"><code>arrow_up</code></td><td align="left">升级依赖关系</td></tr><tr><td align="left">:pushpin:(图钉)</td><td align="left"><code>pushpin</code></td><td align="left">将依赖关系固定到特定的版本</td></tr><tr><td align="left">:construction_worker:(工人)</td><td align="left"><code>construction_worker</code></td><td align="left">添加CI构建系统</td></tr><tr><td align="left">:chart_with_upwards_trend:(上升趋势)</td><td align="left"><code>chart_with_upwards_trend</code></td><td align="left">添加分析或跟踪代码</td></tr><tr><td align="left">:heavy_minus_sign:(减号)</td><td align="left"><code>heavy_minus_sign</code></td><td align="left">删除依赖项</td></tr><tr><td align="left">:whale:(鲸鱼)</td><td align="left"><code>whale</code></td><td align="left">关于Docker的工作</td></tr><tr><td align="left">:heavy_plus_sign:(加号)</td><td align="left"><code>heavy_plus_sign</code></td><td align="left">添加一个依赖项</td></tr><tr><td align="left">:wrench:(扳手)</td><td align="left"><code>wrench</code></td><td align="left">更改配置文件</td></tr><tr><td align="left">:pencil2:(铅笔)</td><td align="left"><code>pencil2</code></td><td align="left">修正错别字</td></tr><tr><td align="left">:hankey:(hankey)</td><td align="left"><code>hankey</code></td><td align="left">编写需要改进的不好的代码</td></tr><tr><td align="left">:rewind:(回退)</td><td align="left"><code>rewind</code></td><td align="left">恢复更改</td></tr><tr><td align="left">:globe_with_meridians:(国际化)</td><td align="left"><code>globe_with_meridians</code></td><td align="left">国际化和本地化</td></tr><tr><td align="left">:twisted_rightwards_arrows:(合并)</td><td align="left"><code>twisted_rightwards_arrows</code></td><td align="left">合并分支</td></tr><tr><td align="left">:package:(打包)</td><td align="left"><code>package</code></td><td align="left">更新编译的文件或包</td></tr><tr><td align="left">:alien:(外星人)</td><td align="left"><code>alien</code></td><td align="left">由于外部API更改而更新代码</td></tr><tr><td align="left">:truck:(移动搬家)</td><td align="left"><code>truck</code></td><td align="left">移动或重命名文件</td></tr><tr><td align="left">:page_facing_up:(页面)</td><td align="left"><code>page_facing_up</code></td><td align="left">添加或更新许可证</td></tr><tr><td align="left">:boom:(爆炸性)</td><td align="left"><code>boom</code></td><td align="left">介绍突破性变化</td></tr><tr><td align="left">:bento:(便当)</td><td align="left"><code>bento</code></td><td align="left">添加或更新资产</td></tr><tr><td align="left">:ok_hand:(好的手势)</td><td align="left"><code>ok_hand</code></td><td align="left">由于代码审阅更改而更新代码</td></tr><tr><td align="left">:wheelchair:(无障碍)</td><td align="left"><code>wheelchair</code></td><td align="left">改善无障碍</td></tr><tr><td align="left">:bulb:(灯泡)</td><td align="left"><code>bulb</code></td><td align="left">记录源代码</td></tr><tr><td align="left">:speech_balloon:(文字框)</td><td align="left"><code>speech_balloon</code></td><td align="left">更新文字和文字</td></tr><tr><td align="left">:card_file_box:(存档箱)</td><td align="left"><code>card_file_box</code></td><td align="left">执行与数据库相关的更改</td></tr><tr><td align="left">:loud_sound:(声响)</td><td align="left"><code>loud_sound</code></td><td align="left">添加日志</td></tr><tr><td align="left">:mute:(静音)</td><td align="left"><code>mute</code></td><td align="left">删除日志</td></tr><tr><td align="left">:children_crossing:(用户)</td><td align="left"><code>children_crossing</code></td><td align="left">改善用户体验/可用性</td></tr><tr><td align="left">:building_construction:(建筑)</td><td align="left"><code>building_construction</code></td><td align="left">进行架构更改</td></tr></tbody></table><p><strong>参考资料:</strong></p><p>Git emoji: <a href="https://gitmoji.carloscuesta.me/">https://gitmoji.carloscuesta.me</a><br>Github emoji列表: <a href="https://segmentfault.com/a/1190000009649780">https://segmentfault.com/a/1190000009649780</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条件语句的简写技巧</title>
      <link href="/blog/2017/12/26/%E6%96%B0%E6%89%8B%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%8A%80%E5%B7%A7-if%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%88%A4%E5%AE%9A/"/>
      <url>/blog/2017/12/26/%E6%96%B0%E6%89%8B%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%8A%80%E5%B7%A7-if%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%88%A4%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/26/%E6%96%B0%E6%89%8B%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%8A%80%E5%B7%A7-if%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%88%A4%E5%AE%9A/banner.jpg" class=""><p>可能入坑不久的同学还会用着<code>if (value !== null || Value !== undefined)</code>这样的判断语句, 而实际上只要理解判定的规则, 善用规则, 就能大大的提高代码的可读性. 接下来让我们深入学习一下.</p><span id="more"></span><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>大多编程语言中最为常用的一个语句就是<code>if</code>语句, 这种条件语句是通过判断指定表达式的值来决定执行还是跳过某些语句. 它的语法如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Expression) &#123;</span><br><span class="line">  statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中**Expression(表达式/条件)**可以是任意表达式或者值.</p><ol><li>首先它会解析表达式的值</li><li>如果表达式是无法解析的, 会报<code>ReferenceError</code>的错误并停止. 如果不是则继续.</li><li>判断值的引用类型, 如果是布尔值, 字符串和符号则继续. <code>null</code>和<code>undefined</code>永远都返回 false.</li><li>将值传入<code>toBoolean(exprValue)</code>根据下面的规则转换为布尔值.</li></ol><table><thead><tr><th align="left">value</th><th align="left">Boolean</th></tr></thead><tbody><tr><td align="left">未定义(Undefined)</td><td align="left">false</td></tr><tr><td align="left">空值(null)</td><td align="left">false</td></tr><tr><td align="left">布尔值(Boolean)</td><td align="left">返回参数本身</td></tr><tr><td align="left">数字(Number)</td><td align="left">如果参数是<code>+0</code>, <code>-0</code>或<code>NaN</code>，则返回<code>false</code>; 否则返回<code>true</code></td></tr><tr><td align="left">字符串(String)</td><td align="left">如果参数是空字符串(长度为零)，则返回<code>false</code>; 否则返回<code>true</code></td></tr><tr><td align="left">Symbol</td><td align="left">返回 true</td></tr><tr><td align="left">Object</td><td align="left">返回 true</td></tr></tbody></table><p>这里我们得出<code>undefined</code>, <code>null</code>, <code>NaN</code>, 空字符串, 和数字 0 都是过不了条件语块的规则, 因此我们可以利用这一点来对代码进行简写.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userName = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad code</span></span><br><span class="line"><span class="keyword">if</span> (value != <span class="literal">undefined</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad code</span></span><br><span class="line"><span class="keyword">if</span> (value !== <span class="literal">undefined</span> || value !== <span class="literal">null</span> || value !== <span class="literal">false</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good code</span></span><br><span class="line"><span class="keyword">if</span> (userName) &#123;</span><br><span class="line">  something...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag锁, 利用取反转换布尔值</span></span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">  flag = <span class="literal">true</span>;</span><br><span class="line">  something...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相同的, 也没有必要去使用<code>==</code>规范不推荐的方式去隐式转换类型, 这种规则同样适用于<code>三目运算符</code>, <code>switch</code>等条件运算中去… 这样看起来是不是自己的代码整洁多了呢~</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-if-statement">ECMA-262 官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 原理解析 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初窥WebSockets</title>
      <link href="/blog/2017/12/25/%E5%88%9D%E7%AA%A5Web-Sockets/"/>
      <url>/blog/2017/12/25/%E5%88%9D%E7%AA%A5Web-Sockets/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/25/%E5%88%9D%E7%AA%A5Web-Sockets/banner.png" class=""><p>要说最令人津津乐道的新浏览器的 API, 就数 Web Sockets 了. 接下来了解一下这个备受争议的 API 吧~</p><span id="more"></span><h2 id="什么是-Web-Socket"><a href="#什么是-Web-Socket" class="headerlink" title="什么是 Web Socket?"></a>什么是 Web Socket?</h2><p><strong>Web Socket</strong>是 HTML5 出来的一个持久化新协议. 它的目标是在一个单独的持久链接上提供全双工, 让客户端和服务器之间的数据交换变得更加简单.</p><p>Web Socket 是基于 HTTP 协议来建立连接. 由于使用了自定义的协议, 因此它的 URL 模式策略也与标准的 HTTP 不同, 未加密的<code>http://</code>对应着<code>ws://</code>, 而加密的连接的<code>https://</code>也变成<code>https://</code>.</p><p><strong>那使用 Web Socket 的好处是什么?</strong></p><ol><li>能够在客户端和服务器之间发送非常少的数据, 而不用担心 HTTP 那样字节级的开销. 由于传递的数据很小, 表面看起来会很适用于移动端.</li><li>主动性<br>大家都知道, 标准 HTTP 请求是具有被动性的, 如 <code>ajax轮询</code>:<br>客户端: “lalala, 帮我看一下我快递有变动吗?”<br>服务端: “没呢, 没变化”<br>客户端: “那现在呢?”<br>服务端: “也还没..”<br>客户端: “那现在呢?”<br>服务端: “还没…”<br>客户端: “那现在呢?”<br>服务端: “好啦好啦, 物流发生变化了, 你看到这里这里了”<br>客户端: “那开始派送了吗?”<br>服务端: “还没…”<br>这样的缺点是什么… <code>ajax轮询</code>需要服务器有很快的处理速度和资源, 而频繁过多的请求可能会报<code>503 Server Unavailable</code>的错误了.</li></ol><p>而升级为 Websocket 后, 这时候服务器会主动把东西反馈给你, 如:<br>客户端: “哥们, 咱建立 Websocket 协议, 需要 chat，Websocket 协议版本：17（HTTP Request）”<br>服务端：”ok，确认，已升级为 Websocket 协议(HTTP Protocols Switched)”<br>客户端: “那有啥事的话跟我讲噢”<br>服务端: “balbalbal”<br>服务端: “balbalbal”<br>服务端: “hhhhhhhhhh”<br>服务端: “笑死啦 2333333”<br>就变成了这样，只需要经过一次 HTTP 请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你, 这里场景就适用于聊天室之类的）</p><ol start="3"><li>没有同源限制，客户端可以与任意服务器通信(不用担心跨域)</li></ol><h2 id="现状与短处"><a href="#现状与短处" class="headerlink" title="现状与短处"></a>现状与短处</h2><p>既然它存在这种优势为什么如今还是使用的不多呢?<br><code>HTML5</code>新 API 嘛… 说到<code>HTML5</code>就不得不考虑到<em>兼容性</em>的问题, WebSocket 在各浏览器的兼容性不一致这是问题其一.</p><img data-src="/blog/2017/12/25/%E5%88%9D%E7%AA%A5Web-Sockets/img-1.png" class="" title="Web Sockets兼容性"><p>前文有提过. 相对于 PC 端, <code>websocket</code>的客户端和服务器之间发送非常少的数据, 表面看起来的确移动端会更有优势. 但是目前以国内的环境来说, 反而不好用. 当网络不稳定的时候开销尤其大.</p><p>看到这里或许会有人问, 啊? 你之前不是说只需要 1 次 HTTP 请求就可以做信息传送了蛮?? 是的, 没错. 大家可能会玩过像<em>阴阳师</em>这样的游戏? 网络一闪, 就会让你重新登录.而长轮询断一次只会卡一秒, 而 websocket 断了则要重新从认证开始, 那当网络不稳定时, 那开销可想而知.</p><p>其次就是性能上并没有绝对的优势, 所以当前主流还是标准的 HTTP 比较多, 而<code>websocket</code>, 据我所知当下适用的场景也只有手游上的使用了.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><code>websocket</code>的路还很长, 虽然现在使用的不多, 但以后还是可以保留小小的期待. 上文提及资料有部分是来源于网上. 有部分是去咨询了相关的 dalao. 才疏学浅若有违权, 或者说的不对的地方望各位指出.</p><p><strong>参考资料:</strong><br>WebSocket 是什么原理？为什么可以实现持久连接？ - Ovear 的回答 - 知乎<br><a href="https://www.zhihu.com/question/20215561/answer/40316953">https://www.zhihu.com/question/20215561/answer/40316953</a></p>]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> WebSocket </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于点击下拉菜单字体模糊及可能造成boder上下一像素宽度不一的坑</title>
      <link href="/blog/2017/12/23/%E5%85%B3%E4%BA%8E%E7%82%B9%E5%87%BB%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%A8%A1%E7%B3%8A%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%80%A0%E6%88%90boder%E4%B8%8A%E4%B8%8B%E4%B8%80%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6%E4%B8%8D%E4%B8%80%E7%9A%84%E5%9D%91/"/>
      <url>/blog/2017/12/23/%E5%85%B3%E4%BA%8E%E7%82%B9%E5%87%BB%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%A8%A1%E7%B3%8A%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%80%A0%E6%88%90boder%E4%B8%8A%E4%B8%8B%E4%B8%80%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6%E4%B8%8D%E4%B8%80%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/23/%E5%85%B3%E4%BA%8E%E7%82%B9%E5%87%BB%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%A8%A1%E7%B3%8A%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%80%A0%E6%88%90boder%E4%B8%8A%E4%B8%8B%E4%B8%80%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6%E4%B8%8D%E4%B8%80%E7%9A%84%E5%9D%91/transition.gif" class=""><p>关于点击下拉菜单会造成文字模糊及<code>boder 1px</code>上下和左右宽度不一致的问题.</p><span id="more"></span><h2 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h2><p>朋友叫帮忙看代码~ 问题是这样的, 当点击下拉菜单时, 整个页面的组件都变模糊一下. 然后border上下的边框能隐约看到会大概溢出那么一点(但是没到一个像素).</p><p>因为使用了<code>element</code>组件, 大概能想到中间加有<code>transition</code>, 对问题进行排查后发现<code>transform</code>这个属性会对后代元素能产生影响, 将属性删除, 问题解决. 具体影响的原理, 现在占个坑, 以后再深入挖掘…</p><p>Bug相关的图</p><hr><img data-src="/blog/2017/12/23/%E5%85%B3%E4%BA%8E%E7%82%B9%E5%87%BB%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%A8%A1%E7%B3%8A%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%80%A0%E6%88%90boder%E4%B8%8A%E4%B8%8B%E4%B8%80%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6%E4%B8%8D%E4%B8%80%E7%9A%84%E5%9D%91/bug.gif" class="" title="点击后能明显看到整个组件模糊了"><img data-src="/blog/2017/12/23/%E5%85%B3%E4%BA%8E%E7%82%B9%E5%87%BB%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%A8%A1%E7%B3%8A%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%80%A0%E6%88%90boder%E4%B8%8A%E4%B8%8B%E4%B8%80%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6%E4%B8%8D%E4%B8%80%E7%9A%84%E5%9D%91/img-1.jpg" class="" title="正常下的1像素"><img data-src="/blog/2017/12/23/%E5%85%B3%E4%BA%8E%E7%82%B9%E5%87%BB%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E6%A8%A1%E7%B3%8A%E5%8F%8A%E5%8F%AF%E8%83%BD%E9%80%A0%E6%88%90boder%E4%B8%8A%E4%B8%8B%E4%B8%80%E5%83%8F%E7%B4%A0%E5%AE%BD%E5%BA%A6%E4%B8%8D%E4%B8%80%E7%9A%84%E5%9D%91/img-2.jpg" class="" title="1像素下还有一点点的溢出">]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
            <tag> 布局bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pull远程仓库代码冲突</title>
      <link href="/blog/2017/12/18/git-pull%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81/"/>
      <url>/blog/2017/12/18/git-pull%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/18/git-pull%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81/banner.jpg" class=""><p>常用git与远程仓库进行交互, 难免会遇到冲突的问题. 现在来了解一下, 当出现这种情况时, 该要如何处理.</p><span id="more"></span><h2 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h2><p>代码冲突, 无非就是同时有两个人在改动同一个文件所造成的冲突. 当你使用<code>git pull</code>后, <code>git</code>会提示你: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">error: Your <span class="built_in">local</span> changes to the following files would be overwritten by merge:</span><br><span class="line">        src/components/page/file.vue</span><br><span class="line">Please commit your changes or stash them before you merge.</span><br><span class="line">Aborting</span><br><span class="line">Updating 8e191be..c301cdc</span><br></pre></td></tr></table></figure><p>这时候你可以使用<code>git stash</code>将本地修改存储起来. 使用<code>git status</code>查看, 是不是干净啦~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on master: 8e191be Merge branch <span class="string">&#x27;master&#x27;</span> of https://github.com/anran758/<span class="built_in">test</span></span><br><span class="line">HEAD is now at 8e191be Merge branch <span class="string">&#x27;master&#x27;</span> of https://github.com/anran758/<span class="built_in">test</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>这时再使用将远程仓库的代码pull下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  $ git pull</span><br><span class="line">Updating 8e191be..c301cdc</span><br><span class="line">Fast-forward</span><br><span class="line"> src/base/fonts/iconfont.eot                        | Bin 7320 -&gt; 7548 bytes</span><br><span class="line"> src/components/page/file.vue      |  10 +-</span><br><span class="line"> create mode 100644 static/font_503074_8sfhbdjlucjtt9/iconfont.eot</span><br></pre></td></tr></table></figure><p>现在要查看现有的储藏, 可以使用<code>git stash list</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 8e191be Merge branch <span class="string">&#x27;master&#x27;</span> of https://github.com/anran758/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>这时我们还原储藏的内容, 使用命令<code>git stash pop &#39;stash@&#123;0&#125;&#39;</code>. <strong>注意这里的要使用引号<code>&#39;stash@&#123;0&#125;&#39;</code>, 因为shell正在使用扩展里的内容, 否则会报一个</strong><code>unknown option: -encodedCommand</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop <span class="string">&#x27;stash@&#123;0&#125;&#x27;</span></span><br><span class="line">Auto-merging src/components/page/file.vue</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">        modified:   src/components/page/film.vue</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><p>之后就可以使用<code>git diff</code>或者利用图形工具, 如Sourcetree(可视化git), vscode编辑器上对比代码, 手动解决冲突即可.</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 代码冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是.gitkeep? 如何在 windows 下使用命令行创建 .gitkeep 文件</title>
      <link href="/blog/2017/12/16/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%88%9B%E5%BB%BA-gitkeep%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2017/12/16/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%88%9B%E5%BB%BA-gitkeep%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/16/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%88%9B%E5%BB%BA-gitkeep%E6%96%87%E4%BB%B6/banner.png" class=""><p>在一些脚手架上构建项目中, 你或许会留意到某个目录中会有个名为<code>.gitkeep</code>的空文件. 那么这个文件是用来做什么的呢?</p><span id="more"></span><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>什么是<code>.gitkeep</code>? 其实是这样的,  当提交的代码时目录中有空文件夹时<code>git</code>会自动忽略掉. 而有时候你就是想留着这个, 以后有用处不想被忽略怎么办呢? 因此, <code>.gitkeep</code>就应运而生了…</p><p><code>.gitkeep</code>是一个约定俗成的文件名并没有什么特殊规则, 它就相当于一个占位, 让<code>git</code>开始跟踪这个目录.<br>其实任何文件都可以, 只不过大家都遵循这个命名, 会跟具有语义化. 如同字面意思一样…<code>git</code> + <code>keep</code>, 让<code>git</code>保持这个文件夹, 是不是很简单易懂呀?</p><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><blockquote><p>“哥, 能发个’.gitkeep’给我蛮? 项目中的弄丢了..”<br>  “啊? 直接创建一个不就完啦?”<br>  “创建不了呀!!系统不准, 会报错提示必须输入文件名”<br>  “噢~是有这个限制的, 你用命令行吧”<br>  “搜了圈, 好像没有找到在windows创建的方法诶, “<br>  “? ? ?”  </p></blockquote><p>没错, 上面这场景就是让我写这篇博客的主要起因…其实windows下环境创建<code>.</code>开头的文件只能通过命令行的方法, 而且方式也很简单. 只需要输入一行命令即可..</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> <span class="built_in">NUL</span> &gt; .gitkeep   </span><br></pre></td></tr></table></figure><p>这段代码的意思就是创建一个空文件重定向到名为<code>.gitkeep</code>的文件中.</p><h2 id="gitignore与gitkeep"><a href="#gitignore与gitkeep" class="headerlink" title="gitignore与gitkeep"></a>gitignore与gitkeep</h2><p>在脚手架构建的项目中, 你也总能在根目录看到名为<code>.giitignore</code>的文件, 那么它和<code>gitkeep</code>又有什么关联呢? 前文有提过, <code>.gitkeep</code>只是约定俗成的一个名称, 而<code>.gitignore</code>是一个特殊文件, 如果你有什么不想提交上去的东西, 如配置了表单密码的配置文件呀什么的, 你可以写进这个文件中, <code>git</code>会自动的忽略掉它.</p><blockquote><p>忽略文件的原则是：</p><ul><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ul></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实像<code>.gitignore</code>带有其他特殊文件还有其他, 如<code>.nojekyll</code>来告诉Github关闭 GitHub Pages 的 Jekyll 相关功能等, 由于实际工作中用的烧, 这里不详谈, 放着让大家去挖掘吧~</p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 项目中 Axios 报错 Promise 未定义及 IE10 报语法错误的解决方案</title>
      <link href="/blog/2017/12/15/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADAxios%E6%8A%A5%E9%94%99Pomise%E6%9C%AA%E5%AE%9A%E4%B9%89%E5%8F%8AIE10%E6%8A%A5%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/blog/2017/12/15/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADAxios%E6%8A%A5%E9%94%99Pomise%E6%9C%AA%E5%AE%9A%E4%B9%89%E5%8F%8AIE10%E6%8A%A5%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/15/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADAxios%E6%8A%A5%E9%94%99Pomise%E6%9C%AA%E5%AE%9A%E4%B9%89%E5%8F%8AIE10%E6%8A%A5%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/banner.jpg" class=""><p>关于IE11及以下版本无法使用Promise还有IE10下报错的问题</p><span id="more"></span><h2 id="Promise-未定义"><a href="#Promise-未定义" class="headerlink" title="Promise 未定义"></a>Promise 未定义</h2><p>在使用Axios开发时, IE11及以下版本报错会报<code>Promise未定义</code>的错误. 这是因为<code>axios</code>本质上是封装了ES6语法的<code>promise</code>,而<code>promise</code>在IE上并不兼容. </p><img data-src="/blog/2017/12/15/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADAxios%E6%8A%A5%E9%94%99Pomise%E6%9C%AA%E5%AE%9A%E4%B9%89%E5%8F%8AIE10%E6%8A%A5%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/promise-1.png" class="" title="IE11下的错误"><p>然而说到js兼容, 这时候我们又能联想到<code>babel</code>.. 没错, <code>babel</code>中有一个工具叫做<a href="https://babeljs.cn/docs/usage/polyfill/">babel-Polyfill</a>, 它会仿效一个完整的<code>ES2015+</code>环境，并意图运行于一个应用中而不是一个库/工具. 其实食用的方式也很简单.</p><p>我们将<code>babel-polyfill</code>装进我们项目依赖中. <em>这里值得注意的是, 安装的时候需要安装到<code>dependency</code>(生产依赖)中, 而不是<code>devDependency</code>(开发依赖)</em><br>(tips.关于两者的区别, 我以前的文章有专门讲过, 感兴趣的可以看一下)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure><p>首先在<code>mian.js</code>的<strong>顶部</strong>引入<code>import &quot;babel-polyfill&quot;;</code>确保能够最先加载, 随后我们在<code>build</code>目录下<code>webpack.config.js</code>修改配置, 将app使用<code>babel-polyfill</code>进行编译. 这时候我们再重新编译, 就会发现<code>promise未定义</code>的错误就以及消失了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">      app: [<span class="string">&quot;babel-polyfill&quot;</span>, <span class="string">&#x27;./src/main.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你以为文章到这里就结束了吗…. 随即我们切换到IE10下进行测试. 你会发现, 又冒出了一个报错.. Emmm, 解决一个又来一个, 惊不惊喜意不意外?</p><img data-src="/blog/2017/12/15/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADAxios%E6%8A%A5%E9%94%99Pomise%E6%9C%AA%E5%AE%9A%E4%B9%89%E5%8F%8AIE10%E6%8A%A5%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/IE10-1.png" class="" title="IE10下语法错误"><h2 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h2><p>当你在IE10下看到提示语法错误的时, 这时候你就得去检查检查<code>package.json</code>下 <code>webpack-dev-server</code>版本是否高于<code>2.6.1</code>. 出现这个报错主要是因为项目中使用了<code>const</code>等语法, 然而IE11以下并不认得ES6语法语法.这个问题只有在开发模式才会出现, 只要es6转码后，打包放到服务器上，就没有问题了. </p><p>如果你想在开发阶段在IE10下测试你的代码, 你可以选择降低版本到<code>2.6.1</code>上, 问题就解决了.</p><img data-src="/blog/2017/12/15/Vue%E9%A1%B9%E7%9B%AE%E4%B8%ADAxios%E6%8A%A5%E9%94%99Pomise%E6%9C%AA%E5%AE%9A%E4%B9%89%E5%8F%8AIE10%E6%8A%A5%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/IE10-2.png" class="">]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 兼容性处理 </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈前端所能做的SEO</title>
      <link href="/blog/2017/12/05/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%89%80%E8%83%BD%E5%81%9A%E7%9A%84SEO/"/>
      <url>/blog/2017/12/05/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%89%80%E8%83%BD%E5%81%9A%E7%9A%84SEO/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/12/05/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%89%80%E8%83%BD%E5%81%9A%E7%9A%84SEO/seo.png" class=""><p>SEO, 就是搜索引擎优化(Search Engine Optimization)的缩写, SEO优化是专门利用搜索引擎的搜索规则来提高网站在搜索引擎内的自然排名的一种方式. 能对搜索引擎的小蜘蛛更加友好. 那么前端能做哪些SEO的优化呢?</p><span id="more"></span><h2 id="SEO基础三要素"><a href="#SEO基础三要素" class="headerlink" title="SEO基础三要素"></a>SEO基础三要素</h2><p>我们进入某个网页打开调试工具, 在<code>&lt;head&gt;</code>标签里我们能的看到<code>&lt;title&gt;</code>标签, <code>keywords</code>和<code>description</code>的<code>&lt;meta&gt;</code>标签. 就是最基础的SEO三要素.</p><p>其中<code>&lt;title&gt;</code>标签代表着页面的标题, <code>&lt;meta keywords&gt;</code>是网站的关键字, <code>&lt;meta Description&gt;</code>则是网页的描述, 即对这些关联字进行了扩展.<br>昂, 现在我们知道了这三要素可以SEO优化, 那我们就疯狂的在关键字里加一堆上去, 越多越好?当然, 并不是这样的.这些都有限制的, 内容不可过长, 也不能过分的堆砌关键字, 每个页面的<code>description</code>也应该不同. 比如下方张老师的博客为例.</p><img data-src="/blog/2017/12/05/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%89%80%E8%83%BD%E5%81%9A%E7%9A%84SEO/head.png" class="" title="张鑫旭老师的个人博客"><h3 id="网站构造布局优化"><a href="#网站构造布局优化" class="headerlink" title="网站构造布局优化"></a>网站构造布局优化</h3><p>对网站布局进行SEO优化, 控制首页链接数量, 扁平化的目录层次(最多三层目录层次), 然后对导航SEO优化.</p><h2 id="编写语义化代码"><a href="#编写语义化代码" class="headerlink" title="编写语义化代码"></a>编写语义化代码</h2><p>我们常说, 要养成编写语义化代码的习惯. 那什么是语义化呢? 就是既要人看得懂, 也要机器能理解你的代码.<br>其实我们常用的HTML标签很多都是带语义化的. 如:</p><ul><li>H1 ~ H6都是用于表示标题</li><li>UL标签多用于无序列表</li><li>Ol标签用于有序列表</li><li>DL标签用于定义数据列表</li><li>Em, strong表示强调等</li></ul><img data-src="/blog/2017/12/05/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%89%80%E8%83%BD%E5%81%9A%E7%9A%84SEO/ul-1.png" class="" title="掘金的这种HTML就是符合语义化"><h2 id="站内优化"><a href="#站内优化" class="headerlink" title="站内优化"></a>站内优化</h2><ul><li><code>&lt;a&gt;</code> - 标签优化, 外链上加上rel=”nofollow”, 让小蜘蛛别往外面爬</li><li><code>&lt;h1&gt;</code> - 正文标题使用h1</li><li><code>&lt;img&gt;</code> - 标签使用alt说明, alt对图片起着一个注释的作用</li><li><code>&lt;strong&gt;``&lt;em&gt;</code>与<code>&lt;b&gt;``&lt;i&gt;</code>标签<br><code>&lt;strong&gt;</code>是权重标签的代表, 在搜索引擎中能够得到高度的重视, 他能突出关键词, <code>&lt;b&gt;</code>与<code>&lt;strong&gt;</code>的效果是一样的, 但是在SEO中并不会起到很好的效果, 因此不推荐使用.<br><code>&lt;em&gt;</code>表示斜体, 权重标签的重要度仅次于<code>&lt;strong&gt;</code>. </li></ul><h2 id="一些布局小技巧"><a href="#一些布局小技巧" class="headerlink" title="一些布局小技巧"></a>一些布局小技巧</h2><ul><li>重要内容HTML代码放在最前面, 小蜘蛛抓取HTML内容是按照文档流从上往下抓取的. 利用这个特点, 我们可以将重要的HTML放在上面, 然后可以通过CSS来进行布局.</li><li>重要的内容尽量不要用JS输出, 小蜘蛛看不懂JavaScript~</li><li>尽少使用iframe框架. 小蜘蛛是不会读取里面的网页的</li><li>谨慎使用<code>display: none;</code> 小蜘蛛会过滤掉<code>display: none</code>里的内容</li><li>不断的精简代码, 能使用一个标签就不要用两个标签</li></ul><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><p><a href="https://support.google.com/webmasters/answer/7451184?hl=zh-Hans">Chrome - 搜索引擎优化 (SEO) 入门指南</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SEO其实面对的是搜索引擎, 然后搜索引擎再将搜索的结果, 根据权重展现给用户. 文中讲的只是一些基础的知识, 除此之外还有<code>robots.txt</code>, 站外友链等, 这里就不详谈了. 平时前端er日常工作中应该培养好的编程习惯, 了解了SEO的规则, 可以隐性给自己页面提升质量呢~</p>]]></content>
      
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 遍历绑定toggle icon, 动态切换action</title>
      <link href="/blog/2017/11/29/Vue-v-for-%E9%81%8D%E5%8E%86%E7%BB%91%E5%AE%9Atoggle-icon-%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2action/"/>
      <url>/blog/2017/11/29/Vue-v-for-%E9%81%8D%E5%8E%86%E7%BB%91%E5%AE%9Atoggle-icon-%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2action/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/11/29/Vue-v-for-%E9%81%8D%E5%8E%86%E7%BB%91%E5%AE%9Atoggle-icon-%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2action/vue.jpg" class=""><p>在 Vue 中实现动态绑定 toggle action</p><span id="more"></span><p>在遍历<code>li</code>标签时, 动态绑定点击事件, 当点击其中一个<code>item</code>时调用函数. 函数内判断是否处于<code>action</code>状态, 是则清除 class, 从实现 toggle 的效果~ 按照这个思路也可以扩展为下拉菜单.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">      &lt;li</span><br><span class="line">        v-for=&quot;(item, index) in itemList&quot;</span><br><span class="line">        @click=&quot;openItem(index)&quot;</span><br><span class="line">        :key=&quot;item.id&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123; item.desc &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; action: actionItem === index &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      itemList: [&#123; <span class="attr">desc</span>: <span class="string">&#x27;item1&#x27;</span> &#125;, &#123; <span class="attr">desc</span>: <span class="string">&#x27;item2&#x27;</span> &#125;, &#123; <span class="attr">desc</span>: <span class="string">&#x27;item3&#x27;</span> &#125;],</span></span><br><span class="line"><span class="javascript">      actionItem: <span class="literal">null</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">openItem</span>(<span class="params">index</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.actionItem === index) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.actionItem = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.actionItem = index;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">.list &#123;</span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: left;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">14px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line">&#125;</span><br><span class="line">.list .icon &#123;</span><br><span class="line"><span class="css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">  <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">10px</span> solid;</span></span><br><span class="line"><span class="css">  <span class="attribute">border-color</span>: <span class="number">#aaa</span> transparent transparent transparent;</span></span><br><span class="line">&#125;</span><br><span class="line">.list .action &#123;</span><br><span class="line"><span class="css">  <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">254</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>初次点击, <code>action</code>触发, 再次点击清除<code>action</code></p><img data-src="/blog/2017/11/29/Vue-v-for-%E9%81%8D%E5%8E%86%E7%BB%91%E5%AE%9Atoggle-icon-%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2action/vue-1.png" class="">]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm包中的 install --save 和 install --save-dev之间到底有区别</title>
      <link href="/blog/2017/11/27/%E8%B0%88%E8%B0%88npm%E5%8C%85%E9%87%8C%E7%9A%84%20install%20--save%20%E5%92%8C%20install%20--save-dev%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/blog/2017/11/27/%E8%B0%88%E8%B0%88npm%E5%8C%85%E9%87%8C%E7%9A%84%20install%20--save%20%E5%92%8C%20install%20--save-dev%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/11/27/%E8%B0%88%E8%B0%88npm%E5%8C%85%E9%87%8C%E7%9A%84%20install%20--save%20%E5%92%8C%20install%20--save-dev%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/npm.jpg" class=""><p>当我们使用<code>npm</code>进行开发时经常能遇到需要安装依赖包, 那么<code>npm install --save</code>和<code>npm install --save-dev</code>之间到底有什么区别呢? 现在来探究一番.</p><span id="more"></span><h3 id="install-–save-dev"><a href="#install-–save-dev" class="headerlink" title="install –save-dev"></a>install –save-dev</h3><p>实际上<code>--save-dev</code>是开发时候所依赖的东西，如我们想添加自动添加前缀, 那么就安装<code>autoprefixer</code>到开发依赖去. 也就是编译打包后<code>autoprefixer</code>已经帮我们添加了相应的浏览器前缀, 那么我们之后就不需要依赖他了. 所以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel --save-dev</span><br></pre></td></tr></table></figure><p>在这里我们可以看到已经放进<code>package.json</code>中的<code>devDependencies</code>(开发依赖)中去了.</p><img data-src="/blog/2017/11/27/%E8%B0%88%E8%B0%88npm%E5%8C%85%E9%87%8C%E7%9A%84%20install%20--save%20%E5%92%8C%20install%20--save-dev%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/dev.png" class=""><h3 id="install-–save"><a href="#install-–save" class="headerlink" title="install –save"></a>install –save</h3><p><code>--save</code>就是你发布之后还依赖的东西。 如果编译打包后还需要依赖的库, 如<code>vue</code>, 所以就放进了<code>dependencies</code>中(生产依赖).</p><img data-src="/blog/2017/11/27/%E8%B0%88%E8%B0%88npm%E5%8C%85%E9%87%8C%E7%9A%84%20install%20--save%20%E5%92%8C%20install%20--save-dev%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/dep.png" class=""><p>两者需要安装的依赖其实都可以在<code>package.json</code>中手动输入相应的库和版本号, 然后使用<code>npm install</code>就能进行安装<code>package.json</code>中的所有依赖了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用JavaScript删除全部的微博</title>
      <link href="/blog/2017/11/20/%E4%BD%BF%E7%94%A8JavaScript%E5%88%A0%E9%99%A4%E5%85%A8%E9%83%A8%E7%9A%84%E5%BE%AE%E5%8D%9A/"/>
      <url>/blog/2017/11/20/%E4%BD%BF%E7%94%A8JavaScript%E5%88%A0%E9%99%A4%E5%85%A8%E9%83%A8%E7%9A%84%E5%BE%AE%E5%8D%9A/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/11/20/%E4%BD%BF%E7%94%A8JavaScript%E5%88%A0%E9%99%A4%E5%85%A8%E9%83%A8%E7%9A%84%E5%BE%AE%E5%8D%9A/weibo.png" class=""><p>生活中常常会遇到一些繁琐重复而又没有意义的东西, 所以常有人说, 作为一个程序员, 应该避免做重复没意义的事, 我们学习编程最终的目的之一无非也是偷懒….. 能让自动的就坚决不手动. 当然, 除了在学习中自己造一些有意义的轮子除外. 今天就利用一些自己所学的知识去解决生活上的一些麻烦. 比如..自动删光微博黑历史~</p><span id="more"></span><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>打开chrome浏览器(其他非IE现代浏览器都可以), 进入<strong>我的主页</strong>, 然后按下<code>F12</code>进入控制台.</p><img data-src="/blog/2017/11/20/%E4%BD%BF%E7%94%A8JavaScript%E5%88%A0%E9%99%A4%E5%85%A8%E9%83%A8%E7%9A%84%E5%BE%AE%E5%8D%9A/home.png" class=""><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>首先这次只是单纯的想通过JavaScript批量删除全部微博代替手动而已, 那么就简单了. 我们只需要模仿点击删除的动作.</p><p>找到删除微博的key, 选中DOM元素, 这里我们可以看到菜单<strong>a标签</strong>中有一个属性<code>action-type=&quot;fl_menu</code>, 在控制台进使用<code>document.querySelectorAll </code>进行测试输出, 可以看到是一个<code>NodeList</code>的类数组, 分别对应着页面每一个<code>fl_menu</code>.</p><img data-src="/blog/2017/11/20/%E4%BD%BF%E7%94%A8JavaScript%E5%88%A0%E9%99%A4%E5%85%A8%E9%83%A8%E7%9A%84%E5%BE%AE%E5%8D%9A/DOM-1.png" class="" title="Menu的DOM节点"><img data-src="/blog/2017/11/20/%E4%BD%BF%E7%94%A8JavaScript%E5%88%A0%E9%99%A4%E5%85%A8%E9%83%A8%E7%9A%84%E5%BE%AE%E5%8D%9A/DOM-2.png" class="" title="输出到控制台"><p>点击<code>menu</code>弹出下拉菜单, 继续用同样的方法分析节点, 找出一个表示用于删除的属性. 一般来说, 一个合格的程序员都懂得编写语义化的代码, 这里先推测<code>action-type=&quot;feed_list_delete</code>这个属性是专属删除微博的属性, 使用<code>document.querySelector</code>将代码在控制台上测试输出. 获取到页面中第一个delete DOM, 模拟点击后弹出一个确定框, 再次使用相同的方法确定即可.</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>一般网站都会限制用户频繁操作, 这里我们使用<code>setTimeout</code>, 测试一个weibo能够容忍的一个操作频率(可能还跟网速有关).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 经测试, 750ms是一个较快较稳定的频率, 效率过快会弹警告.</span></span><br><span class="line">  <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(Delete, <span class="number">750</span>);</span><br><span class="line">  <span class="keyword">var</span> item = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Delete</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 这里需要停止定时器等待加载, 请求XHR进行加载剩余微博.</span></span><br><span class="line"><span class="comment">     * 这里是微博的一个限制, 当页面中不存在相应的DOM, 就进行页面刷新.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (item &gt; <span class="number">15</span>) &#123;</span><br><span class="line">      item = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      <span class="keyword">return</span> timer = <span class="built_in">setTimeout</span>(Delete, <span class="number">15000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟点击</span></span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a[action-type=&quot;fl_menu&quot;]&#x27;</span>).click();</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a[action-type=&quot;feed_list_delete&quot;]&#x27;</span>).click();</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a[action-type=&quot;ok&quot;]&#x27;</span>).click();</span><br><span class="line"></span><br><span class="line">    ++item;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`已成功删除了<span class="subst">$&#123;item&#125;</span>项`</span>);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(Delete, <span class="number">750</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这样我们想要的效果就实现了.省去了一条一条删的人力, 又能运用到自己所学的知识. 其实代码代码也很简单, 无非是用到了<code>setTimeout</code>重复去递归调用而已. 要注意的是<code>querySelector</code>, 和<code>querySelector</code>都是IE9+的API, 在这里没有去考虑对IE的兼容, 并且也没有必要.</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现图片裁剪的效果</title>
      <link href="/blog/2017/11/17/Javascript%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/"/>
      <url>/blog/2017/11/17/Javascript%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/11/17/Javascript%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/image-01.jpg" class=""><p>在生活中我们时常能看到这种图片裁剪的效果, 那么他实际上底层的原理是怎么实现的呢? 让我们深入的解剖一下.</p><span id="more"></span><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><img data-src="/blog/2017/11/17/Javascript%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/clip_spec.png" class="" title="自己用PS撸的渣图"><p>首先我们先将视图一分为三, 理解为三个层级叠加在一起的仰视图.</p><ul><li>最上面是可拖动的选择窗口</li><li>中间待剪辑的可视窗口</li><li>底层是一张<code>opacity: .5</code>的背景图片</li></ul><h3 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h3><p>我们这里主要讲JavaScript, HTML与css就简要的过一下.</p><p>首先<code>HTML</code>基本结构是两张相同的结构, 两张图片分别是调整过透明度的底图和一张被裁剪过了的中间层.<code>mainBox</code>包裹着选择的小方块<code>square</code>,相对定位于image在最上面一层.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/Konachan.com - 239917 sample.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;img&quot;</span> <span class="attr">id</span>=<span class="string">&quot;image1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/Konachan.com - 239917 sample.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;img&quot;</span> <span class="attr">id</span>=<span class="string">&quot;image2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mainBox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;square left-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;square up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;square right-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;square right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;square right-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;square down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;square left-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;square left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main.css */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background</span>: <span class="number">#333</span>;&#125;</span><br><span class="line"><span class="selector-id">#box</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">100px</span>; <span class="attribute">left</span>: <span class="number">200px</span>; <span class="attribute">width</span>: <span class="number">460px</span>; <span class="attribute">height</span>: <span class="number">360px</span>;&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-tag">img</span> &#123;<span class="attribute">width</span>: <span class="number">460px</span>;&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-id">#image1</span> &#123;<span class="attribute">opacity</span>: .<span class="number">5</span>;<span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-id">#image2</span> &#123;<span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span>, <span class="number">200px</span>, <span class="number">200px</span>, <span class="number">0</span>) &#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> &#123;<span class="attribute">position</span>: absolute;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>; <span class="attribute">width</span>: <span class="number">200px</span>; <span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">box-sizing</span>: border-box;&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.square</span> &#123;<span class="attribute">position</span>: absolute; <span class="attribute">width</span>: <span class="number">8px</span>;<span class="attribute">height</span>: <span class="number">8px</span>; <span class="attribute">background</span>: <span class="number">#fff</span>&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.left-up</span>&#123;<span class="attribute">left</span>: -<span class="number">4px</span>;<span class="attribute">top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: nw-resize;&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.up</span>&#123;<span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">top</span>: -<span class="number">4px</span>;<span class="attribute">margin-left</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: n-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.right-up</span>&#123;<span class="attribute">right</span>: -<span class="number">4px</span>;<span class="attribute">top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: ne-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.right</span>&#123;<span class="attribute">right</span>: -<span class="number">4px</span>;<span class="attribute">top</span>: <span class="number">50%</span>;<span class="attribute">margin-top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: e-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.right-down</span>&#123;<span class="attribute">right</span>: -<span class="number">4px</span>;<span class="attribute">bottom</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: se-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.down</span>&#123;<span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">bottom</span>: -<span class="number">4px</span>;<span class="attribute">margin-left</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: s-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.left-down</span>&#123;<span class="attribute">left</span>: -<span class="number">4px</span>;<span class="attribute">bottom</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: sw-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-class">.main</span> <span class="selector-class">.left</span>&#123;<span class="attribute">top</span>: <span class="number">50%</span>;<span class="attribute">left</span>: -<span class="number">4px</span>;<span class="attribute">margin-top</span>: -<span class="number">4px</span>;<span class="attribute">cursor</span>: w-resize&#125;</span><br><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  -webkit-touch-callout: none;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -khtml-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  -ms-user-select: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h3><p><strong>ESMAScript</strong>并没有提供可拖动的API, 那我们先来思考一下, 该如何实现拖动的功能~ 最上层有9个<strong>小方块(Square)</strong>, 分别代表着不同方向的边界, 拖动这个边界, 无非需要实现这下面的底层步骤.</p><blockquote><p><strong>鼠标落下(MouseDown) =&gt; 鼠标拖动 =&gt; 松开鼠标(MouseUp)</strong>.</p></blockquote><p>先创建一个<code>clipImage</code>函数作为入口函数, 主要<strong>获取目标元素和生成DOM节点(后面讲), 绑定事件</strong>.<br>先给小方块绑定一个<strong>鼠标落下事件(mousedown)</strong>, 当触发事件(MouseEvent)时, 监听器调用<code>onMousedown函数</code>.<br><code>onMousedown</code>函数中, 接受四个参数<code>e</code>事件, <code>box</code>目标元素, <code>ctrl</code>小方块的方向, <code>type</code>属性, 主要是用来记录数据并暴露给全局变量进行通讯.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Util工具函数</span></span><br><span class="line">  <span class="keyword">var</span> util = &#123;</span><br><span class="line">    $: <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(dom);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &quot;全局变量&quot;, 记录状态</span></span><br><span class="line">  <span class="keyword">var</span> _MainBox, _MainCtrl, _MainType;</span><br><span class="line">  <span class="keyword">var</span> moving = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  clipImage(<span class="string">&#x27;mainBox&#x27;</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clipImage</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> boxMain = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="keyword">var</span> right = util.$(<span class="string">&#x27;#box .main .right&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add mouse down event</span></span><br><span class="line">    up.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, box, up, <span class="string">&#x27;up&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onMousedown</span>(<span class="params">e, box, ctrl, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将接受到的信息暴露出去.</span></span><br><span class="line">    _MainBox = box;</span><br><span class="line">    _MainCtrl = ctrl;</span><br><span class="line">    _MainType = type;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>紧接着来计算拖动的距离, 在<code>onMouseDown</code>函数上将<code>moving</code>拖动标记设为<code>1</code>(true也行).</p><img data-src="/blog/2017/11/17/Javascript%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/drap-1.png" class="" title="大致坐标关系图"><p>判断拖动的标记是否启动, 创建<code>getPosition</code>函数获取元素相对于页面左/上边的偏移量用于计算拖动的偏移量. 如下图.</p><img data-src="/blog/2017/11/17/Javascript%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/drap-2.png" class="" title="原理图"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">var</span> moving = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onMousedown</span>(<span class="params">e, box, ctrl, type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">  _MainBox = box;</span><br><span class="line">  _MainCtrl = ctrl;</span><br><span class="line">  _MainType = type;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移动计算偏移量并设置到box上</span></span><br><span class="line">   moving = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素相对于文档的距离</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> left = node.offsetLeft;</span><br><span class="line">  <span class="keyword">var</span> top = node.offsetTop;</span><br><span class="line">  <span class="keyword">var</span> parent = node.offsetParent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(parent) &#123;</span><br><span class="line">    left += parent.offsetLeft;</span><br><span class="line">    top += parent.offsetTop;</span><br><span class="line">    parent = parent.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="string">&quot;left&quot;</span>: left, <span class="string">&quot;top&quot;</span>: top&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 监听鼠标相对于页面的坐标</span></span><br><span class="line"><span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (moving) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="comment">// 父容器的宽高</span></span><br><span class="line">    <span class="keyword">var</span> addWidth, addHeight;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相对于屏幕左/上的距离</span></span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(_MainType) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;right&quot;</span>:</span><br><span class="line">        addWidth = e.clientX - boxX - width;</span><br><span class="line">        _MainBox.style.width = width + addWidth + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img data-src="/blog/2017/11/17/Javascript%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-%E8%A3%81%E5%89%AA%E5%9B%BE%E7%89%87%E6%95%88%E6%9E%9C/drap-2.png" class="" title="大致坐标关系图"><p>紧接着我们会发现虽然实现了拖动的效果, 但是松开鼠标<code>box宽度</code>还是会随着鼠标变化. 这是因为还没有重置标记. 随即监听<code>鼠标松开事件(MouseUp)</code>. 单边拖动就完成啦~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标松开</span></span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// reset</span></span><br><span class="line">  moving = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="整理归纳"><a href="#整理归纳" class="headerlink" title="整理归纳"></a>整理归纳</h4><p>我们将<code>switch</code>里的代码整理出来. 装进函数里去调用. 相续的将各个方向也加上, 原理也是同理. 值得注意的是将<strong>右面和下面</strong>要加上<code>box</code>的宽高才能计算出来. <strong>剩下四个边角, 如左上什么的其实就是同时调用正方位的两个函数实现的实现起来.</strong> 然后拖动功能就大功告成啦~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> util = &#123;</span><br><span class="line">    $: <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(dom);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> _MainBox, _MainCtrl, _MainType;</span><br><span class="line">  <span class="keyword">var</span> moving = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  clipImage(<span class="string">&#x27;mainBox&#x27;</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clipImage</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> boxMain = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="keyword">var</span> up = util.$(<span class="string">&#x27;#box .main .up&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> down = util.$(<span class="string">&#x27;#box .main .down&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> right = util.$(<span class="string">&#x27;#box .main .right&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> rightUp = util.$(<span class="string">&#x27;#box .main .right-up&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> rightDown = util.$(<span class="string">&#x27;#box .main .right-down&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> left = util.$(<span class="string">&#x27;#box .main .left&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> leftUp = util.$(<span class="string">&#x27;#box .main .left-up&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> leftDown = util.$(<span class="string">&#x27;#box .main .left-down&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add mouse down event</span></span><br><span class="line">    right.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, right, <span class="string">&#x27;right&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    up.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, up, <span class="string">&#x27;up&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    down.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, down, <span class="string">&#x27;down&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    left.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, left, <span class="string">&#x27;left&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    leftUp.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, leftUp, <span class="string">&#x27;leftUp&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    leftDown.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, leftDown, <span class="string">&#x27;leftDown&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    rightUp.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, rightUp, <span class="string">&#x27;rightUp&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    rightDown.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      onMousedown(e, boxMain, rightDown, <span class="string">&#x27;rightDown&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * [onMousedown description] Mouse down event</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>e    [Event]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>box  [target vessel]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>ctrl [Square DOM node]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param  <span class="type">&#123;[type]&#125;</span> </span>type [Square direction]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onMousedown</span>(<span class="params">e, box, ctrl, type</span>) </span>&#123;</span><br><span class="line">    _MainBox = box;</span><br><span class="line">    _MainCtrl = ctrl;</span><br><span class="line">    _MainType = type;</span><br><span class="line"></span><br><span class="line">    moving = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取元素相对于左边的距离</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = node.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> top = node.offsetTop;</span><br><span class="line">    <span class="keyword">var</span> parent = node.offsetParent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(parent) &#123;</span><br><span class="line">      left += parent.offsetLeft;</span><br><span class="line">      top += parent.offsetTop;</span><br><span class="line">      parent = parent.offsetParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="string">&quot;left&quot;</span>: left, <span class="string">&quot;top&quot;</span>: top&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 鼠标移动</span></span><br><span class="line">  <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (moving) &#123;</span><br><span class="line">      <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">      <span class="comment">// 父容器的宽高</span></span><br><span class="line">      <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 相对于屏幕左/上的距离</span></span><br><span class="line">      <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span>(_MainType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;right&quot;</span>:</span><br><span class="line">          right(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;up&quot;</span>:</span><br><span class="line">          up(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;down&quot;</span>:</span><br><span class="line">          down(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;left&quot;</span>:</span><br><span class="line">          left(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;leftUp&quot;</span>:</span><br><span class="line">          leftUp(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;leftDown&quot;</span>:</span><br><span class="line">          leftDown(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;rightUp&quot;</span>:</span><br><span class="line">          rightUp(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;rightDown&quot;</span>:</span><br><span class="line">          rightDown(e);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 鼠标松开</span></span><br><span class="line">  <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    moving = <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">right</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> addWidth = e.clientX - boxX - width;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addHeight = boxY - e.clientY;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    _MainBox.style.top = _MainBox.offsetTop - addHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addHeight = e.clientY - boxY - height;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">left</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> addWidth = boxX - e.clientX;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    _MainBox.style.left = _MainBox.offsetLeft - addWidth  + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">leftUp</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addWidth = boxX - e.clientX;</span><br><span class="line">    <span class="keyword">var</span> addHeight = boxY - e.clientY;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    _MainBox.style.top = _MainBox.offsetTop - addHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    _MainBox.style.left = _MainBox.offsetLeft - addWidth  + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">leftDown</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addWidth = boxX - e.clientX;</span><br><span class="line">    <span class="keyword">var</span> addHeight = e.clientY - boxY - height;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    _MainBox.style.left = _MainBox.offsetLeft - addWidth  + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rightUp</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addWidth = e.clientX - boxX - width;</span><br><span class="line">    <span class="keyword">var</span> addHeight = boxY - e.clientY;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    _MainBox.style.top = _MainBox.offsetTop - addHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rightDown</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = _MainBox.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> height = _MainBox.offsetHeight;</span><br><span class="line">    <span class="keyword">var</span> boxX = getPosition(_MainBox).left;</span><br><span class="line">    <span class="keyword">var</span> boxY = getPosition(_MainBox).top;</span><br><span class="line">    <span class="keyword">var</span> addWidth = e.clientX - boxX - width;</span><br><span class="line">    <span class="keyword">var</span> addHeight = e.clientY - boxY - height;</span><br><span class="line"></span><br><span class="line">    _MainBox.style.height = height + addHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    _MainBox.style.width = width + addWidth + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>** &lt;– 努力填坑中~ –&gt; **</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 原理解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[git] 使用 Sourcetree 实现远程仓库与本地仓库关联</title>
      <link href="/blog/2017/11/03/use-sourcetree-association/"/>
      <url>/blog/2017/11/03/use-sourcetree-association/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/11/03/use-sourcetree-association/banner.png" class=""><p><code>Sourcetree</code> 是当下比较流行的 git 客户端,简化了如何与Git存储库进行交互，从而可以专注于编码, 可以通过简单的Git GUI可视化来管理仓库, 提高效率.</p><p>今天我们来说说如何通过 <code>Sourcetree</code> 来将本地仓库与远程仓库关联.</p><span id="more"></span><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>首先把本地仓库初始化.</p><img data-src="/blog/2017/11/03/use-sourcetree-association/init.png" class=""><p>再添加到 <code>Sourcetree</code>上</p><img data-src="/blog/2017/11/03/use-sourcetree-association/add.png" class=""><p>进入 <a href="github.com">Github</a> -&gt; your profile -&gt; repositories(仓库) -&gt; New</p><img data-src="/blog/2017/11/03/use-sourcetree-association/add-02.png" class=""><p>填写仓库信息, 复制仓库链接</p><img data-src="/blog/2017/11/03/use-sourcetree-association/add-03.png" class=""><img data-src="/blog/2017/11/03/use-sourcetree-association/add-04.png" class=""><p>设置 -&gt; 添加 -&gt; 填写信息 -&gt; 确定</p><img data-src="/blog/2017/11/03/use-sourcetree-association/add-01.png" class=""><img data-src="/blog/2017/11/03/use-sourcetree-association/add-05.png" class=""><p>然后就可以提交到github了~</p><img data-src="/blog/2017/11/03/use-sourcetree-association/add-06.png" class="">]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Sourcetree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>normalize 与 reset 的取舍</title>
      <link href="/blog/2017/10/15/%E6%B5%85%E8%B0%88Normalize%E4%B8%8Ereset/"/>
      <url>/blog/2017/10/15/%E6%B5%85%E8%B0%88Normalize%E4%B8%8Ereset/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/10/15/%E6%B5%85%E8%B0%88Normalize%E4%B8%8Ereset/normalize.jpg" class=""><p>前言: 在一次开发的时候, 发现团队中的小伙伴对 <code>normalize</code> 与 <code>reset</code> 都持有不同分歧. 趁着这事来谈谈, normalize 与 reset 都有什么区别，该如何进行取舍。</p><span id="more"></span><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p><strong>reset</strong>, 顾名思义就是重置的意思. 最早的一份CSS reset来自Tantek的<code>undohtml.css</code>, Tantek根据自己的需要，对浏览器的默认样式进行了一些重置。</p><p>早期的浏览器支持和理解的CSS规范不同，导致渲染页面时效果不一致，会出现很多兼容性问题, <strong>reset</strong> 的作用是让各个浏览器的CSS样式有一个统一的基准，而这个基准更多的就是“清零”.</p><p>此后国内出现<code>* &#123;margin: 0, padding: 0&#125;</code>这种暴力清除全部样式的reset出现.</p><h2 id="normalize"><a href="#normalize" class="headerlink" title="normalize"></a>normalize</h2><p><code>Normalize</code>, 从字面上也理解也就是使其正常化. 这是<code>css reset</code>的一个代替方案.<br><code>Normalize</code>相对「平和」, 注重通用的方案，重置掉该重置的样式，保留有用的<code>user agent</code>样式，同时进行一些 bug 的修复，这点是 reset 所缺乏的。</p><p>创造<code>normalize.css</code>的目的主要是:</p><ul><li><strong>保护有用的浏览器默认样式</strong>而不是完全去掉它们</li><li><strong>一般化的样式</strong>：为大部分HTML元素提供</li><li><strong>修复浏览器自身的bug</strong>并保证各浏览器的一致性</li><li><strong>优化CSS可用性</strong>：用一些小技巧</li><li><strong>解释代码</strong>：用注释和详细的文档来</li></ul><h2 id="相比两者的利弊"><a href="#相比两者的利弊" class="headerlink" title="相比两者的利弊"></a>相比两者的利弊</h2><p>那么相对来说, 两者之间又有什么区别呢? 这里引用一下知乎用户的回答.</p><blockquote><p>CSS Reset 是革命党，CSS Reset 里最激进那一派提倡不管你小子有用没用，通通给我脱了那身衣服，凭什么你 body 出生就穿一圈 margin，凭什么你姓 h 的比别人吃得胖，凭什么你 ul 戴一胳膊珠子。于是 *{margin:0;} 等等运动，把人家全拍扁了。看似是众生平等了，实则是浪费了资源又占不到便宜，有求于人家的时候还得贱贱地给加回去，实在需要人家的默认样式了怎么办？人家锅都扔炉子里烧了，自己看着办吧<br>Normalize.css 是改良派。他们提倡，各个元素都有其存在的道理，简单粗暴地一视同仁是不好的。body 那一圈确实挤压了页面的生存空间，那就改掉。士农工商，谁有谁的作用，给他们制定个规范，确保他们在任何浏览器里都干好自己的活儿。</p></blockquote><p>然而在实际项目中, 为了还原设计图我们并不需要这种自带特性, 因此可以根据项目的需求将我们常用的标签进<strong>格式化</strong>, 但也不是跟传统的<code>reset</code>那样粗暴.</p><p>因为传统的<code>reset</code>的很多清除默认样式是无意义的, 是浪费性能的. 就比如<code>&lt;li&gt;</code>, 人家生来就没有<code>margin padding</code>, 干嘛非要给人家加个<code>margin: 0</code>上去呀??? <code>h1~h6</code>标签虽然有<code>margin</code>没有<code>padding</code>呀! 也不要一棒子全打死啦! 其实这是不严谨的态度.</p><p>以下的代码可以作为针对项目需求的进行调整. 这样看下去是不是舒服简洁多了呢? 也减少了很多无意义的性能损耗何乐而不为呢.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">body</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">form</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">1.6</span> Monda,PingFang SC,Microsoft YaHei,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  content: <span class="string">&quot; &quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>参考资料:</strong></p><ul><li><a href="https://www.zhihu.com/question/20094066">Normalize.css 与传统的 CSS Reset 有哪些区别？</a></li><li><a href="http://www.ayqy.net/blog/normalize%E3%80%81reset%E4%B8%8Ebase/">normalize、reset与base</a></li><li><a href="https://segmentfault.com/a/1190000003021766">关于CSS Reset 那些事（一）之 历史演变与Normalize.css</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速查正则表达式</title>
      <link href="/blog/2017/08/21/js-common-regexp/"/>
      <url>/blog/2017/08/21/js-common-regexp/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/08/21/js-common-regexp/regex.jpg" class=""><p>自己收集了一套针对工作中所需的正则表达式. 多适用于字符串处理、表单验证、日志数据分析等场合，实用高效.</p><span id="more"></span><blockquote><p>tips: 善用<code>Ctrl + F</code>输入关键字能提高查询的效率哟~</p></blockquote><h2 id="常见正则校验"><a href="#常见正则校验" class="headerlink" title="常见正则校验"></a>常见正则校验</h2><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户名正则，4到16位（字母，数字，下划线，减号）</span></span><br><span class="line"><span class="keyword">var</span> userNameReg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须拥有数字和特殊字符，并且在6 ~ 16位之间</span></span><br><span class="line"><span class="comment">// (?=.*[0-9]) - 断言一个字符串至少有一个数字;</span></span><br><span class="line"><span class="comment">// (?=.*[!@#$%^&amp;*]) - 断言一个字符串至少有一个特殊字符。</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(?=.*[0-9])(?=.*[!@#$%^&amp;*])[a-zA-Z0-9!@#$%^&amp;*]&#123;6,16&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配邮箱地址</span></span><br><span class="line"><span class="keyword">var</span> mailReg = <span class="regexp">/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国六位数的邮政编码</span></span><br><span class="line"><span class="keyword">var</span> postalCode = <span class="regexp">/^\d&#123;6&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配15~18位身份证</span></span><br><span class="line"><span class="keyword">var</span> IDCard = <span class="regexp">/(^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$)|(^[1-9]\d&#123;5&#125;\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;2&#125;$)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配18位的新版身份证</span></span><br><span class="line"><span class="keyword">var</span> IDCard_18 = <span class="regexp">/^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验输入框是字符数为是否为 4~16 位(英文长度为1, 汉字长度为2)</span></span><br><span class="line"><span class="keyword">var</span> numName = <span class="regexp">/^[a-zA-Z0-9]&#123;4,16&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> mate = numName.test(value.replace(<span class="regexp">/[\u4e00-\u9fa5]/g</span>, <span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ipv4地址正则</span></span><br><span class="line"><span class="keyword">var</span> IPReg = <span class="regexp">/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reg Hex颜色正则</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// URL正则</span></span><br><span class="line"><span class="keyword">var</span> urlReg= <span class="regexp">/^((https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配JSON格式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w+\((&#123;[^()]+&#125;)\)$/</span></span><br></pre></td></tr></table></figure><p>匹配<code>json</code>字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret = response.data;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> ret === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+\((&#123;[^()]+&#125;)\)$/</span></span><br><span class="line">  <span class="keyword">var</span> matches = ret.match(reg);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (matches) ret = <span class="built_in">JSON</span>.parse(matches[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">res.json(ret);</span><br></pre></td></tr></table></figure><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5-11位的腾讯qq号</span></span><br><span class="line"><span class="keyword">var</span> qqReg = <span class="regexp">/^[1-9][0-9]&#123;4,11&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span></span><br><span class="line"><span class="keyword">var</span> qqReg = <span class="regexp">/^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 国内常见</span></span><br><span class="line"><span class="keyword">var</span> phone = <span class="regexp">/^1[3|5|8|9]\d&#123;9&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定电话</span></span><br><span class="line"><span class="keyword">var</span> telephone = <span class="regexp">/^(0[0-9]&#123;2&#125;)\d&#123;8&#125;$|^(0[0-9]&#123;3&#125;(\d&#123;7,8&#125;))$/</span>;</span><br></pre></td></tr></table></figure><h3 id="匹配特定数字"><a href="#匹配特定数字" class="headerlink" title="匹配特定数字"></a>匹配特定数字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配正整数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配负整数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配整数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非负整数（正整数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*|0$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非正整数（负整数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-[1-9]\d*|0$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配正浮点数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配负浮点数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配浮点数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非负浮点数（正浮点数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配非正浮点数（负浮点数 + 0）</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$/</span>;</span><br></pre></td></tr></table></figure><h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配由26个英文字母组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由26个英文字母的大写组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[A-Z]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由26个英文字母的小写组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由数字和26个英文字母组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[A-Za-z0-9]+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配由数字、26个英文字母或者下;划线组成的字符串</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\w+$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配空白行的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\n\s*\r/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配首尾空白字符的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\s*|\s*$/</span>;</span><br><span class="line"><span class="keyword">var</span> rtrim = <span class="regexp">/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配双字节字符(包括汉字在内, 一个双字节字符长度计2，ASCII字符计1)</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^\x00-\xff]/g</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="匹配语系字符范围"><a href="#匹配语系字符范围" class="headerlink" title="匹配语系字符范围"></a>匹配语系字符范围</h3><p>用法:<code>/^[\u4E00-\u9FA5]+$/</code>(匹配简体中文)</p><p><code>2E80～33FFh</code>：中日韩符号区。收容康熙字典部首、中日韩辅助部首、注音符号、日本假名、韩文音符，中日韩的符号、标点、带圈或带括符文数字、月份，以及日本的假名组合、单位、年号、月份、日期、时间等。</p><p><code>3400～4DFFh</code>：中日韩认同表意文字扩充A区，总计收容6,582个中日韩汉字。</p><p><code>4E00～9FFFh</code>：中日韩认同表意文字区，总计收容20,902个中日韩汉字。</p><p><code>A000～A4FFh</code>：彝族文字区，收容中国南方彝族文字和字根。</p><p><code>AC00～D7FFh</code>：韩文拼音组合字区，收容以韩文音符拼成的文字。</p><p><code>F900～FAFFh</code>：中日韩兼容表意文字区，总计收容302个中日韩汉字。</p><p><code>FB00～FFFDh</code>：文字表现形式区，收容组合拉丁文字、希伯来文、阿拉伯文、中日韩直式标点、小符号、半角符号、全角符号等。</p><h2 id="正则函数使用示例"><a href="#正则函数使用示例" class="headerlink" title="正则函数使用示例"></a>正则函数使用示例</h2><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用正则匹配中文字节, 将其替换为xx, 再获取字符串的长度就是完整的长度了.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLen</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[^\x00-\xff]/g</span>, <span class="string">&#x27;xx&#x27;</span>).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配是否符合邮件规则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test返回一个布尔值, 表示是否匹配到制定字符串</span></span><br><span class="line"><span class="keyword">var</span> mail = reg.test(<span class="string">&#x27;anran758@gmail.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mail) &#123;</span><br><span class="line">  <span class="comment">// 如果邮件格式正确的话, 就可以做点啥了(雾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则技巧"><a href="#正则技巧" class="headerlink" title="正则技巧"></a>正则技巧</h2><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如这里我们想让这个日期格式反转</span></span><br><span class="line"><span class="comment">// 正则括号是一个分组, 下面的代码就捕获了三个分组</span></span><br><span class="line"><span class="comment">// 通过$分组符来转换位置, 来达到我们想要的结果</span></span><br><span class="line"><span class="string">&#x27;2018-3-21&#x27;</span>.replace(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/g</span>, <span class="string">&#x27;$2/$3/$1&#x27;</span>) <span class="comment">// &quot;3/21/2018&quot;</span></span><br></pre></td></tr></table></figure><h3 id="忽略分組"><a href="#忽略分組" class="headerlink" title="忽略分組"></a>忽略分組</h3><p>不希望捕获某些分组, 只需要分组内加上<code>?:</code>即可:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?:Byron).(ok)/</span>;</span><br><span class="line"><span class="string">&#x27;Byron-ok&#x27;</span>.replace(reg, <span class="string">&#x27;$1&#x27;</span>);  <span class="comment">// 只匹配了 ok</span></span><br></pre></td></tr></table></figure><h3 id="前瞻"><a href="#前瞻" class="headerlink" title="前瞻"></a>前瞻</h3><table><thead><tr><th>名字</th><th>正則</th></tr></thead><tbody><tr><td>正向前瞻</td><td>exp(?=assert)</td></tr><tr><td>负向前瞻</td><td>exp(?!assert)</td></tr></tbody></table><p>正向前瞻就是匹配前者, 效验后者是否存在.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个正则的意思是: 匹配一个单词字符( [a-zA-Z0-9_] ), 然后验证后面是不是数字</span></span><br><span class="line"><span class="comment">// 结果为: &quot;X2*3&quot;. 因为3后面没有数字, 所以没有匹配到.</span></span><br><span class="line"><span class="string">&#x27;a2*3&#x27;</span>.replace(<span class="regexp">/\w(?=\d)/g</span>, <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果为: &quot;X2*X4X8&quot;</span></span><br><span class="line"><span class="comment">// 总的说就是</span></span><br><span class="line"><span class="string">&#x27;a2*34v8&#x27;</span>.replace(<span class="regexp">/\w(?=\d)/g</span>, <span class="string">&#x27;X&#x27;</span>)</span><br></pre></td></tr></table></figure><p>负向前瞻则相反, 匹配前面, 替代后面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a 是单词字符, 后面是数字, 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 2 是单词字符, 后面不是数字, 被替换成X</span></span><br><span class="line"><span class="comment">// * 不是单词字符 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 3 是单词字符, 后面是数字, 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 4 是单词字符, 后面不是数字, 被替换成X</span></span><br><span class="line"><span class="comment">// v 是单词字符, 后面是数字, 因此没有匹配到</span></span><br><span class="line"><span class="comment">// 8 是单词字符, 后面没有匹配到数字, 被替换成X</span></span><br><span class="line"><span class="comment">// 结果: aX*4XvX</span></span><br><span class="line"><span class="string">&#x27;a2*34v8&#x27;</span>.replace(<span class="regexp">/\w(?!\d)/g</span>, <span class="string">&#x27;X&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><p>可视化正则表达式, 可以试试<a href="https://regexper.com/">regexper</a>, 让你看懂正则匹配的走向.</p><img data-src="/blog/2017/08/21/js-common-regexp/regexper.png" class=""><hr><p>以后的更新与维护都将在 <a href="https://github.com/anran758/Front-End-Lab/tree/master/REGEXP">Front-End-Lab/REGEXP</a> 中。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[JavaScript] 数组方法深入研究与练习</title>
      <link href="/blog/2017/07/16/array-method-test/"/>
      <url>/blog/2017/07/16/array-method-test/</url>
      
        <content type="html"><![CDATA[<img data-src="/blog/2017/07/16/array-method-test/banner.jpg" class=""><p>数组是<code>js</code>中最常见的一种数据类型，善用正确数组的方法可以编写出良好结构的代码。</p><span id="more"></span><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a><ul><li><a href="#%E5%9B%9E%E6%96%87%E5%A4%84%E7%90%86">回文处理</a></li><li><a href="#%E9%A6%96%E4%B8%AA%E5%8D%95%E8%AF%8D%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%86%99">首个单词字母大写</a></li><li><a href="#%E8%BF%94%E5%9B%9E%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97">返回数组最大的数字</a></li><li><a href="#%E6%A3%80%E6%9F%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E5%B0%BE">检查字符串结尾</a></li><li><a href="#%E9%87%8D%E5%A4%8D%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2">重复输出字符串</a></li><li><a href="#%E6%88%AA%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2">截断字符串</a></li><li><a href="#%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84">分割数组</a></li><li><a href="#%E8%BF%87%E6%BB%A4%E6%95%B0%E7%BB%84%E5%81%87%E5%80%BC">过滤数组假值</a></li><li><a href="#%E6%91%A7%E6%AF%81%E6%8C%87%E5%AE%9A%E6%95%B0%E7%BB%84">摧毁指定数组</a></li><li><a href="#%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E5%B9%B6%E6%89%BE%E5%87%BA%E5%85%83%E7%B4%A0%E7%B4%A2%E5%BC%95">数组排序并找出元素索引</a></li><li><a href="#%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81">凯撒密码</a></li><li><a href="#sum-all-numbers-in-a-range">Sum All Numbers in a Range</a><ul><li><a href="#%E9%9D%9E%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95">非数组方法</a></li></ul></li></ul></li></ul><h3 id="回文处理"><a href="#回文处理" class="headerlink" title="回文处理"></a>回文处理</h3><p><code>Palindromes(回文)</code>，顾名思义就是指倒着念和顺着念都是相同、前后对称的。</p><p>处理这种回文我们只需将字符串反转再进行对比，就可以得到结果啦：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> string = str.replace(<span class="regexp">/[\W_]/g</span>, <span class="string">&#x27;&#x27;</span>).toLowerCase();</span><br><span class="line">  <span class="keyword">var</span> replaceStr = string</span><br><span class="line">    .split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .reverse()</span><br><span class="line">    .join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> replaceStr === string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">palindrome(<span class="string">&#x27;eye&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="首个单词字母大写"><a href="#首个单词字母大写" class="headerlink" title="首个单词字母大写"></a>首个单词字母大写</h3><blockquote><p>Title Case a Sentence(首个单词字母大写)</p></blockquote><p>句中单词首字母大写, 确保字符串的每个单词首字母都大写，其余部分小写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.toLowerCase().replace(<span class="regexp">/( |^)[a-z]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">L</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.toUpperCase();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">titleCase(<span class="string">&quot;I&#x27;m a little tea pot&quot;</span>); <span class="comment">// I&#x27;m A Little Tea Pot</span></span><br></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>首先把字符串转换为小写,再用正则匹配带空格或者就字母开头的首个字母<code>replace</code>替换成大写字母.</p><h3 id="返回数组最大的数字"><a href="#返回数组最大的数字" class="headerlink" title="返回数组最大的数字"></a>返回数组最大的数字</h3><blockquote><p>Return Largest Numbers in Arrays(返回数组最大的数字)</p></blockquote><p>找出多个数组中的最大数,并返回一个新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> count = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = arr[i].sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> b - a;</span><br><span class="line">    &#125;);</span><br><span class="line">    count.push(a[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">largestOfFour([</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>],</span><br><span class="line">  [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>],</span><br><span class="line">  [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]</span><br><span class="line">]); <span class="comment">// [5,27,39,1001]</span></span><br></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>新定义一个数组,遍历传进来的数组进行从大到小排序,将排序后最大的数<code>push</code>进新的数组<code>count</code>最后再返回.</p><h3 id="检查字符串结尾"><a href="#检查字符串结尾" class="headerlink" title="检查字符串结尾"></a>检查字符串结尾</h3><blockquote><p>Confirm the Ending(检查字符串结尾)</p></blockquote><p>检查字符串结尾,判断一个字符串(str)是否以指定的字符串(target)结尾, 返回一个布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lenth = str.length - target.length;</span><br><span class="line">  <span class="keyword">return</span> str.substr(lenth) === target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirmEnding(<span class="string">&#x27;Connor&#x27;</span>, <span class="string">&#x27;n&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">confirmEnding(<span class="string">&#x27;Bastian&#x27;</span>, <span class="string">&#x27;n&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">confirmEnding(<span class="string">&#x27;He has to give me a new name&#x27;</span>, <span class="string">&#x27;me&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p><code>substr()</code>接受一个<code>start</code>的形参，是一个字符的索引，把字符串<code>str.length - target.length</code>就可以对比结尾字符串是否一样了.</p><h3 id="重复输出字符串"><a href="#重复输出字符串" class="headerlink" title="重复输出字符串"></a>重复输出字符串</h3><blockquote><p>Repeat a string repeat a string(重复输出字符串，复读机(雾)</p></blockquote><p>重复一个指定的字符串<code>num</code>次，如果<code>num</code>是一个负数则返回一个空字符串。</p><p>对于这种题目可以使用两种方法解决:</p><ul><li><p>递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种使用递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str + repeat(str, num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(<span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>); <span class="comment">// &quot;abcabcabc&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    s += str;</span><br><span class="line">    num--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(<span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>思路</p></blockquote><p>递归一般放进<code>if()</code>判断语句中,是一种通过重复地调用函数本身,逐次减少 num 的值来实现效果.<br>第二种使用了<code>while</code>语句,每调用一次就递减 1,直至<code>num &gt; 0</code>.</p><h3 id="截断字符串"><a href="#截断字符串" class="headerlink" title="截断字符串"></a>截断字符串</h3><blockquote><p>Truncate a string(截断字符串)</p></blockquote><p>截断字符串,如果字符串的长度比指定的参数 num 长，则把多余的部分用…来表示。<br>插入到字符串尾部的三个点号也会计入字符串的长度。如果指定的参数 num 小于或等于 3，则添加的三个点号不会计入字符串的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 首先判断num的值是不是大于字符串的长度,若是,那就没有必要省略了.</span></span><br><span class="line">  <span class="keyword">if</span> (num &gt;= str.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.slice(<span class="number">0</span>, num) + <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> str.slice(<span class="number">0</span>, num - <span class="number">3</span>) + <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;A-tisket a-tasket A green and yellow basket&#x27;</span>;</span><br><span class="line"></span><br><span class="line">truncate(str, str.length);</span><br></pre></td></tr></table></figure><h3 id="分割数组"><a href="#分割数组" class="headerlink" title="分割数组"></a>分割数组</h3><blockquote><p>Chunky Monkey(分割数组)</p></blockquote><p>猴子吃香蕉, 分割数组,把一个数组 arr 按照指定的数组大小<code>size</code>分割成若干个数组块。例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hunk([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">2</span>) =&gt; [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line">chunk([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],<span class="number">2</span>) =&gt; [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>]];</span><br></pre></td></tr></table></figure><blockquote><p>思路</p></blockquote><p>这道题重点主要是每<code>size</code>个值分割一个数组,这里我们可以使用以下几种方法来解题.</p><ol><li><p>while + splice</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while + splice</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个新数组和用来临时存放分割的空数组.</span></span><br><span class="line">  <span class="keyword">var</span> a = [];</span><br><span class="line">  <span class="keyword">var</span> t = [];</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需要保持快照</span></span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">    t = arr.splice(<span class="number">0</span>, size);</span><br><span class="line">    a.push(t);</span><br><span class="line">    i += size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>for + slice</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for + splice</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = [],</span><br><span class="line">    t = [],</span><br><span class="line">    len = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数组中的个数小于size或者size是小于等于0的也就没有必要分割了</span></span><br><span class="line">  <span class="keyword">if</span> (len &lt;= size || size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 它的重点主要是数组中的值的数量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i += size) &#123;</span><br><span class="line">      <span class="comment">// 查询指定数</span></span><br><span class="line">      t = arr.slice(i, i + size);</span><br><span class="line">      a.push(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>while + slice</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while + slice</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = [],</span><br><span class="line">    t = [],</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    len = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">    <span class="comment">// 查询的值</span></span><br><span class="line">    t = arr.slice(i, (i += size));</span><br><span class="line">    a.push(t);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="过滤数组假值"><a href="#过滤数组假值" class="headerlink" title="过滤数组假值"></a>过滤数组假值</h3><blockquote><p>Falsy Bouncer(过滤数组假值)</p></blockquote><p>删除数组中的所有假值。在 JavaScript 中，假值有 <code>false</code>、<code>null</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>undefined</code>和<code>NaN</code>。</p><p>这道题比较有意思..</p><p>一开始我走进了一个误区，想着单纯<code>return x !== false &amp;&amp; ...</code>这样简单的返回就可以了，后来发现在处理<code>NaN</code>时会很麻烦..<code>isNaN()</code>还会把英文字符串也给过滤掉,再加上多个<code>&amp;&amp;</code>使得代码会变得繁乱,可读性不高.</p><p>然后查阅了一番资料后,才注意到平时被忽略<code>Boolean()</code>的一些特性对于处理这种类型的问题简直不能太合适.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Boolean</span>(x);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bouncer([<span class="number">7</span>, <span class="string">&#x27;ate&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">false</span>, <span class="number">9</span>]);</span><br></pre></td></tr></table></figure><p><strong>摘至<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean">MDN.Boolean</a> 的描述:</strong></p><blockquote><p>如果 Boolean 构造函数的参数不是一个布尔值,则该参数会被转换成一个布尔值.<strong>如果参数是 0, -0, null, false, NaN, undefined, 或者空字符串 (“”),生成的 Boolean 对象的值为 false</strong>。其他任何值,包括任何对象或者字符串”false”, 都会创建一个值为 true 的 Boolean 对象.</p></blockquote><h3 id="摧毁指定数组"><a href="#摧毁指定数组" class="headerlink" title="摧毁指定数组"></a>摧毁指定数组</h3><p>Seek and Destroy (摧毁指定数组)</p><p>实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。</p><blockquote><p>实现原理</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">filter()</a> 为数组中的每个元素调用一次 <code>callback</code>函数，并利用所有使得 <code>callback</code> 返回 true 或 等价于 true 的值 的元素创建一个<strong>新数组.</strong><br><code>filter()</code>从头至尾遍历数组,<strong>若回调函数返回的是 true(通过测试),就存入新数组中.若返回的是 false,则过滤掉.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 先将第一个参数隔开,定义一个储存着待移除的空数组</span></span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>[<span class="number">0</span>], removeArgs = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 要被删除的参数装进&#x27;removeArgs&#x27;里</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    removeArgs.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历&#x27;args&#x27;,若&#x27;removeArgs&#x27;中不存在&#x27;value&#x27;,应该返回-1.反之返回false被过滤掉.</span></span><br><span class="line">  <span class="keyword">return</span> args.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeArgs.indexOf(value) === -<span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">destroyer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组排序并找出元素索引"><a href="#数组排序并找出元素索引" class="headerlink" title="数组排序并找出元素索引"></a>数组排序并找出元素索引</h3><blockquote><p>Where do I belong (数组排序并找出元素索引)</p></blockquote><p>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。</p><p>举例：where([1,2,3,4], 1.5) 应该返回 1。因为 1.5 插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而 1.5 对应的索引值就是 1。</p><p> 同理，where([20,3,5], 19) 应该返回 2。因为数组会先排序为 [3,5,20]，19 插入到数组[3,5,20]后变成[3,5,19,20]，而 19 对应的索引值就是 2。</p><blockquote><p>思路</p></blockquote><p>这个没啥好说的了..将第二个参数<code>push</code>进数组中,再进行排序.排序后通过<code>indexOf()</code>来实现功能.<strong>不过需要注意的是<code>sort</code>默认是按照’Unicode’编码进行排序的.</strong></p><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><blockquote><p>Caesars Cipher (凯撒密码)</p></blockquote><p>风靡全球的凯撒密码 Caesar cipher，又叫移位密码。移位密码也就是密码中的字母会按照指定的数量来做移位。</p><p>一个常见的案例就是 ROT13 密码，字母会移位 13 个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。</p><p>写一个 ROT13 函数，实现输入加密字符串，输出解密字符串。所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。</p><blockquote><p>思路</p></blockquote><p>本次练习用到<code>String.charCodeAt()</code>和<code>String.fromCharCode()</code>,首先来查询字符串的 Unicode 字符.</p><p>根据<code>Unicode</code>表我们得知:</p><ul><li><code>&lt; 65</code>同时<code>&gt; 90</code>对应的就是数字和小写字符<code>a-z</code></li><li><code>&gt;= 65</code>和<code>&lt;= 77</code>对应的就是大写字符<code>A-M</code>(13 位)</li><li><code>&gt;= 78</code>和<code>&lt;= 90</code> 对应的就是大写字符<code>N-Z</code></li></ul><p>ROT13 的功能就是移位,如果序号小于 78(A-M 字母)，使用 String.fromCharCode()转换成该序号加 13 的字符,反之减 13.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rot13</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// LBH QVQ VG!</span></span><br><span class="line">  <span class="keyword">var</span> newStr = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 查询每个字符串的Unicode编号</span></span><br><span class="line">    <span class="keyword">var</span> temp = str.charCodeAt(i);</span><br><span class="line">    <span class="comment">// 非大写字母,空格,数字等都不转换</span></span><br><span class="line">    <span class="keyword">if</span> (temp &lt; <span class="number">65</span> || temp &gt; <span class="number">91</span>) &#123;</span><br><span class="line">      newStr.push(str.charAt(i));</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 大于77(N-Z),就转换成该序号 - 13的字符串.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp &gt; <span class="number">77</span>) &#123;</span><br><span class="line">      newStr.push(<span class="built_in">String</span>.fromCharCode(temp - <span class="number">13</span>));</span><br><span class="line">      <span class="comment">// 小于78(A-M),就转换成该序号 + 13的字符串</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newStr.push(<span class="built_in">String</span>.fromCharCode(temp + <span class="number">13</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newStr.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rot13(<span class="string">&#x27;SERR PBQR PNZC&#x27;</span>); <span class="comment">// 你可以修改这一行来测试你的代码</span></span><br></pre></td></tr></table></figure><h3 id="Sum-All-Numbers-in-a-Range"><a href="#Sum-All-Numbers-in-a-Range" class="headerlink" title="Sum All Numbers in a Range"></a>Sum All Numbers in a Range</h3><blockquote><p>题目描述</p></blockquote><p>&emsp;&emsp;传递给一个包含两个数字的数组。返回这两个数字和<strong>它们之间所有数字的和</strong>。最小的数字并非总在最前面。<br>比如传递<code>[1, 4]</code>会返回<code>10</code>, 即<code>1 + 2 + 3 + 4</code>.</p><h4 id="非数组方法"><a href="#非数组方法" class="headerlink" title="非数组方法"></a>非数组方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</span><br><span class="line">  <span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>,arr);</span><br><span class="line">  <span class="keyword">var</span> num = max - min;</span><br><span class="line">  <span class="keyword">var</span> total = min;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(num) &#123;</span><br><span class="line">    num--;</span><br><span class="line">    total += ++min;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sumAll([<span class="number">1</span>, <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
            <tag> FCC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
